{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isResumableError = exports.isNetworkTimeoutError = exports.isSDAMUnrecoverableError = exports.isNodeShuttingDownError = exports.isRetryableError = exports.isRetryableWriteError = exports.isRetryableEndTransactionError = exports.MongoWriteConcernError = exports.MongoServerSelectionError = exports.MongoSystemError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoCompatibilityError = exports.MongoInvalidArgumentError = exports.MongoParseError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.isNetworkErrorBeforeHandshake = exports.MongoTopologyClosedError = exports.MongoCursorExhaustedError = exports.MongoServerClosedError = exports.MongoCursorInUseError = exports.MongoGridFSChunkError = exports.MongoGridFSStreamError = exports.MongoTailableCursorError = exports.MongoChangeStreamError = exports.MongoKerberosError = exports.MongoExpiredSessionError = exports.MongoTransactionError = exports.MongoNotConnectedError = exports.MongoDecompressionError = exports.MongoBatchReExecutionError = exports.MongoRuntimeError = exports.MongoAPIError = exports.MongoDriverError = exports.MongoServerError = exports.MongoError = exports.GET_MORE_RESUMABLE_CODES = exports.MONGODB_ERROR_CODES = exports.NODE_IS_RECOVERING_ERROR_MESSAGE = exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = void 0;\n/** @internal */\n\nconst kErrorLabels = Symbol('errorLabels');\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a writable primary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\n\nexports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = 'not master';\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a primary or secondary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\n\nexports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = 'not master or secondary';\n/**\n * @internal\n * The error message from the server that indicates the node is recovering\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\n\nexports.NODE_IS_RECOVERING_ERROR_MESSAGE = 'node is recovering';\n/** @internal MongoDB Error Codes */\n\nexports.MONGODB_ERROR_CODES = Object.freeze({\n  HostUnreachable: 6,\n  HostNotFound: 7,\n  NetworkTimeout: 89,\n  ShutdownInProgress: 91,\n  PrimarySteppedDown: 189,\n  ExceededTimeLimit: 262,\n  SocketException: 9001,\n  NotWritablePrimary: 10107,\n  InterruptedAtShutdown: 11600,\n  InterruptedDueToReplStateChange: 11602,\n  NotPrimaryNoSecondaryOk: 13435,\n  NotPrimaryOrSecondary: 13436,\n  StaleShardVersion: 63,\n  StaleEpoch: 150,\n  StaleConfig: 13388,\n  RetryChangeStream: 234,\n  FailedToSatisfyReadPreference: 133,\n  CursorNotFound: 43,\n  LegacyNotPrimary: 10058,\n  WriteConcernFailed: 64,\n  NamespaceNotFound: 26,\n  IllegalOperation: 20,\n  MaxTimeMSExpired: 50,\n  UnknownReplWriteConcern: 79,\n  UnsatisfiableWriteConcern: 100\n}); // From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\n\nexports.GET_MORE_RESUMABLE_CODES = new Set([exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.ExceededTimeLimit, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.NotWritablePrimary, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk, exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary, exports.MONGODB_ERROR_CODES.StaleShardVersion, exports.MONGODB_ERROR_CODES.StaleEpoch, exports.MONGODB_ERROR_CODES.StaleConfig, exports.MONGODB_ERROR_CODES.RetryChangeStream, exports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference, exports.MONGODB_ERROR_CODES.CursorNotFound]);\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error, it uses the constructor with a string argument\n */\n\nclass MongoError extends Error {\n  constructor(message) {\n    if (message instanceof Error) {\n      super(message.message);\n    } else {\n      super(message);\n    }\n  }\n\n  get name() {\n    return 'MongoError';\n  }\n  /** Legacy name for server error responses */\n\n\n  get errmsg() {\n    return this.message;\n  }\n  /**\n   * Checks the error to see if it has an error label\n   *\n   * @param label - The error label to check for\n   * @returns returns true if the error has the provided error label\n   */\n\n\n  hasErrorLabel(label) {\n    if (this[kErrorLabels] == null) {\n      return false;\n    }\n\n    return this[kErrorLabels].has(label);\n  }\n\n  addErrorLabel(label) {\n    if (this[kErrorLabels] == null) {\n      this[kErrorLabels] = new Set();\n    }\n\n    this[kErrorLabels].add(label);\n  }\n\n  get errorLabels() {\n    return this[kErrorLabels] ? Array.from(this[kErrorLabels]) : [];\n  }\n\n}\n\nexports.MongoError = MongoError;\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\n\nclass MongoServerError extends MongoError {\n  constructor(message) {\n    super(message.message || message.errmsg || message.$err || 'n/a');\n\n    if (message.errorLabels) {\n      this[kErrorLabels] = new Set(message.errorLabels);\n    }\n\n    for (const name in message) {\n      if (name !== 'errorLabels' && name !== 'errmsg' && name !== 'message') this[name] = message[name];\n    }\n  }\n\n  get name() {\n    return 'MongoServerError';\n  }\n\n}\n\nexports.MongoServerError = MongoServerError;\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\n\nclass MongoDriverError extends MongoError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoDriverError';\n  }\n\n}\n\nexports.MongoDriverError = MongoDriverError;\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\n\nclass MongoAPIError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoAPIError';\n  }\n\n}\n\nexports.MongoAPIError = MongoAPIError;\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\n\nclass MongoRuntimeError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoRuntimeError';\n  }\n\n}\n\nexports.MongoRuntimeError = MongoRuntimeError;\n/**\n * An error generated when a batch command is reexecuted after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\n\nclass MongoBatchReExecutionError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'This batch has already been executed, create new batch to execute';\n    super(message);\n  }\n\n  get name() {\n    return 'MongoBatchReExecutionError';\n  }\n\n}\n\nexports.MongoBatchReExecutionError = MongoBatchReExecutionError;\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\n\nclass MongoDecompressionError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoDecompressionError';\n  }\n\n}\n\nexports.MongoDecompressionError = MongoDecompressionError;\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\n\nclass MongoNotConnectedError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoNotConnectedError';\n  }\n\n}\n\nexports.MongoNotConnectedError = MongoNotConnectedError;\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\n\nclass MongoTransactionError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoTransactionError';\n  }\n\n}\n\nexports.MongoTransactionError = MongoTransactionError;\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\n\nclass MongoExpiredSessionError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Cannot use a session that has ended';\n    super(message);\n  }\n\n  get name() {\n    return 'MongoExpiredSessionError';\n  }\n\n}\n\nexports.MongoExpiredSessionError = MongoExpiredSessionError;\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\n\nclass MongoKerberosError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoKerberosError';\n  }\n\n}\n\nexports.MongoKerberosError = MongoKerberosError;\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\n\nclass MongoChangeStreamError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoChangeStreamError';\n  }\n\n}\n\nexports.MongoChangeStreamError = MongoChangeStreamError;\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\n\nclass MongoTailableCursorError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Tailable cursor does not support this operation';\n    super(message);\n  }\n\n  get name() {\n    return 'MongoTailableCursorError';\n  }\n\n}\n\nexports.MongoTailableCursorError = MongoTailableCursorError;\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\n\nclass MongoGridFSStreamError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoGridFSStreamError';\n  }\n\n}\n\nexports.MongoGridFSStreamError = MongoGridFSStreamError;\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\n\nclass MongoGridFSChunkError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoGridFSChunkError';\n  }\n\n}\n\nexports.MongoGridFSChunkError = MongoGridFSChunkError;\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\n\nclass MongoCursorInUseError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Cursor is already initialized';\n    super(message);\n  }\n\n  get name() {\n    return 'MongoCursorInUseError';\n  }\n\n}\n\nexports.MongoCursorInUseError = MongoCursorInUseError;\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\n\nclass MongoServerClosedError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Server is closed';\n    super(message);\n  }\n\n  get name() {\n    return 'MongoServerClosedError';\n  }\n\n}\n\nexports.MongoServerClosedError = MongoServerClosedError;\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\n\nclass MongoCursorExhaustedError extends MongoAPIError {\n  constructor(message) {\n    super(message || 'Cursor is exhausted');\n  }\n\n  get name() {\n    return 'MongoCursorExhaustedError';\n  }\n\n}\n\nexports.MongoCursorExhaustedError = MongoCursorExhaustedError;\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\n\nclass MongoTopologyClosedError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Topology is closed';\n    super(message);\n  }\n\n  get name() {\n    return 'MongoTopologyClosedError';\n  }\n\n}\n\nexports.MongoTopologyClosedError = MongoTopologyClosedError;\n/** @internal */\n\nconst kBeforeHandshake = Symbol('beforeHandshake');\n\nfunction isNetworkErrorBeforeHandshake(err) {\n  return err[kBeforeHandshake] === true;\n}\n\nexports.isNetworkErrorBeforeHandshake = isNetworkErrorBeforeHandshake;\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\n\nclass MongoNetworkError extends MongoError {\n  constructor(message, options) {\n    super(message);\n\n    if (options && typeof options.beforeHandshake === 'boolean') {\n      this[kBeforeHandshake] = options.beforeHandshake;\n    }\n  }\n\n  get name() {\n    return 'MongoNetworkError';\n  }\n\n}\n\nexports.MongoNetworkError = MongoNetworkError;\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error with an instanceof check\n */\n\nclass MongoNetworkTimeoutError extends MongoNetworkError {\n  constructor(message, options) {\n    super(message, options);\n  }\n\n  get name() {\n    return 'MongoNetworkTimeoutError';\n  }\n\n}\n\nexports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\n\nclass MongoParseError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoParseError';\n  }\n\n}\n\nexports.MongoParseError = MongoParseError;\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\n\nclass MongoInvalidArgumentError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoInvalidArgumentError';\n  }\n\n}\n\nexports.MongoInvalidArgumentError = MongoInvalidArgumentError;\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\n\nclass MongoCompatibilityError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoCompatibilityError';\n  }\n\n}\n\nexports.MongoCompatibilityError = MongoCompatibilityError;\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\n\nclass MongoMissingCredentialsError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoMissingCredentialsError';\n  }\n\n}\n\nexports.MongoMissingCredentialsError = MongoMissingCredentialsError;\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\n\nclass MongoMissingDependencyError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoMissingDependencyError';\n  }\n\n}\n\nexports.MongoMissingDependencyError = MongoMissingDependencyError;\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\n\nclass MongoSystemError extends MongoError {\n  constructor(message, reason) {\n    var _a;\n\n    if (reason && reason.error) {\n      super(reason.error.message || reason.error);\n    } else {\n      super(message);\n    }\n\n    if (reason) {\n      this.reason = reason;\n    }\n\n    this.code = (_a = reason.error) === null || _a === void 0 ? void 0 : _a.code;\n  }\n\n  get name() {\n    return 'MongoSystemError';\n  }\n\n}\n\nexports.MongoSystemError = MongoSystemError;\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\n\nclass MongoServerSelectionError extends MongoSystemError {\n  constructor(message, reason) {\n    super(message, reason);\n  }\n\n  get name() {\n    return 'MongoServerSelectionError';\n  }\n\n}\n\nexports.MongoServerSelectionError = MongoServerSelectionError;\n\nfunction makeWriteConcernResultObject(input) {\n  const output = Object.assign({}, input);\n\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n\n  return output;\n}\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\n\n\nclass MongoWriteConcernError extends MongoServerError {\n  constructor(message, result) {\n    if (result && Array.isArray(result.errorLabels)) {\n      message.errorLabels = result.errorLabels;\n    }\n\n    super(message);\n    this.errInfo = message.errInfo;\n\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n\n  get name() {\n    return 'MongoWriteConcernError';\n  }\n\n}\n\nexports.MongoWriteConcernError = MongoWriteConcernError; // see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\n\nconst RETRYABLE_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.NotWritablePrimary, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk, exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary]);\nconst RETRYABLE_WRITE_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotWritablePrimary, exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk, exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.ExceededTimeLimit]);\n\nfunction isRetryableEndTransactionError(error) {\n  return error.hasErrorLabel('RetryableWriteError');\n}\n\nexports.isRetryableEndTransactionError = isRetryableEndTransactionError;\n\nfunction isRetryableWriteError(error) {\n  var _a, _b, _c;\n\n  if (error instanceof MongoWriteConcernError) {\n    return RETRYABLE_WRITE_ERROR_CODES.has((_c = (_b = (_a = error.result) === null || _a === void 0 ? void 0 : _a.code) !== null && _b !== void 0 ? _b : error.code) !== null && _c !== void 0 ? _c : 0);\n  }\n\n  return typeof error.code === 'number' && RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n}\n\nexports.isRetryableWriteError = isRetryableWriteError;\n/** Determines whether an error is something the driver should attempt to retry */\n\nfunction isRetryableError(error) {\n  return (// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    typeof error.code === 'number' && RETRYABLE_ERROR_CODES.has(error.code) || error instanceof MongoNetworkError || !!error.message.match(new RegExp(exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE)) || !!error.message.match(new RegExp(exports.NODE_IS_RECOVERING_ERROR_MESSAGE))\n  );\n}\n\nexports.isRetryableError = isRetryableError;\nconst SDAM_RECOVERING_CODES = new Set([exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary]);\nconst SDAM_NOTPRIMARY_CODES = new Set([exports.MONGODB_ERROR_CODES.NotWritablePrimary, exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk, exports.MONGODB_ERROR_CODES.LegacyNotPrimary]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.ShutdownInProgress]);\n\nfunction isRecoveringError(err) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_RECOVERING_CODES.has(err.code);\n  }\n\n  return new RegExp(exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE).test(err.message) || new RegExp(exports.NODE_IS_RECOVERING_ERROR_MESSAGE).test(err.message);\n}\n\nfunction isNotWritablePrimaryError(err) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_NOTPRIMARY_CODES.has(err.code);\n  }\n\n  if (isRecoveringError(err)) {\n    return false;\n  }\n\n  return new RegExp(exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE).test(err.message);\n}\n\nfunction isNodeShuttingDownError(err) {\n  return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\n\nexports.isNodeShuttingDownError = isNodeShuttingDownError;\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */\n\nfunction isSDAMUnrecoverableError(error) {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n\n  return isRecoveringError(error) || isNotWritablePrimaryError(error);\n}\n\nexports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;\n\nfunction isNetworkTimeoutError(err) {\n  return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\n\nexports.isNetworkTimeoutError = isNetworkTimeoutError; // From spec@https://github.com/mongodb/specifications/blob/7a2e93d85935ee4b1046a8d2ad3514c657dc74fa/source/change-streams/change-streams.rst#resumable-error:\n//\n// An error is considered resumable if it meets any of the following criteria:\n// - any error encountered which is not a server error (e.g. a timeout error or network error)\n// - any server error response from a getMore command excluding those containing the error label\n//   NonRetryableChangeStreamError and those containing the following error codes:\n//   - Interrupted: 11601\n//   - CappedPositionLost: 136\n//   - CursorKilled: 237\n//\n// An error on an aggregate command is not a resumable error. Only errors on a getMore command may be considered resumable errors.\n\nfunction isResumableError(error, wireVersion) {\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  if (wireVersion != null && wireVersion >= 9) {\n    // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n    if (error && error instanceof MongoError && error.code === 43) {\n      return true;\n    }\n\n    return error instanceof MongoError && error.hasErrorLabel('ResumableChangeStreamError');\n  }\n\n  if (error && typeof error.code === 'number') {\n    return exports.GET_MORE_RESUMABLE_CODES.has(error.code);\n  }\n\n  return false;\n}\n\nexports.isResumableError = isResumableError;","map":{"version":3,"mappings":";;;;;;AAOA;;AACA,MAAMA,YAAY,GAAGC,MAAM,CAAC,aAAD,CAA3B;AAEA;;;;;;AAKaC,oDAA4C,YAA5C;AAEb;;;;;;AAKaA,wDAAgD,yBAAhD;AAEb;;;;;;AAKaA,2CAAmC,oBAAnC;AAEb;;AACaA,8BAAsBC,MAAM,CAACC,MAAP,CAAc;AAC/CC,iBAAe,EAAE,CAD8B;AAE/CC,cAAY,EAAE,CAFiC;AAG/CC,gBAAc,EAAE,EAH+B;AAI/CC,oBAAkB,EAAE,EAJ2B;AAK/CC,oBAAkB,EAAE,GAL2B;AAM/CC,mBAAiB,EAAE,GAN4B;AAO/CC,iBAAe,EAAE,IAP8B;AAQ/CC,oBAAkB,EAAE,KAR2B;AAS/CC,uBAAqB,EAAE,KATwB;AAU/CC,iCAA+B,EAAE,KAVc;AAW/CC,yBAAuB,EAAE,KAXsB;AAY/CC,uBAAqB,EAAE,KAZwB;AAa/CC,mBAAiB,EAAE,EAb4B;AAc/CC,YAAU,EAAE,GAdmC;AAe/CC,aAAW,EAAE,KAfkC;AAgB/CC,mBAAiB,EAAE,GAhB4B;AAiB/CC,+BAA6B,EAAE,GAjBgB;AAkB/CC,gBAAc,EAAE,EAlB+B;AAmB/CC,kBAAgB,EAAE,KAnB6B;AAoB/CC,oBAAkB,EAAE,EApB2B;AAqB/CC,mBAAiB,EAAE,EArB4B;AAsB/CC,kBAAgB,EAAE,EAtB6B;AAuB/CC,kBAAgB,EAAE,EAvB6B;AAwB/CC,yBAAuB,EAAE,EAxBsB;AAyB/CC,2BAAyB,EAAE;AAzBoB,CAAd,CAAtB,C,CA4Bb;;AACa3B,mCAA2B,IAAI4B,GAAJ,CAAgB,CACtD5B,4BAAoBG,eADkC,EAEtDH,4BAAoBI,YAFkC,EAGtDJ,4BAAoBK,cAHkC,EAItDL,4BAAoBM,kBAJkC,EAKtDN,4BAAoBO,kBALkC,EAMtDP,4BAAoBQ,iBANkC,EAOtDR,4BAAoBS,eAPkC,EAQtDT,4BAAoBU,kBARkC,EAStDV,4BAAoBW,qBATkC,EAUtDX,4BAAoBY,+BAVkC,EAWtDZ,4BAAoBa,uBAXkC,EAYtDb,4BAAoBc,qBAZkC,EAatDd,4BAAoBe,iBAbkC,EActDf,4BAAoBgB,UAdkC,EAetDhB,4BAAoBiB,WAfkC,EAgBtDjB,4BAAoBkB,iBAhBkC,EAiBtDlB,4BAAoBmB,6BAjBkC,EAkBtDnB,4BAAoBoB,cAlBkC,CAAhB,CAA3B;AA8Bb;;;;;;;;AAOA,MAAaS,UAAb,SAAgCC,KAAhC,CAAqC;AAWnCC,cAAYC,OAAZ,EAAmC;AACjC,QAAIA,OAAO,YAAYF,KAAvB,EAA8B;AAC5B,YAAME,OAAO,CAACA,OAAd;AACD,KAFD,MAEO;AACL,YAAMA,OAAN;AACD;AACF;;AAEO,MAAJC,IAAI;AACN,WAAO,YAAP;AACD;AAED;;;AACU,MAANC,MAAM;AACR,WAAO,KAAKF,OAAZ;AACD;AAED;;;;;;;;AAMAG,eAAa,CAACC,KAAD,EAAc;AACzB,QAAI,KAAKtC,YAAL,KAAsB,IAA1B,EAAgC;AAC9B,aAAO,KAAP;AACD;;AAED,WAAO,KAAKA,YAAL,EAAmBuC,GAAnB,CAAuBD,KAAvB,CAAP;AACD;;AAEDE,eAAa,CAACF,KAAD,EAAc;AACzB,QAAI,KAAKtC,YAAL,KAAsB,IAA1B,EAAgC;AAC9B,WAAKA,YAAL,IAAqB,IAAI8B,GAAJ,EAArB;AACD;;AAED,SAAK9B,YAAL,EAAmByC,GAAnB,CAAuBH,KAAvB;AACD;;AAEc,MAAXI,WAAW;AACb,WAAO,KAAK1C,YAAL,IAAqB2C,KAAK,CAACC,IAAN,CAAW,KAAK5C,YAAL,CAAX,CAArB,GAAsD,EAA7D;AACD;;AApDkC;;AAArCE;AAuDA;;;;;;;AAMA,MAAa2C,gBAAb,SAAsCd,UAAtC,CAAgD;AAO9CE,cAAYC,OAAZ,EAAqC;AACnC,UAAMA,OAAO,CAACA,OAAR,IAAmBA,OAAO,CAACE,MAA3B,IAAqCF,OAAO,CAACY,IAA7C,IAAqD,KAA3D;;AACA,QAAIZ,OAAO,CAACQ,WAAZ,EAAyB;AACvB,WAAK1C,YAAL,IAAqB,IAAI8B,GAAJ,CAAQI,OAAO,CAACQ,WAAhB,CAArB;AACD;;AAED,SAAK,MAAMP,IAAX,IAAmBD,OAAnB,EAA4B;AAC1B,UAAIC,IAAI,KAAK,aAAT,IAA0BA,IAAI,KAAK,QAAnC,IAA+CA,IAAI,KAAK,SAA5D,EACE,KAAKA,IAAL,IAAaD,OAAO,CAACC,IAAD,CAApB;AACH;AACF;;AAEO,MAAJA,IAAI;AACN,WAAO,kBAAP;AACD;;AArB6C;;AAAhDjC;AAwBA;;;;;;;AAMA,MAAa6C,gBAAb,SAAsChB,UAAtC,CAAgD;AAC9CE,cAAYC,OAAZ,EAA2B;AACzB,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,kBAAP;AACD;;AAP6C;;AAAhDjC;AAUA;;;;;;;;;;AAUA,MAAa8C,aAAb,SAAmCD,gBAAnC,CAAmD;AACjDd,cAAYC,OAAZ,EAA2B;AACzB,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,eAAP;AACD;;AAPgD;;AAAnDjC;AAUA;;;;;;;;;;;AAUA,MAAa+C,iBAAb,SAAuCF,gBAAvC,CAAuD;AACrDd,cAAYC,OAAZ,EAA2B;AACzB,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,mBAAP;AACD;;AAPoD;;AAAvDjC;AAUA;;;;;;;;AAOA,MAAagD,0BAAb,SAAgDF,aAAhD,CAA6D;AAC3Df,gBAAyF;AAAA,QAA7EC,OAA6E,uEAAnE,mEAAmE;AACvF,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,4BAAP;AACD;;AAP0D;;AAA7DjC;AAUA;;;;;;;;AAOA,MAAaiD,uBAAb,SAA6CF,iBAA7C,CAA8D;AAC5DhB,cAAYC,OAAZ,EAA2B;AACzB,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,yBAAP;AACD;;AAP2D;;AAA9DjC;AAUA;;;;;;;;AAOA,MAAakD,sBAAb,SAA4CJ,aAA5C,CAAyD;AACvDf,cAAYC,OAAZ,EAA2B;AACzB,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,wBAAP;AACD;;AAPsD;;AAAzDjC;AAUA;;;;;;;;AAOA,MAAamD,qBAAb,SAA2CL,aAA3C,CAAwD;AACtDf,cAAYC,OAAZ,EAA2B;AACzB,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,uBAAP;AACD;;AAPqD;;AAAxDjC;AAUA;;;;;;;;AAOA,MAAaoD,wBAAb,SAA8CN,aAA9C,CAA2D;AACzDf,gBAA2D;AAAA,QAA/CC,OAA+C,uEAArC,qCAAqC;AACzD,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,0BAAP;AACD;;AAPwD;;AAA3DjC;AAUA;;;;;;;;AAOA,MAAaqD,kBAAb,SAAwCN,iBAAxC,CAAyD;AACvDhB,cAAYC,OAAZ,EAA2B;AACzB,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,oBAAP;AACD;;AAPsD;;AAAzDjC;AAUA;;;;;;;AAMA,MAAasD,sBAAb,SAA4CP,iBAA5C,CAA6D;AAC3DhB,cAAYC,OAAZ,EAA2B;AACzB,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,wBAAP;AACD;;AAP0D;;AAA7DjC;AAUA;;;;;;;AAMA,MAAauD,wBAAb,SAA8CT,aAA9C,CAA2D;AACzDf,gBAAuE;AAAA,QAA3DC,OAA2D,uEAAjD,iDAAiD;AACrE,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,0BAAP;AACD;;AAPwD;;AAA3DjC;AAUA;;;;;;AAKA,MAAawD,sBAAb,SAA4CT,iBAA5C,CAA6D;AAC3DhB,cAAYC,OAAZ,EAA2B;AACzB,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,wBAAP;AACD;;AAP0D;;AAA7DjC;AAUA;;;;;;;;AAOA,MAAayD,qBAAb,SAA2CV,iBAA3C,CAA4D;AAC1DhB,cAAYC,OAAZ,EAA2B;AACzB,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,uBAAP;AACD;;AAPyD;;AAA5DjC;AAUA;;;;;;;;AAOA,MAAa0D,qBAAb,SAA2CZ,aAA3C,CAAwD;AACtDf,gBAAqD;AAAA,QAAzCC,OAAyC,uEAA/B,+BAA+B;AACnD,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,uBAAP;AACD;;AAPqD;;AAAxDjC;AAUA;;;;;;;;AAOA,MAAa2D,sBAAb,SAA4Cb,aAA5C,CAAyD;AACvDf,gBAAwC;AAAA,QAA5BC,OAA4B,uEAAlB,kBAAkB;AACtC,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,wBAAP;AACD;;AAPsD;;AAAzDjC;AAUA;;;;;;;AAMA,MAAa4D,yBAAb,SAA+Cd,aAA/C,CAA4D;AAC1Df,cAAYC,OAAZ,EAA4B;AAC1B,UAAMA,OAAO,IAAI,qBAAjB;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,2BAAP;AACD;;AAPyD;;AAA5DjC;AAUA;;;;;;;;AAOA,MAAa6D,wBAAb,SAA8Cf,aAA9C,CAA2D;AACzDf,gBAA0C;AAAA,QAA9BC,OAA8B,uEAApB,oBAAoB;AACxC,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,0BAAP;AACD;;AAPwD;;AAA3DjC;AAUA;;AACA,MAAM8D,gBAAgB,GAAG/D,MAAM,CAAC,iBAAD,CAA/B;;AACA,SAAgBgE,6BAAhB,CAA8CC,GAA9C,EAAoE;AAClE,SAAOA,GAAG,CAACF,gBAAD,CAAH,KAA0B,IAAjC;AACD;;AAFD9D;AAUA;;;;;;AAKA,MAAaiE,iBAAb,SAAuCpC,UAAvC,CAAiD;AAI/CE,cAAYC,OAAZ,EAAqCkC,OAArC,EAAuE;AACrE,UAAMlC,OAAN;;AAEA,QAAIkC,OAAO,IAAI,OAAOA,OAAO,CAACC,eAAf,KAAmC,SAAlD,EAA6D;AAC3D,WAAKL,gBAAL,IAAyBI,OAAO,CAACC,eAAjC;AACD;AACF;;AAEO,MAAJlC,IAAI;AACN,WAAO,mBAAP;AACD;;AAd8C;;AAAjDjC;AAiBA;;;;;;;;;AAQA,MAAaoE,wBAAb,SAA8CH,iBAA9C,CAA+D;AAC7DlC,cAAYC,OAAZ,EAA6BkC,OAA7B,EAA+D;AAC7D,UAAMlC,OAAN,EAAekC,OAAf;AACD;;AAEO,MAAJjC,IAAI;AACN,WAAO,0BAAP;AACD;;AAP4D;;AAA/DjC;AAUA;;;;;;AAKA,MAAaqE,eAAb,SAAqCxB,gBAArC,CAAqD;AACnDd,cAAYC,OAAZ,EAA2B;AACzB,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,iBAAP;AACD;;AAPkD;;AAArDjC;AAUA;;;;;;;;;AAQA,MAAasE,yBAAb,SAA+CxB,aAA/C,CAA4D;AAC1Df,cAAYC,OAAZ,EAA2B;AACzB,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,2BAAP;AACD;;AAPyD;;AAA5DjC;AAUA;;;;;;;;;AAQA,MAAauE,uBAAb,SAA6CzB,aAA7C,CAA0D;AACxDf,cAAYC,OAAZ,EAA2B;AACzB,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,yBAAP;AACD;;AAPuD;;AAA1DjC;AAUA;;;;;;;;;AAQA,MAAawE,4BAAb,SAAkD1B,aAAlD,CAA+D;AAC7Df,cAAYC,OAAZ,EAA2B;AACzB,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,8BAAP;AACD;;AAP4D;;AAA/DjC;AAUA;;;;;;;AAMA,MAAayE,2BAAb,SAAiD3B,aAAjD,CAA8D;AAC5Df,cAAYC,OAAZ,EAA2B;AACzB,UAAMA,OAAN;AACD;;AAEO,MAAJC,IAAI;AACN,WAAO,6BAAP;AACD;;AAP2D;;AAA9DjC;AASA;;;;;;AAKA,MAAa0E,gBAAb,SAAsC7C,UAAtC,CAAgD;AAI9CE,cAAYC,OAAZ,EAA6B2C,MAA7B,EAAwD;;;AACtD,QAAIA,MAAM,IAAIA,MAAM,CAACC,KAArB,EAA4B;AAC1B,YAAMD,MAAM,CAACC,KAAP,CAAa5C,OAAb,IAAwB2C,MAAM,CAACC,KAArC;AACD,KAFD,MAEO;AACL,YAAM5C,OAAN;AACD;;AAED,QAAI2C,MAAJ,EAAY;AACV,WAAKA,MAAL,GAAcA,MAAd;AACD;;AAED,SAAKE,IAAL,GAAY,YAAM,CAACD,KAAP,MAAY,IAAZ,IAAYE,aAAZ,GAAY,MAAZ,GAAYA,GAAED,IAA1B;AACD;;AAEO,MAAJ5C,IAAI;AACN,WAAO,kBAAP;AACD;;AApB6C;;AAAhDjC;AAuBA;;;;;;AAKA,MAAa+E,yBAAb,SAA+CL,gBAA/C,CAA+D;AAC7D3C,cAAYC,OAAZ,EAA6B2C,MAA7B,EAAwD;AACtD,UAAM3C,OAAN,EAAe2C,MAAf;AACD;;AAEO,MAAJ1C,IAAI;AACN,WAAO,2BAAP;AACD;;AAP4D;;AAA/DjC;;AAUA,SAASgF,4BAAT,CAAsCC,KAAtC,EAAgD;AAC9C,QAAMC,MAAM,GAAGjF,MAAM,CAACkF,MAAP,CAAc,EAAd,EAAkBF,KAAlB,CAAf;;AAEA,MAAIC,MAAM,CAACE,EAAP,KAAc,CAAlB,EAAqB;AACnBF,UAAM,CAACE,EAAP,GAAY,CAAZ;AACA,WAAOF,MAAM,CAAChD,MAAd;AACA,WAAOgD,MAAM,CAACL,IAAd;AACA,WAAOK,MAAM,CAACG,QAAd;AACD;;AAED,SAAOH,MAAP;AACD;AAED;;;;;;;AAKA,MAAaI,sBAAb,SAA4C3C,gBAA5C,CAA4D;AAK1DZ,cAAYC,OAAZ,EAAuCuD,MAAvC,EAAwD;AACtD,QAAIA,MAAM,IAAI9C,KAAK,CAAC+C,OAAN,CAAcD,MAAM,CAAC/C,WAArB,CAAd,EAAiD;AAC/CR,aAAO,CAACQ,WAAR,GAAsB+C,MAAM,CAAC/C,WAA7B;AACD;;AAED,UAAMR,OAAN;AACA,SAAKyD,OAAL,GAAezD,OAAO,CAACyD,OAAvB;;AAEA,QAAIF,MAAM,IAAI,IAAd,EAAoB;AAClB,WAAKA,MAAL,GAAcP,4BAA4B,CAACO,MAAD,CAA1C;AACD;AACF;;AAEO,MAAJtD,IAAI;AACN,WAAO,wBAAP;AACD;;AApByD;;AAA5DjC,wD,CAuBA;;AACA,MAAM0F,qBAAqB,GAAG,IAAI9D,GAAJ,CAAgB,CAC5C5B,4BAAoBG,eADwB,EAE5CH,4BAAoBI,YAFwB,EAG5CJ,4BAAoBK,cAHwB,EAI5CL,4BAAoBM,kBAJwB,EAK5CN,4BAAoBO,kBALwB,EAM5CP,4BAAoBS,eANwB,EAO5CT,4BAAoBU,kBAPwB,EAQ5CV,4BAAoBW,qBARwB,EAS5CX,4BAAoBY,+BATwB,EAU5CZ,4BAAoBa,uBAVwB,EAW5Cb,4BAAoBc,qBAXwB,CAAhB,CAA9B;AAcA,MAAM6E,2BAA2B,GAAG,IAAI/D,GAAJ,CAAgB,CAClD5B,4BAAoBW,qBAD8B,EAElDX,4BAAoBY,+BAF8B,EAGlDZ,4BAAoBU,kBAH8B,EAIlDV,4BAAoBa,uBAJ8B,EAKlDb,4BAAoBc,qBAL8B,EAMlDd,4BAAoBO,kBAN8B,EAOlDP,4BAAoBM,kBAP8B,EAQlDN,4BAAoBI,YAR8B,EASlDJ,4BAAoBG,eAT8B,EAUlDH,4BAAoBK,cAV8B,EAWlDL,4BAAoBS,eAX8B,EAYlDT,4BAAoBQ,iBAZ8B,CAAhB,CAApC;;AAeA,SAAgBoF,8BAAhB,CAA+ChB,KAA/C,EAAgE;AAC9D,SAAOA,KAAK,CAACzC,aAAN,CAAoB,qBAApB,CAAP;AACD;;AAFDnC;;AAIA,SAAgB6F,qBAAhB,CAAsCjB,KAAtC,EAAuD;;;AACrD,MAAIA,KAAK,YAAYU,sBAArB,EAA6C;AAC3C,WAAOK,2BAA2B,CAACtD,GAA5B,CAAgC,uBAAK,CAACkD,MAAN,MAAY,IAAZ,IAAYT,aAAZ,GAAY,MAAZ,GAAYA,GAAED,IAAd,MAAkB,IAAlB,IAAkBiB,aAAlB,GAAkBA,EAAlB,GAAsBlB,KAAK,CAACC,IAA5B,MAAgC,IAAhC,IAAgCkB,aAAhC,GAAgCA,EAAhC,GAAoC,CAApE,CAAP;AACD;;AACD,SAAO,OAAOnB,KAAK,CAACC,IAAb,KAAsB,QAAtB,IAAkCc,2BAA2B,CAACtD,GAA5B,CAAgCuC,KAAK,CAACC,IAAtC,CAAzC;AACD;;AALD7E;AAOA;;AACA,SAAgBgG,gBAAhB,CAAiCpB,KAAjC,EAAkD;AAChD,SACE;AACC,WAAOA,KAAK,CAACC,IAAb,KAAsB,QAAtB,IAAkCa,qBAAqB,CAACrD,GAAtB,CAA0BuC,KAAK,CAACC,IAAhC,CAAnC,IACAD,KAAK,YAAYX,iBADjB,IAEA,CAAC,CAACW,KAAK,CAAC5C,OAAN,CAAciE,KAAd,CAAoB,IAAIC,MAAJ,CAAWlG,iDAAX,CAApB,CAFF,IAGA,CAAC,CAAC4E,KAAK,CAAC5C,OAAN,CAAciE,KAAd,CAAoB,IAAIC,MAAJ,CAAWlG,wCAAX,CAApB;AALJ;AAOD;;AARDA;AAUA,MAAMmG,qBAAqB,GAAG,IAAIvE,GAAJ,CAAgB,CAC5C5B,4BAAoBM,kBADwB,EAE5CN,4BAAoBO,kBAFwB,EAG5CP,4BAAoBW,qBAHwB,EAI5CX,4BAAoBY,+BAJwB,EAK5CZ,4BAAoBc,qBALwB,CAAhB,CAA9B;AAQA,MAAMsF,qBAAqB,GAAG,IAAIxE,GAAJ,CAAgB,CAC5C5B,4BAAoBU,kBADwB,EAE5CV,4BAAoBa,uBAFwB,EAG5Cb,4BAAoBqB,gBAHwB,CAAhB,CAA9B;AAMA,MAAMgF,mCAAmC,GAAG,IAAIzE,GAAJ,CAAgB,CAC1D5B,4BAAoBW,qBADsC,EAE1DX,4BAAoBM,kBAFsC,CAAhB,CAA5C;;AAKA,SAASgG,iBAAT,CAA2BtC,GAA3B,EAA0C;AACxC,MAAI,OAAOA,GAAG,CAACa,IAAX,KAAoB,QAAxB,EAAkC;AAChC;AACA,WAAOsB,qBAAqB,CAAC9D,GAAtB,CAA0B2B,GAAG,CAACa,IAA9B,CAAP;AACD;;AAED,SACE,IAAIqB,MAAJ,CAAWlG,qDAAX,EAA0DuG,IAA1D,CAA+DvC,GAAG,CAAChC,OAAnE,KACA,IAAIkE,MAAJ,CAAWlG,wCAAX,EAA6CuG,IAA7C,CAAkDvC,GAAG,CAAChC,OAAtD,CAFF;AAID;;AAED,SAASwE,yBAAT,CAAmCxC,GAAnC,EAAkD;AAChD,MAAI,OAAOA,GAAG,CAACa,IAAX,KAAoB,QAAxB,EAAkC;AAChC;AACA,WAAOuB,qBAAqB,CAAC/D,GAAtB,CAA0B2B,GAAG,CAACa,IAA9B,CAAP;AACD;;AAED,MAAIyB,iBAAiB,CAACtC,GAAD,CAArB,EAA4B;AAC1B,WAAO,KAAP;AACD;;AAED,SAAO,IAAIkC,MAAJ,CAAWlG,iDAAX,EAAsDuG,IAAtD,CAA2DvC,GAAG,CAAChC,OAA/D,CAAP;AACD;;AAED,SAAgByE,uBAAhB,CAAwCzC,GAAxC,EAAuD;AACrD,SAAO,CAAC,EAAE,OAAOA,GAAG,CAACa,IAAX,KAAoB,QAApB,IAAgCwB,mCAAmC,CAAChE,GAApC,CAAwC2B,GAAG,CAACa,IAA5C,CAAlC,CAAR;AACD;;AAFD7E;AAIA;;;;;;;;AAOA,SAAgB0G,wBAAhB,CAAyC9B,KAAzC,EAA0D;AACxD;AACA;AACA,MAAIA,KAAK,YAAYP,eAAjB,IAAoCO,KAAK,IAAI,IAAjD,EAAuD;AACrD,WAAO,IAAP;AACD;;AAED,SAAO0B,iBAAiB,CAAC1B,KAAD,CAAjB,IAA4B4B,yBAAyB,CAAC5B,KAAD,CAA5D;AACD;;AARD5E;;AAUA,SAAgB2G,qBAAhB,CAAsC3C,GAAtC,EAAqD;AACnD,SAAO,CAAC,EAAEA,GAAG,YAAYC,iBAAf,IAAoCD,GAAG,CAAChC,OAAJ,CAAYiE,KAAZ,CAAkB,WAAlB,CAAtC,CAAR;AACD;;AAFDjG,sD,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAgB4G,gBAAhB,CAAiChC,KAAjC,EAAqDiC,WAArD,EAAyE;AACvE,MAAIjC,KAAK,YAAYX,iBAArB,EAAwC;AACtC,WAAO,IAAP;AACD;;AAED,MAAI4C,WAAW,IAAI,IAAf,IAAuBA,WAAW,IAAI,CAA1C,EAA6C;AAC3C;AACA,QAAIjC,KAAK,IAAIA,KAAK,YAAY/C,UAA1B,IAAwC+C,KAAK,CAACC,IAAN,KAAe,EAA3D,EAA+D;AAC7D,aAAO,IAAP;AACD;;AACD,WAAOD,KAAK,YAAY/C,UAAjB,IAA+B+C,KAAK,CAACzC,aAAN,CAAoB,4BAApB,CAAtC;AACD;;AAED,MAAIyC,KAAK,IAAI,OAAOA,KAAK,CAACC,IAAb,KAAsB,QAAnC,EAA6C;AAC3C,WAAO7E,iCAAyBqC,GAAzB,CAA6BuC,KAAK,CAACC,IAAnC,CAAP;AACD;;AACD,SAAO,KAAP;AACD;;AAjBD7E","names":["kErrorLabels","Symbol","exports","Object","freeze","HostUnreachable","HostNotFound","NetworkTimeout","ShutdownInProgress","PrimarySteppedDown","ExceededTimeLimit","SocketException","NotWritablePrimary","InterruptedAtShutdown","InterruptedDueToReplStateChange","NotPrimaryNoSecondaryOk","NotPrimaryOrSecondary","StaleShardVersion","StaleEpoch","StaleConfig","RetryChangeStream","FailedToSatisfyReadPreference","CursorNotFound","LegacyNotPrimary","WriteConcernFailed","NamespaceNotFound","IllegalOperation","MaxTimeMSExpired","UnknownReplWriteConcern","UnsatisfiableWriteConcern","Set","MongoError","Error","constructor","message","name","errmsg","hasErrorLabel","label","has","addErrorLabel","add","errorLabels","Array","from","MongoServerError","$err","MongoDriverError","MongoAPIError","MongoRuntimeError","MongoBatchReExecutionError","MongoDecompressionError","MongoNotConnectedError","MongoTransactionError","MongoExpiredSessionError","MongoKerberosError","MongoChangeStreamError","MongoTailableCursorError","MongoGridFSStreamError","MongoGridFSChunkError","MongoCursorInUseError","MongoServerClosedError","MongoCursorExhaustedError","MongoTopologyClosedError","kBeforeHandshake","isNetworkErrorBeforeHandshake","err","MongoNetworkError","options","beforeHandshake","MongoNetworkTimeoutError","MongoParseError","MongoInvalidArgumentError","MongoCompatibilityError","MongoMissingCredentialsError","MongoMissingDependencyError","MongoSystemError","reason","error","code","_a","MongoServerSelectionError","makeWriteConcernResultObject","input","output","assign","ok","codeName","MongoWriteConcernError","result","isArray","errInfo","RETRYABLE_ERROR_CODES","RETRYABLE_WRITE_ERROR_CODES","isRetryableEndTransactionError","isRetryableWriteError","_b","_c","isRetryableError","match","RegExp","SDAM_RECOVERING_CODES","SDAM_NOTPRIMARY_CODES","SDAM_NODE_SHUTTING_DOWN_ERROR_CODES","isRecoveringError","test","isNotWritablePrimaryError","isNodeShuttingDownError","isSDAMUnrecoverableError","isNetworkTimeoutError","isResumableError","wireVersion"],"sources":["/Users/santiago/node_modules/mongodb/src/error.ts"],"sourcesContent":["import type { Document } from './bson';\nimport type { TopologyVersion } from './sdam/server_description';\nimport type { TopologyDescription } from './sdam/topology_description';\n\n/** @public */\nexport type AnyError = MongoError | Error;\n\n/** @internal */\nconst kErrorLabels = Symbol('errorLabels');\n\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a writable primary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexport const LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = 'not master';\n\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a primary or secondary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexport const LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = 'not master or secondary';\n\n/**\n * @internal\n * The error message from the server that indicates the node is recovering\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexport const NODE_IS_RECOVERING_ERROR_MESSAGE = 'node is recovering';\n\n/** @internal MongoDB Error Codes */\nexport const MONGODB_ERROR_CODES = Object.freeze({\n  HostUnreachable: 6,\n  HostNotFound: 7,\n  NetworkTimeout: 89,\n  ShutdownInProgress: 91,\n  PrimarySteppedDown: 189,\n  ExceededTimeLimit: 262,\n  SocketException: 9001,\n  NotWritablePrimary: 10107,\n  InterruptedAtShutdown: 11600,\n  InterruptedDueToReplStateChange: 11602,\n  NotPrimaryNoSecondaryOk: 13435,\n  NotPrimaryOrSecondary: 13436,\n  StaleShardVersion: 63,\n  StaleEpoch: 150,\n  StaleConfig: 13388,\n  RetryChangeStream: 234,\n  FailedToSatisfyReadPreference: 133,\n  CursorNotFound: 43,\n  LegacyNotPrimary: 10058,\n  WriteConcernFailed: 64,\n  NamespaceNotFound: 26,\n  IllegalOperation: 20,\n  MaxTimeMSExpired: 50,\n  UnknownReplWriteConcern: 79,\n  UnsatisfiableWriteConcern: 100\n} as const);\n\n// From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\nexport const GET_MORE_RESUMABLE_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.HostUnreachable,\n  MONGODB_ERROR_CODES.HostNotFound,\n  MONGODB_ERROR_CODES.NetworkTimeout,\n  MONGODB_ERROR_CODES.ShutdownInProgress,\n  MONGODB_ERROR_CODES.PrimarySteppedDown,\n  MONGODB_ERROR_CODES.ExceededTimeLimit,\n  MONGODB_ERROR_CODES.SocketException,\n  MONGODB_ERROR_CODES.NotWritablePrimary,\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n  MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n  MONGODB_ERROR_CODES.NotPrimaryOrSecondary,\n  MONGODB_ERROR_CODES.StaleShardVersion,\n  MONGODB_ERROR_CODES.StaleEpoch,\n  MONGODB_ERROR_CODES.StaleConfig,\n  MONGODB_ERROR_CODES.RetryChangeStream,\n  MONGODB_ERROR_CODES.FailedToSatisfyReadPreference,\n  MONGODB_ERROR_CODES.CursorNotFound\n]);\n\n/** @public */\nexport interface ErrorDescription extends Document {\n  message?: string;\n  errmsg?: string;\n  $err?: string;\n  errorLabels?: string[];\n  errInfo?: Document;\n}\n\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error, it uses the constructor with a string argument\n */\nexport class MongoError extends Error {\n  /** @internal */\n  [kErrorLabels]: Set<string>;\n  /**\n   * This is a number in MongoServerError and a string in MongoDriverError\n   * @privateRemarks\n   * Define the type override on the subclasses when we can use the override keyword\n   */\n  code?: number | string;\n  topologyVersion?: TopologyVersion;\n\n  constructor(message: string | Error) {\n    if (message instanceof Error) {\n      super(message.message);\n    } else {\n      super(message);\n    }\n  }\n\n  get name(): string {\n    return 'MongoError';\n  }\n\n  /** Legacy name for server error responses */\n  get errmsg(): string {\n    return this.message;\n  }\n\n  /**\n   * Checks the error to see if it has an error label\n   *\n   * @param label - The error label to check for\n   * @returns returns true if the error has the provided error label\n   */\n  hasErrorLabel(label: string): boolean {\n    if (this[kErrorLabels] == null) {\n      return false;\n    }\n\n    return this[kErrorLabels].has(label);\n  }\n\n  addErrorLabel(label: string): void {\n    if (this[kErrorLabels] == null) {\n      this[kErrorLabels] = new Set();\n    }\n\n    this[kErrorLabels].add(label);\n  }\n\n  get errorLabels(): string[] {\n    return this[kErrorLabels] ? Array.from(this[kErrorLabels]) : [];\n  }\n}\n\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\nexport class MongoServerError extends MongoError {\n  codeName?: string;\n  writeConcernError?: Document;\n  errInfo?: Document;\n  ok?: number;\n  [key: string]: any;\n\n  constructor(message: ErrorDescription) {\n    super(message.message || message.errmsg || message.$err || 'n/a');\n    if (message.errorLabels) {\n      this[kErrorLabels] = new Set(message.errorLabels);\n    }\n\n    for (const name in message) {\n      if (name !== 'errorLabels' && name !== 'errmsg' && name !== 'message')\n        this[name] = message[name];\n    }\n  }\n\n  get name(): string {\n    return 'MongoServerError';\n  }\n}\n\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\nexport class MongoDriverError extends MongoError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoDriverError';\n  }\n}\n\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\n\nexport class MongoAPIError extends MongoDriverError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoAPIError';\n  }\n}\n\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\nexport class MongoRuntimeError extends MongoDriverError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoRuntimeError';\n  }\n}\n\n/**\n * An error generated when a batch command is reexecuted after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\nexport class MongoBatchReExecutionError extends MongoAPIError {\n  constructor(message = 'This batch has already been executed, create new batch to execute') {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoBatchReExecutionError';\n  }\n}\n\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\nexport class MongoDecompressionError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoDecompressionError';\n  }\n}\n\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\nexport class MongoNotConnectedError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoNotConnectedError';\n  }\n}\n\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\nexport class MongoTransactionError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoTransactionError';\n  }\n}\n\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\nexport class MongoExpiredSessionError extends MongoAPIError {\n  constructor(message = 'Cannot use a session that has ended') {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoExpiredSessionError';\n  }\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\nexport class MongoKerberosError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoKerberosError';\n  }\n}\n\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nexport class MongoChangeStreamError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoChangeStreamError';\n  }\n}\n\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\nexport class MongoTailableCursorError extends MongoAPIError {\n  constructor(message = 'Tailable cursor does not support this operation') {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoTailableCursorError';\n  }\n}\n\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nexport class MongoGridFSStreamError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoGridFSStreamError';\n  }\n}\n\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\nexport class MongoGridFSChunkError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoGridFSChunkError';\n  }\n}\n\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\nexport class MongoCursorInUseError extends MongoAPIError {\n  constructor(message = 'Cursor is already initialized') {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoCursorInUseError';\n  }\n}\n\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\nexport class MongoServerClosedError extends MongoAPIError {\n  constructor(message = 'Server is closed') {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoServerClosedError';\n  }\n}\n\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\nexport class MongoCursorExhaustedError extends MongoAPIError {\n  constructor(message?: string) {\n    super(message || 'Cursor is exhausted');\n  }\n\n  get name(): string {\n    return 'MongoCursorExhaustedError';\n  }\n}\n\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\nexport class MongoTopologyClosedError extends MongoAPIError {\n  constructor(message = 'Topology is closed') {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoTopologyClosedError';\n  }\n}\n\n/** @internal */\nconst kBeforeHandshake = Symbol('beforeHandshake');\nexport function isNetworkErrorBeforeHandshake(err: MongoNetworkError): boolean {\n  return err[kBeforeHandshake] === true;\n}\n\n/** @public */\nexport interface MongoNetworkErrorOptions {\n  /** Indicates the timeout happened before a connection handshake completed */\n  beforeHandshake: boolean;\n}\n\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\nexport class MongoNetworkError extends MongoError {\n  /** @internal */\n  [kBeforeHandshake]?: boolean;\n\n  constructor(message: string | Error, options?: MongoNetworkErrorOptions) {\n    super(message);\n\n    if (options && typeof options.beforeHandshake === 'boolean') {\n      this[kBeforeHandshake] = options.beforeHandshake;\n    }\n  }\n\n  get name(): string {\n    return 'MongoNetworkError';\n  }\n}\n\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error with an instanceof check\n */\nexport class MongoNetworkTimeoutError extends MongoNetworkError {\n  constructor(message: string, options?: MongoNetworkErrorOptions) {\n    super(message, options);\n  }\n\n  get name(): string {\n    return 'MongoNetworkTimeoutError';\n  }\n}\n\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\nexport class MongoParseError extends MongoDriverError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoParseError';\n  }\n}\n\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\nexport class MongoInvalidArgumentError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoInvalidArgumentError';\n  }\n}\n\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\nexport class MongoCompatibilityError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoCompatibilityError';\n  }\n}\n\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\nexport class MongoMissingCredentialsError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoMissingCredentialsError';\n  }\n}\n\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\nexport class MongoMissingDependencyError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoMissingDependencyError';\n  }\n}\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\nexport class MongoSystemError extends MongoError {\n  /** An optional reason context, such as an error saved during flow of monitoring and selecting servers */\n  reason?: TopologyDescription;\n\n  constructor(message: string, reason: TopologyDescription) {\n    if (reason && reason.error) {\n      super(reason.error.message || reason.error);\n    } else {\n      super(message);\n    }\n\n    if (reason) {\n      this.reason = reason;\n    }\n\n    this.code = reason.error?.code;\n  }\n\n  get name(): string {\n    return 'MongoSystemError';\n  }\n}\n\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\nexport class MongoServerSelectionError extends MongoSystemError {\n  constructor(message: string, reason: TopologyDescription) {\n    super(message, reason);\n  }\n\n  get name(): string {\n    return 'MongoServerSelectionError';\n  }\n}\n\nfunction makeWriteConcernResultObject(input: any) {\n  const output = Object.assign({}, input);\n\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n\n  return output;\n}\n\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\nexport class MongoWriteConcernError extends MongoServerError {\n  /** The result document (provided if ok: 1) */\n  result?: Document;\n  errInfo?: Document;\n\n  constructor(message: ErrorDescription, result?: Document) {\n    if (result && Array.isArray(result.errorLabels)) {\n      message.errorLabels = result.errorLabels;\n    }\n\n    super(message);\n    this.errInfo = message.errInfo;\n\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n\n  get name(): string {\n    return 'MongoWriteConcernError';\n  }\n}\n\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_ERROR_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.HostUnreachable,\n  MONGODB_ERROR_CODES.HostNotFound,\n  MONGODB_ERROR_CODES.NetworkTimeout,\n  MONGODB_ERROR_CODES.ShutdownInProgress,\n  MONGODB_ERROR_CODES.PrimarySteppedDown,\n  MONGODB_ERROR_CODES.SocketException,\n  MONGODB_ERROR_CODES.NotWritablePrimary,\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n  MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n  MONGODB_ERROR_CODES.NotPrimaryOrSecondary\n]);\n\nconst RETRYABLE_WRITE_ERROR_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n  MONGODB_ERROR_CODES.NotWritablePrimary,\n  MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n  MONGODB_ERROR_CODES.NotPrimaryOrSecondary,\n  MONGODB_ERROR_CODES.PrimarySteppedDown,\n  MONGODB_ERROR_CODES.ShutdownInProgress,\n  MONGODB_ERROR_CODES.HostNotFound,\n  MONGODB_ERROR_CODES.HostUnreachable,\n  MONGODB_ERROR_CODES.NetworkTimeout,\n  MONGODB_ERROR_CODES.SocketException,\n  MONGODB_ERROR_CODES.ExceededTimeLimit\n]);\n\nexport function isRetryableEndTransactionError(error: MongoError): boolean {\n  return error.hasErrorLabel('RetryableWriteError');\n}\n\nexport function isRetryableWriteError(error: MongoError): boolean {\n  if (error instanceof MongoWriteConcernError) {\n    return RETRYABLE_WRITE_ERROR_CODES.has(error.result?.code ?? error.code ?? 0);\n  }\n  return typeof error.code === 'number' && RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n}\n\n/** Determines whether an error is something the driver should attempt to retry */\nexport function isRetryableError(error: MongoError): boolean {\n  return (\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    (typeof error.code === 'number' && RETRYABLE_ERROR_CODES.has(error.code!)) ||\n    error instanceof MongoNetworkError ||\n    !!error.message.match(new RegExp(LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE)) ||\n    !!error.message.match(new RegExp(NODE_IS_RECOVERING_ERROR_MESSAGE))\n  );\n}\n\nconst SDAM_RECOVERING_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.ShutdownInProgress,\n  MONGODB_ERROR_CODES.PrimarySteppedDown,\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n  MONGODB_ERROR_CODES.NotPrimaryOrSecondary\n]);\n\nconst SDAM_NOTPRIMARY_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.NotWritablePrimary,\n  MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n  MONGODB_ERROR_CODES.LegacyNotPrimary\n]);\n\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.ShutdownInProgress\n]);\n\nfunction isRecoveringError(err: MongoError) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_RECOVERING_CODES.has(err.code);\n  }\n\n  return (\n    new RegExp(LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE).test(err.message) ||\n    new RegExp(NODE_IS_RECOVERING_ERROR_MESSAGE).test(err.message)\n  );\n}\n\nfunction isNotWritablePrimaryError(err: MongoError) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_NOTPRIMARY_CODES.has(err.code);\n  }\n\n  if (isRecoveringError(err)) {\n    return false;\n  }\n\n  return new RegExp(LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE).test(err.message);\n}\n\nexport function isNodeShuttingDownError(err: MongoError): boolean {\n  return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\n\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */\nexport function isSDAMUnrecoverableError(error: MongoError): boolean {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n\n  return isRecoveringError(error) || isNotWritablePrimaryError(error);\n}\n\nexport function isNetworkTimeoutError(err: MongoError): err is MongoNetworkError {\n  return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\n\n// From spec@https://github.com/mongodb/specifications/blob/7a2e93d85935ee4b1046a8d2ad3514c657dc74fa/source/change-streams/change-streams.rst#resumable-error:\n//\n// An error is considered resumable if it meets any of the following criteria:\n// - any error encountered which is not a server error (e.g. a timeout error or network error)\n// - any server error response from a getMore command excluding those containing the error label\n//   NonRetryableChangeStreamError and those containing the following error codes:\n//   - Interrupted: 11601\n//   - CappedPositionLost: 136\n//   - CursorKilled: 237\n//\n// An error on an aggregate command is not a resumable error. Only errors on a getMore command may be considered resumable errors.\n\nexport function isResumableError(error?: MongoError, wireVersion?: number): boolean {\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  if (wireVersion != null && wireVersion >= 9) {\n    // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n    if (error && error instanceof MongoError && error.code === 43) {\n      return true;\n    }\n    return error instanceof MongoError && error.hasErrorLabel('ResumableChangeStreamError');\n  }\n\n  if (error && typeof error.code === 'number') {\n    return GET_MORE_RESUMABLE_CODES.has(error.code);\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"script"}