{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddUserOperation = void 0;\n\nconst crypto = require(\"crypto\");\n\nconst error_1 = require(\"../error\");\n\nconst utils_1 = require(\"../utils\");\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass AddUserOperation extends command_1.CommandOperation {\n  constructor(db, username, password, options) {\n    super(db, options);\n    this.db = db;\n    this.username = username;\n    this.password = password;\n    this.options = options !== null && options !== void 0 ? options : {};\n  }\n\n  execute(server, session, callback) {\n    const db = this.db;\n    const username = this.username;\n    const password = this.password;\n    const options = this.options; // Error out if digestPassword set\n\n    if (options.digestPassword != null) {\n      return callback(new error_1.MongoInvalidArgumentError('Option \"digestPassword\" not supported via addUser, use db.command(...) instead'));\n    }\n\n    let roles;\n\n    if (!options.roles || Array.isArray(options.roles) && options.roles.length === 0) {\n      (0, utils_1.emitWarningOnce)('Creating a user without roles is deprecated. Defaults to \"root\" if db is \"admin\" or \"dbOwner\" otherwise');\n\n      if (db.databaseName.toLowerCase() === 'admin') {\n        roles = ['root'];\n      } else {\n        roles = ['dbOwner'];\n      }\n    } else {\n      roles = Array.isArray(options.roles) ? options.roles : [options.roles];\n    }\n\n    const digestPassword = (0, utils_1.getTopology)(db).lastHello().maxWireVersion >= 7;\n    let userPassword = password;\n\n    if (!digestPassword) {\n      // Use node md5 generator\n      const md5 = crypto.createHash('md5'); // Generate keys used for authentication\n\n      md5.update(`${username}:mongo:${password}`);\n      userPassword = md5.digest('hex');\n    } // Build the command to execute\n\n\n    const command = {\n      createUser: username,\n      customData: options.customData || {},\n      roles: roles,\n      digestPassword\n    }; // No password\n\n    if (typeof password === 'string') {\n      command.pwd = userPassword;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n\n}\n\nexports.AddUserOperation = AddUserOperation;\n(0, operation_1.defineAspects)(AddUserOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"mappings":";;;;;;;AAAA;;AAIA;;AAGA;;AACA;;AACA;AAuBA;;;AACA,MAAaA,gBAAb,SAAsCC,0BAAtC,CAAgE;AAM9DC,cAAYC,EAAZ,EAAoBC,QAApB,EAAsCC,QAAtC,EAAoEC,OAApE,EAA4F;AAC1F,UAAMH,EAAN,EAAUG,OAAV;AAEA,SAAKH,EAAL,GAAUA,EAAV;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,OAAL,GAAeA,OAAO,SAAP,WAAO,WAAP,aAAW,EAA1B;AACD;;AAEDC,SAAO,CAACC,MAAD,EAAiBC,OAAjB,EAAyCC,QAAzC,EAAqE;AAC1E,UAAMP,EAAE,GAAG,KAAKA,EAAhB;AACA,UAAMC,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMC,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMC,OAAO,GAAG,KAAKA,OAArB,CAJ0E,CAM1E;;AACA,QAAIA,OAAO,CAACK,cAAR,IAA0B,IAA9B,EAAoC;AAClC,aAAOD,QAAQ,CACb,IAAIE,iCAAJ,CACE,gFADF,CADa,CAAf;AAKD;;AAED,QAAIC,KAAJ;;AACA,QAAI,CAACP,OAAO,CAACO,KAAT,IAAmBC,KAAK,CAACC,OAAN,CAAcT,OAAO,CAACO,KAAtB,KAAgCP,OAAO,CAACO,KAAR,CAAcG,MAAd,KAAyB,CAAhF,EAAoF;AAClF,mCACE,yGADF;;AAGA,UAAIb,EAAE,CAACc,YAAH,CAAgBC,WAAhB,OAAkC,OAAtC,EAA+C;AAC7CL,aAAK,GAAG,CAAC,MAAD,CAAR;AACD,OAFD,MAEO;AACLA,aAAK,GAAG,CAAC,SAAD,CAAR;AACD;AACF,KATD,MASO;AACLA,WAAK,GAAGC,KAAK,CAACC,OAAN,CAAcT,OAAO,CAACO,KAAtB,IAA+BP,OAAO,CAACO,KAAvC,GAA+C,CAACP,OAAO,CAACO,KAAT,CAAvD;AACD;;AAED,UAAMF,cAAc,GAAG,yBAAYR,EAAZ,EAAgBgB,SAAhB,GAA4BC,cAA5B,IAA8C,CAArE;AAEA,QAAIC,YAAY,GAAGhB,QAAnB;;AAEA,QAAI,CAACM,cAAL,EAAqB;AACnB;AACA,YAAMW,GAAG,GAAGC,MAAM,CAACC,UAAP,CAAkB,KAAlB,CAAZ,CAFmB,CAGnB;;AACAF,SAAG,CAACG,MAAJ,CAAW,GAAGrB,QAAQ,UAAUC,QAAQ,EAAxC;AACAgB,kBAAY,GAAGC,GAAG,CAACI,MAAJ,CAAW,KAAX,CAAf;AACD,KAvCyE,CAyC1E;;;AACA,UAAMC,OAAO,GAAa;AACxBC,gBAAU,EAAExB,QADY;AAExByB,gBAAU,EAAEvB,OAAO,CAACuB,UAAR,IAAsB,EAFV;AAGxBhB,WAAK,EAAEA,KAHiB;AAIxBF;AAJwB,KAA1B,CA1C0E,CAiD1E;;AACA,QAAI,OAAON,QAAP,KAAoB,QAAxB,EAAkC;AAChCsB,aAAO,CAACG,GAAR,GAAcT,YAAd;AACD;;AAED,UAAMU,cAAN,CAAqBvB,MAArB,EAA6BC,OAA7B,EAAsCkB,OAAtC,EAA+CjB,QAA/C;AACD;;AAtE6D;;AAAhEsB;AAyEA,+BAAchC,gBAAd,EAAgC,CAACiC,mBAAOC,eAAR,CAAhC","names":["AddUserOperation","command_1","constructor","db","username","password","options","execute","server","session","callback","digestPassword","error_1","roles","Array","isArray","length","databaseName","toLowerCase","lastHello","maxWireVersion","userPassword","md5","crypto","createHash","update","digest","command","createUser","customData","pwd","executeCommand","exports","operation_1","WRITE_OPERATION"],"sources":["/Users/santiago/Documents/tulipan1637/iot-sensor/node_modules/mongodb/src/operations/add_user.ts"],"sourcesContent":["import * as crypto from 'crypto';\n\nimport type { Document } from '../bson';\nimport type { Db } from '../db';\nimport { MongoInvalidArgumentError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { Callback, emitWarningOnce, getTopology } from '../utils';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\n/** @public */\nexport interface RoleSpecification {\n  /**\n   * A role grants privileges to perform sets of actions on defined resources.\n   * A given role applies to the database on which it is defined and can grant access down to a collection level of granularity.\n   */\n  role: string;\n  /** The database this user's role should effect. */\n  db: string;\n}\n\n/** @public */\nexport interface AddUserOptions extends CommandOperationOptions {\n  /** @deprecated Please use db.command('createUser', ...) instead for this option */\n  digestPassword?: null;\n  /** Roles associated with the created user */\n  roles?: string | string[] | RoleSpecification | RoleSpecification[];\n  /** Custom data associated with the user (only Mongodb 2.6 or higher) */\n  customData?: Document;\n}\n\n/** @internal */\nexport class AddUserOperation extends CommandOperation<Document> {\n  options: AddUserOptions;\n  db: Db;\n  username: string;\n  password?: string;\n\n  constructor(db: Db, username: string, password: string | undefined, options?: AddUserOptions) {\n    super(db, options);\n\n    this.db = db;\n    this.username = username;\n    this.password = password;\n    this.options = options ?? {};\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<Document>): void {\n    const db = this.db;\n    const username = this.username;\n    const password = this.password;\n    const options = this.options;\n\n    // Error out if digestPassword set\n    if (options.digestPassword != null) {\n      return callback(\n        new MongoInvalidArgumentError(\n          'Option \"digestPassword\" not supported via addUser, use db.command(...) instead'\n        )\n      );\n    }\n\n    let roles;\n    if (!options.roles || (Array.isArray(options.roles) && options.roles.length === 0)) {\n      emitWarningOnce(\n        'Creating a user without roles is deprecated. Defaults to \"root\" if db is \"admin\" or \"dbOwner\" otherwise'\n      );\n      if (db.databaseName.toLowerCase() === 'admin') {\n        roles = ['root'];\n      } else {\n        roles = ['dbOwner'];\n      }\n    } else {\n      roles = Array.isArray(options.roles) ? options.roles : [options.roles];\n    }\n\n    const digestPassword = getTopology(db).lastHello().maxWireVersion >= 7;\n\n    let userPassword = password;\n\n    if (!digestPassword) {\n      // Use node md5 generator\n      const md5 = crypto.createHash('md5');\n      // Generate keys used for authentication\n      md5.update(`${username}:mongo:${password}`);\n      userPassword = md5.digest('hex');\n    }\n\n    // Build the command to execute\n    const command: Document = {\n      createUser: username,\n      customData: options.customData || {},\n      roles: roles,\n      digestPassword\n    };\n\n    // No password\n    if (typeof password === 'string') {\n      command.pwd = userPassword;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n}\n\ndefineAspects(AddUserOperation, [Aspect.WRITE_OPERATION]);\n"]},"metadata":{},"sourceType":"script"}