{"ast":null,"code":"// import React from 'react';\nconst faker = require(\"faker\");\n\nconst MongoClient = require(\"mongodb\").MongoClient;\n\nasync function seedDB() {\n  // Connection URL\n  const uri = \"mongodb://127.0.0.1:27017\";\n  const client = new MongoClient(uri, {\n    useNewUrlParser: true // useUnifiedTopology: true,\n\n  });\n\n  try {\n    await client.connect();\n    console.log(\"Connected correctly to server\");\n    const collection = client.db(\"iot\").collection(\"sensor\");\n    await collection.drop(); // make a bunch of time series data\n\n    let timeSeriesData = [];\n\n    for (let i = 0; i < 5000; i++) {\n      const firstName = faker.name.firstName();\n      const lastName = faker.name.lastName();\n      let newDay = {\n        timestamp_day: faker.date.past(),\n        cat: faker.random.word(),\n        owner: {\n          email: faker.internet.email(firstName, lastName),\n          firstName,\n          lastName\n        },\n        events: []\n      };\n\n      for (let j = 0; j < randomIntFromInterval(1, 6); j++) {\n        let newEvent = {\n          timestamp_event: faker.date.past(),\n          weight: randomIntFromInterval(14, 16)\n        };\n        newDay.events.push(newEvent);\n      }\n\n      timeSeriesData.push(newDay);\n    }\n\n    await collection.insertMany(timeSeriesData);\n    console.log(\"Database seeded! :)\");\n    client.close();\n  } catch (err) {\n    console.log(err.stack);\n  }\n}\n\nexport default seedDB;","map":{"version":3,"sources":["/Users/santiago/Documents/tulipan1637/iot-sensor/src/models/sensor.js"],"names":["faker","require","MongoClient","seedDB","uri","client","useNewUrlParser","connect","console","log","collection","db","drop","timeSeriesData","i","firstName","name","lastName","newDay","timestamp_day","date","past","cat","random","word","owner","email","internet","events","j","randomIntFromInterval","newEvent","timestamp_event","weight","push","insertMany","close","err","stack"],"mappings":"AAAA;AACA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,SAAD,CAAP,CAAmBC,WAAvC;;AAEA,eAAeC,MAAf,GAAwB;AACpB;AACA,QAAMC,GAAG,GAAG,2BAAZ;AAEA,QAAMC,MAAM,GAAG,IAAIH,WAAJ,CAAgBE,GAAhB,EAAqB;AAChCE,IAAAA,eAAe,EAAE,IADe,CAEhC;;AAFgC,GAArB,CAAf;;AAKA,MAAI;AACA,UAAMD,MAAM,CAACE,OAAP,EAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AAEA,UAAMC,UAAU,GAAGL,MAAM,CAACM,EAAP,CAAU,KAAV,EAAiBD,UAAjB,CAA4B,QAA5B,CAAnB;AAGA,UAAMA,UAAU,CAACE,IAAX,EAAN,CAPA,CASA;;AACA,QAAIC,cAAc,GAAG,EAArB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAApB,EAA0BA,CAAC,EAA3B,EAA+B;AAC3B,YAAMC,SAAS,GAAGf,KAAK,CAACgB,IAAN,CAAWD,SAAX,EAAlB;AACA,YAAME,QAAQ,GAAGjB,KAAK,CAACgB,IAAN,CAAWC,QAAX,EAAjB;AACA,UAAIC,MAAM,GAAG;AACTC,QAAAA,aAAa,EAAEnB,KAAK,CAACoB,IAAN,CAAWC,IAAX,EADN;AAETC,QAAAA,GAAG,EAAEtB,KAAK,CAACuB,MAAN,CAAaC,IAAb,EAFI;AAGTC,QAAAA,KAAK,EAAE;AACHC,UAAAA,KAAK,EAAE1B,KAAK,CAAC2B,QAAN,CAAeD,KAAf,CAAqBX,SAArB,EAAgCE,QAAhC,CADJ;AAEHF,UAAAA,SAFG;AAGHE,UAAAA;AAHG,SAHE;AAQTW,QAAAA,MAAM,EAAE;AARC,OAAb;;AAWA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,qBAAqB,CAAC,CAAD,EAAI,CAAJ,CAAzC,EAAiDD,CAAC,EAAlD,EAAsD;AAClD,YAAIE,QAAQ,GAAG;AACXC,UAAAA,eAAe,EAAEhC,KAAK,CAACoB,IAAN,CAAWC,IAAX,EADN;AAEXY,UAAAA,MAAM,EAAEH,qBAAqB,CAAC,EAAD,EAAI,EAAJ;AAFlB,SAAf;AAIAZ,QAAAA,MAAM,CAACU,MAAP,CAAcM,IAAd,CAAmBH,QAAnB;AACH;;AACDlB,MAAAA,cAAc,CAACqB,IAAf,CAAoBhB,MAApB;AACH;;AACD,UAAMR,UAAU,CAACyB,UAAX,CAAsBtB,cAAtB,CAAN;AAEAL,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAJ,IAAAA,MAAM,CAAC+B,KAAP;AACH,GAvCD,CAuCE,OAAOC,GAAP,EAAY;AACV7B,IAAAA,OAAO,CAACC,GAAR,CAAY4B,GAAG,CAACC,KAAhB;AACH;AACJ;;AAED,eAAenC,MAAf","sourcesContent":["// import React from 'react';\nconst faker = require(\"faker\");\nconst MongoClient = require(\"mongodb\").MongoClient;\n\nasync function seedDB() {\n    // Connection URL\n    const uri = \"mongodb://127.0.0.1:27017\";\n\n    const client = new MongoClient(uri, {\n        useNewUrlParser: true,\n        // useUnifiedTopology: true,\n    });\n\n    try {\n        await client.connect();\n        console.log(\"Connected correctly to server\");\n\n        const collection = client.db(\"iot\").collection(\"sensor\");\n\n  \n        await collection.drop();\n\n        // make a bunch of time series data\n        let timeSeriesData = [];\n\n        for (let i = 0; i < 5000; i++) {\n            const firstName = faker.name.firstName();\n            const lastName = faker.name.lastName();\n            let newDay = {\n                timestamp_day: faker.date.past(),\n                cat: faker.random.word(),\n                owner: {\n                    email: faker.internet.email(firstName, lastName),\n                    firstName,\n                    lastName,\n                },\n                events: [],\n            };\n\n            for (let j = 0; j < randomIntFromInterval(1, 6); j++) {\n                let newEvent = {\n                    timestamp_event: faker.date.past(),\n                    weight: randomIntFromInterval(14,16),\n                }\n                newDay.events.push(newEvent);\n            }\n            timeSeriesData.push(newDay);\n        }\n        await collection.insertMany(timeSeriesData);\n\n        console.log(\"Database seeded! :)\");\n        client.close();\n    } catch (err) {\n        console.log(err.stack);\n    }\n}\n\nexport default seedDB;"]},"metadata":{},"sourceType":"module"}