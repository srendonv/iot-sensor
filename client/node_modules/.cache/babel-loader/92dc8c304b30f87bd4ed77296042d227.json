{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertUninitialized = exports.AbstractCursor = exports.CURSOR_FLAGS = void 0;\n\nconst stream_1 = require(\"stream\");\n\nconst bson_1 = require(\"../bson\");\n\nconst error_1 = require(\"../error\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst execute_operation_1 = require(\"../operations/execute_operation\");\n\nconst get_more_1 = require(\"../operations/get_more\");\n\nconst read_concern_1 = require(\"../read_concern\");\n\nconst read_preference_1 = require(\"../read_preference\");\n\nconst sessions_1 = require(\"../sessions\");\n\nconst utils_1 = require(\"../utils\");\n/** @internal */\n\n\nconst kId = Symbol('id');\n/** @internal */\n\nconst kDocuments = Symbol('documents');\n/** @internal */\n\nconst kServer = Symbol('server');\n/** @internal */\n\nconst kNamespace = Symbol('namespace');\n/** @internal */\n\nconst kTopology = Symbol('topology');\n/** @internal */\n\nconst kSession = Symbol('session');\n/** @internal */\n\nconst kOptions = Symbol('options');\n/** @internal */\n\nconst kTransform = Symbol('transform');\n/** @internal */\n\nconst kInitialized = Symbol('initialized');\n/** @internal */\n\nconst kClosed = Symbol('closed');\n/** @internal */\n\nconst kKilled = Symbol('killed');\n/** @public */\n\nexports.CURSOR_FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\n\nclass AbstractCursor extends mongo_types_1.TypedEventEmitter {\n  /** @internal */\n  constructor(topology, namespace) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n    this[kTopology] = topology;\n    this[kNamespace] = namespace;\n    this[kDocuments] = []; // TODO: https://github.com/microsoft/TypeScript/issues/36230\n\n    this[kInitialized] = false;\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kOptions] = {\n      readPreference: options.readPreference && options.readPreference instanceof read_preference_1.ReadPreference ? options.readPreference : read_preference_1.ReadPreference.primary,\n      ...(0, bson_1.pluckBSONSerializeOptions)(options)\n    };\n    const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n\n    if (readConcern) {\n      this[kOptions].readConcern = readConcern;\n    }\n\n    if (typeof options.batchSize === 'number') {\n      this[kOptions].batchSize = options.batchSize;\n    }\n\n    if (options.comment != null) {\n      this[kOptions].comment = options.comment;\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      this[kOptions].maxTimeMS = options.maxTimeMS;\n    }\n\n    if (options.session instanceof sessions_1.ClientSession) {\n      this[kSession] = options.session;\n    }\n  }\n\n  get id() {\n    return this[kId];\n  }\n  /** @internal */\n\n\n  get topology() {\n    return this[kTopology];\n  }\n  /** @internal */\n\n\n  get server() {\n    return this[kServer];\n  }\n\n  get namespace() {\n    return this[kNamespace];\n  }\n\n  get readPreference() {\n    return this[kOptions].readPreference;\n  }\n\n  get readConcern() {\n    return this[kOptions].readConcern;\n  }\n  /** @internal */\n\n\n  get session() {\n    return this[kSession];\n  }\n\n  set session(clientSession) {\n    this[kSession] = clientSession;\n  }\n  /** @internal */\n\n\n  get cursorOptions() {\n    return this[kOptions];\n  }\n\n  get closed() {\n    return this[kClosed];\n  }\n\n  get killed() {\n    return this[kKilled];\n  }\n\n  get loadBalanced() {\n    return this[kTopology].loadBalanced;\n  }\n  /** Returns current buffered documents length */\n\n\n  bufferedCount() {\n    return this[kDocuments].length;\n  }\n  /** Returns current buffered documents */\n\n\n  readBufferedDocuments(number) {\n    return this[kDocuments].splice(0, number !== null && number !== void 0 ? number : this[kDocuments].length);\n  }\n\n  [Symbol.asyncIterator]() {\n    return {\n      next: () => this.next().then(value => value != null ? {\n        value,\n        done: false\n      } : {\n        value: undefined,\n        done: true\n      })\n    };\n  }\n\n  stream(options) {\n    if (options === null || options === void 0 ? void 0 : options.transform) {\n      const transform = options.transform;\n      const readable = makeCursorStream(this);\n      return readable.pipe(new stream_1.Transform({\n        objectMode: true,\n        highWaterMark: 1,\n\n        transform(chunk, _, callback) {\n          try {\n            const transformed = transform(chunk);\n            callback(undefined, transformed);\n          } catch (err) {\n            callback(err);\n          }\n        }\n\n      }));\n    }\n\n    return makeCursorStream(this);\n  }\n\n  hasNext(callback) {\n    return (0, utils_1.maybePromise)(callback, done => {\n      if (this[kId] === bson_1.Long.ZERO) {\n        return done(undefined, false);\n      }\n\n      if (this[kDocuments].length) {\n        return done(undefined, true);\n      }\n\n      next(this, true, (err, doc) => {\n        if (err) return done(err);\n\n        if (doc) {\n          this[kDocuments].unshift(doc);\n          done(undefined, true);\n          return;\n        }\n\n        done(undefined, false);\n      });\n    });\n  }\n\n  next(callback) {\n    return (0, utils_1.maybePromise)(callback, done => {\n      if (this[kId] === bson_1.Long.ZERO) {\n        return done(new error_1.MongoCursorExhaustedError());\n      }\n\n      next(this, true, done);\n    });\n  }\n\n  tryNext(callback) {\n    return (0, utils_1.maybePromise)(callback, done => {\n      if (this[kId] === bson_1.Long.ZERO) {\n        return done(new error_1.MongoCursorExhaustedError());\n      }\n\n      next(this, false, done);\n    });\n  }\n\n  forEach(iterator, callback) {\n    if (typeof iterator !== 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n    }\n\n    return (0, utils_1.maybePromise)(callback, done => {\n      const transform = this[kTransform];\n\n      const fetchDocs = () => {\n        next(this, true, (err, doc) => {\n          if (err || doc == null) return done(err);\n          let result; // NOTE: no need to transform because `next` will do this automatically\n\n          try {\n            result = iterator(doc); // TODO(NODE-3283): Improve transform typing\n          } catch (error) {\n            return done(error);\n          }\n\n          if (result === false) return done(); // these do need to be transformed since they are copying the rest of the batch\n\n          const internalDocs = this[kDocuments].splice(0, this[kDocuments].length);\n\n          for (let i = 0; i < internalDocs.length; ++i) {\n            try {\n              result = iterator(transform ? transform(internalDocs[i]) : internalDocs[i] // TODO(NODE-3283): Improve transform typing\n              );\n            } catch (error) {\n              return done(error);\n            }\n\n            if (result === false) return done();\n          }\n\n          fetchDocs();\n        });\n      };\n\n      fetchDocs();\n    });\n  }\n\n  close(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    const needsToEmitClosed = !this[kClosed];\n    this[kClosed] = true;\n    return (0, utils_1.maybePromise)(callback, done => cleanupCursor(this, {\n      needsToEmitClosed\n    }, done));\n  }\n\n  toArray(callback) {\n    return (0, utils_1.maybePromise)(callback, done => {\n      const docs = [];\n      const transform = this[kTransform];\n\n      const fetchDocs = () => {\n        // NOTE: if we add a `nextBatch` then we should use it here\n        next(this, true, (err, doc) => {\n          if (err) return done(err);\n          if (doc == null) return done(undefined, docs); // NOTE: no need to transform because `next` will do this automatically\n\n          docs.push(doc); // these do need to be transformed since they are copying the rest of the batch\n\n          const internalDocs = transform ? this[kDocuments].splice(0, this[kDocuments].length).map(transform) : this[kDocuments].splice(0, this[kDocuments].length); // TODO(NODE-3283): Improve transform typing\n\n          if (internalDocs) {\n            docs.push(...internalDocs);\n          }\n\n          fetchDocs();\n        });\n      };\n\n      fetchDocs();\n    });\n  }\n  /**\n   * Add a cursor flag to the cursor\n   *\n   * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n   * @param value - The flag boolean value.\n   */\n\n\n  addCursorFlag(flag, value) {\n    assertUninitialized(this);\n\n    if (!exports.CURSOR_FLAGS.includes(flag)) {\n      throw new error_1.MongoInvalidArgumentError(`Flag ${flag} is not one of ${exports.CURSOR_FLAGS}`);\n    }\n\n    if (typeof value !== 'boolean') {\n      throw new error_1.MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n    }\n\n    this[kOptions][flag] = value;\n    return this;\n  }\n  /**\n   * Map all documents using the provided function\n   * If there is a transform set on the cursor, that will be called first and the result passed to\n   * this function's transform.\n   *\n   * @remarks\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling map,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<Document> = coll.find();\n   * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n   * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n   * ```\n   * @param transform - The mapping transformation method.\n   */\n\n\n  map(transform) {\n    assertUninitialized(this);\n    const oldTransform = this[kTransform]; // TODO(NODE-3283): Improve transform typing\n\n    if (oldTransform) {\n      this[kTransform] = doc => {\n        return transform(oldTransform(doc));\n      };\n    } else {\n      this[kTransform] = transform;\n    }\n\n    return this;\n  }\n  /**\n   * Set the ReadPreference for the cursor.\n   *\n   * @param readPreference - The new read preference for the cursor.\n   */\n\n\n  withReadPreference(readPreference) {\n    assertUninitialized(this);\n\n    if (readPreference instanceof read_preference_1.ReadPreference) {\n      this[kOptions].readPreference = readPreference;\n    } else if (typeof readPreference === 'string') {\n      this[kOptions].readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n    } else {\n      throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n    }\n\n    return this;\n  }\n  /**\n   * Set the ReadPreference for the cursor.\n   *\n   * @param readPreference - The new read preference for the cursor.\n   */\n\n\n  withReadConcern(readConcern) {\n    assertUninitialized(this);\n    const resolvedReadConcern = read_concern_1.ReadConcern.fromOptions({\n      readConcern\n    });\n\n    if (resolvedReadConcern) {\n      this[kOptions].readConcern = resolvedReadConcern;\n    }\n\n    return this;\n  }\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n\n\n  maxTimeMS(value) {\n    assertUninitialized(this);\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n\n    this[kOptions].maxTimeMS = value;\n    return this;\n  }\n  /**\n   * Set the batch size for the cursor.\n   *\n   * @param value - The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find/|find command documentation}.\n   */\n\n\n  batchSize(value) {\n    assertUninitialized(this);\n\n    if (this[kOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support batchSize');\n    }\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n    }\n\n    this[kOptions].batchSize = value;\n    return this;\n  }\n  /**\n   * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n   * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n   * if the resultant data has already been retrieved by this cursor.\n   */\n\n\n  rewind() {\n    if (!this[kInitialized]) {\n      return;\n    }\n\n    this[kId] = undefined;\n    this[kDocuments] = [];\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kInitialized] = false;\n    const session = this[kSession];\n\n    if (session) {\n      // We only want to end this session if we created it, and it hasn't ended yet\n      if (session.explicit === false && !session.hasEnded) {\n        session.endSession();\n      }\n\n      this[kSession] = undefined;\n    }\n  }\n  /** @internal */\n\n\n  _getMore(batchSize, callback) {\n    const cursorId = this[kId];\n    const cursorNs = this[kNamespace];\n    const server = this[kServer];\n\n    if (cursorId == null) {\n      callback(new error_1.MongoRuntimeError('Unable to iterate cursor with no id'));\n      return;\n    }\n\n    if (server == null) {\n      callback(new error_1.MongoRuntimeError('Unable to iterate cursor without selected server'));\n      return;\n    }\n\n    const getMoreOperation = new get_more_1.GetMoreOperation(cursorNs, cursorId, server, { ...this[kOptions],\n      session: this[kSession],\n      batchSize\n    });\n    (0, execute_operation_1.executeOperation)(this.topology, getMoreOperation, callback);\n  }\n\n}\n\nexports.AbstractCursor = AbstractCursor;\n/** @event */\n\nAbstractCursor.CLOSE = 'close';\n\nfunction nextDocument(cursor) {\n  if (cursor[kDocuments] == null || !cursor[kDocuments].length) {\n    return null;\n  }\n\n  const doc = cursor[kDocuments].shift();\n\n  if (doc) {\n    const transform = cursor[kTransform];\n\n    if (transform) {\n      return transform(doc);\n    }\n\n    return doc;\n  }\n\n  return null;\n}\n\nfunction next(cursor, blocking, callback) {\n  const cursorId = cursor[kId];\n\n  if (cursor.closed) {\n    return callback(undefined, null);\n  }\n\n  if (cursor[kDocuments] && cursor[kDocuments].length) {\n    callback(undefined, nextDocument(cursor));\n    return;\n  }\n\n  if (cursorId == null) {\n    // All cursors must operate within a session, one must be made implicitly if not explicitly provided\n    if (cursor[kSession] == null) {\n      if (cursor[kTopology].shouldCheckForSessionSupport()) {\n        return cursor[kTopology].selectServer(read_preference_1.ReadPreference.primaryPreferred, err => {\n          if (err) return callback(err);\n          return next(cursor, blocking, callback);\n        });\n      } else if (cursor[kTopology].hasSessionSupport()) {\n        cursor[kSession] = cursor[kTopology].startSession({\n          owner: cursor,\n          explicit: false\n        });\n      }\n    }\n\n    cursor._initialize(cursor[kSession], (err, state) => {\n      if (state) {\n        const response = state.response;\n        cursor[kServer] = state.server;\n        cursor[kSession] = state.session;\n\n        if (response.cursor) {\n          cursor[kId] = typeof response.cursor.id === 'number' ? bson_1.Long.fromNumber(response.cursor.id) : response.cursor.id;\n\n          if (response.cursor.ns) {\n            cursor[kNamespace] = (0, utils_1.ns)(response.cursor.ns);\n          }\n\n          cursor[kDocuments] = response.cursor.firstBatch;\n        } else {\n          // NOTE: This is for support of older servers (<3.2) which do not use commands\n          cursor[kId] = typeof response.cursorId === 'number' ? bson_1.Long.fromNumber(response.cursorId) : response.cursorId;\n          cursor[kDocuments] = response.documents;\n        } // When server responses return without a cursor document, we close this cursor\n        // and return the raw server response. This is often the case for explain commands\n        // for example\n\n\n        if (cursor[kId] == null) {\n          cursor[kId] = bson_1.Long.ZERO; // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\n\n          cursor[kDocuments] = [state.response];\n        }\n      } // the cursor is now initialized, even if an error occurred or it is dead\n\n\n      cursor[kInitialized] = true;\n\n      if (err || cursorIsDead(cursor)) {\n        return cleanupCursor(cursor, {\n          error: err\n        }, () => callback(err, nextDocument(cursor)));\n      }\n\n      next(cursor, blocking, callback);\n    });\n\n    return;\n  }\n\n  if (cursorIsDead(cursor)) {\n    return cleanupCursor(cursor, undefined, () => callback(undefined, null));\n  } // otherwise need to call getMore\n\n\n  const batchSize = cursor[kOptions].batchSize || 1000;\n\n  cursor._getMore(batchSize, (err, response) => {\n    if (response) {\n      const cursorId = typeof response.cursor.id === 'number' ? bson_1.Long.fromNumber(response.cursor.id) : response.cursor.id;\n      cursor[kDocuments] = response.cursor.nextBatch;\n      cursor[kId] = cursorId;\n    }\n\n    if (err || cursorIsDead(cursor)) {\n      return cleanupCursor(cursor, {\n        error: err\n      }, () => callback(err, nextDocument(cursor)));\n    }\n\n    if (cursor[kDocuments].length === 0 && blocking === false) {\n      return callback(undefined, null);\n    }\n\n    next(cursor, blocking, callback);\n  });\n}\n\nfunction cursorIsDead(cursor) {\n  const cursorId = cursor[kId];\n  return !!cursorId && cursorId.isZero();\n}\n\nfunction cleanupCursor(cursor, options, callback) {\n  var _a;\n\n  const cursorId = cursor[kId];\n  const cursorNs = cursor[kNamespace];\n  const server = cursor[kServer];\n  const session = cursor[kSession];\n  const error = options === null || options === void 0 ? void 0 : options.error;\n  const needsToEmitClosed = (_a = options === null || options === void 0 ? void 0 : options.needsToEmitClosed) !== null && _a !== void 0 ? _a : cursor[kDocuments].length === 0;\n\n  if (error) {\n    if (cursor.loadBalanced && error instanceof error_1.MongoNetworkError) {\n      return completeCleanup();\n    }\n  }\n\n  if (cursorId == null || server == null || cursorId.isZero() || cursorNs == null) {\n    if (needsToEmitClosed) {\n      cursor[kClosed] = true;\n      cursor[kId] = bson_1.Long.ZERO;\n      cursor.emit(AbstractCursor.CLOSE);\n    }\n\n    if (session) {\n      if (session.owner === cursor) {\n        return session.endSession({\n          error\n        }, callback);\n      }\n\n      if (!session.inTransaction()) {\n        (0, sessions_1.maybeClearPinnedConnection)(session, {\n          error\n        });\n      }\n    }\n\n    return callback();\n  }\n\n  function completeCleanup() {\n    if (session) {\n      if (session.owner === cursor) {\n        return session.endSession({\n          error\n        }, () => {\n          cursor.emit(AbstractCursor.CLOSE);\n          callback();\n        });\n      }\n\n      if (!session.inTransaction()) {\n        (0, sessions_1.maybeClearPinnedConnection)(session, {\n          error\n        });\n      }\n    }\n\n    cursor.emit(AbstractCursor.CLOSE);\n    return callback();\n  }\n\n  cursor[kKilled] = true;\n  server.killCursors(cursorNs, [cursorId], { ...(0, bson_1.pluckBSONSerializeOptions)(cursor[kOptions]),\n    session\n  }, () => completeCleanup());\n}\n/** @internal */\n\n\nfunction assertUninitialized(cursor) {\n  if (cursor[kInitialized]) {\n    throw new error_1.MongoCursorInUseError();\n  }\n}\n\nexports.assertUninitialized = assertUninitialized;\n\nfunction makeCursorStream(cursor) {\n  const readable = new stream_1.Readable({\n    objectMode: true,\n    autoDestroy: false,\n    highWaterMark: 1\n  });\n  let initialized = false;\n  let reading = false;\n  let needToClose = true; // NOTE: we must close the cursor if we never read from it, use `_construct` in future node versions\n\n  readable._read = function () {\n    if (initialized === false) {\n      needToClose = false;\n      initialized = true;\n    }\n\n    if (!reading) {\n      reading = true;\n      readNext();\n    }\n  };\n\n  readable._destroy = function (error, cb) {\n    if (needToClose) {\n      cursor.close(err => process.nextTick(cb, err || error));\n    } else {\n      cb(error);\n    }\n  };\n\n  function readNext() {\n    needToClose = false;\n    next(cursor, true, (err, result) => {\n      needToClose = err ? !cursor.closed : result != null;\n\n      if (err) {\n        // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n        //       desired behavior is that a stream ends cleanly when a user explicitly closes\n        //       a client during iteration. Alternatively, we could do the \"right\" thing and\n        //       propagate the error message by removing this special case.\n        if (err.message.match(/server is closed/)) {\n          cursor.close();\n          return readable.push(null);\n        } // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n        //       to be \"operation interrupted\", where a cursor has been closed but there is an\n        //       active getMore in-flight. This used to check if the cursor was killed but once\n        //       that changed to happen in cleanup legitimate errors would not destroy the\n        //       stream. There are change streams test specifically test these cases.\n\n\n        if (err.message.match(/interrupted/)) {\n          return readable.push(null);\n        }\n\n        return readable.destroy(err);\n      }\n\n      if (result == null) {\n        readable.push(null);\n      } else if (readable.destroyed) {\n        cursor.close();\n      } else {\n        if (readable.push(result)) {\n          return readNext();\n        }\n\n        reading = false;\n      }\n    });\n  }\n\n  return readable;\n}","map":{"version":3,"mappings":"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","names":["kId","Symbol","kDocuments","kServer","kNamespace","kTopology","kSession","kOptions","kTransform","kInitialized","kClosed","kKilled","exports","AbstractCursor","mongo_types_1","constructor","topology","namespace","options","readPreference","read_preference_1","primary","readConcern","read_concern_1","fromOptions","batchSize","comment","maxTimeMS","session","sessions_1","id","server","clientSession","cursorOptions","closed","killed","loadBalanced","bufferedCount","length","readBufferedDocuments","number","splice","asyncIterator","next","then","value","done","undefined","stream","transform","readable","makeCursorStream","pipe","stream_1","objectMode","highWaterMark","chunk","_","callback","transformed","err","hasNext","bson_1","ZERO","doc","unshift","error_1","tryNext","forEach","iterator","fetchDocs","result","error","internalDocs","i","close","needsToEmitClosed","cleanupCursor","toArray","docs","push","map","addCursorFlag","flag","assertUninitialized","includes","oldTransform","withReadPreference","fromString","withReadConcern","resolvedReadConcern","tailable","rewind","explicit","hasEnded","endSession","_getMore","cursorId","cursorNs","getMoreOperation","get_more_1","nextDocument","cursor","shift","blocking","shouldCheckForSessionSupport","selectServer","primaryPreferred","hasSessionSupport","startSession","owner","_initialize","state","response","fromNumber","ns","firstBatch","documents","cursorIsDead","nextBatch","isZero","_a","completeCleanup","emit","CLOSE","inTransaction","killCursors","autoDestroy","initialized","reading","needToClose","_read","readNext","_destroy","cb","process","nextTick","message","match","destroy","destroyed"],"sources":["/Users/santiago/Documents/tulipan1637/iot-sensor/node_modules/mongodb/src/cursor/abstract_cursor.ts"],"sourcesContent":["import { Readable, Transform } from 'stream';\n\nimport { BSONSerializeOptions, Document, Long, pluckBSONSerializeOptions } from '../bson';\nimport {\n  AnyError,\n  MongoCursorExhaustedError,\n  MongoCursorInUseError,\n  MongoInvalidArgumentError,\n  MongoNetworkError,\n  MongoRuntimeError,\n  MongoTailableCursorError\n} from '../error';\nimport { TODO_NODE_3286, TypedEventEmitter } from '../mongo_types';\nimport { executeOperation, ExecutionResult } from '../operations/execute_operation';\nimport { GetMoreOperation } from '../operations/get_more';\nimport { ReadConcern, ReadConcernLike } from '../read_concern';\nimport { ReadPreference, ReadPreferenceLike } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport type { Topology } from '../sdam/topology';\nimport { ClientSession, maybeClearPinnedConnection } from '../sessions';\nimport { Callback, maybePromise, MongoDBNamespace, ns } from '../utils';\n\n/** @internal */\nconst kId = Symbol('id');\n/** @internal */\nconst kDocuments = Symbol('documents');\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kNamespace = Symbol('namespace');\n/** @internal */\nconst kTopology = Symbol('topology');\n/** @internal */\nconst kSession = Symbol('session');\n/** @internal */\nconst kOptions = Symbol('options');\n/** @internal */\nconst kTransform = Symbol('transform');\n/** @internal */\nconst kInitialized = Symbol('initialized');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kKilled = Symbol('killed');\n\n/** @public */\nexport const CURSOR_FLAGS = [\n  'tailable',\n  'oplogReplay',\n  'noCursorTimeout',\n  'awaitData',\n  'exhaust',\n  'partial'\n] as const;\n\n/** @public\n * @deprecated This interface is deprecated */\nexport interface CursorCloseOptions {\n  /** Bypass calling killCursors when closing the cursor. */\n  /** @deprecated  the skipKillCursors option is deprecated */\n  skipKillCursors?: boolean;\n}\n\n/** @public */\nexport interface CursorStreamOptions {\n  /** A transformation method applied to each document emitted by the stream */\n  transform?(doc: Document): Document;\n}\n\n/** @public */\nexport type CursorFlag = typeof CURSOR_FLAGS[number];\n\n/** @public */\nexport interface AbstractCursorOptions extends BSONSerializeOptions {\n  session?: ClientSession;\n  readPreference?: ReadPreferenceLike;\n  readConcern?: ReadConcernLike;\n  batchSize?: number;\n  maxTimeMS?: number;\n  comment?: Document | string;\n  tailable?: boolean;\n  awaitData?: boolean;\n  noCursorTimeout?: boolean;\n}\n\n/** @internal */\nexport type InternalAbstractCursorOptions = Omit<AbstractCursorOptions, 'readPreference'> & {\n  // resolved\n  readPreference: ReadPreference;\n  readConcern?: ReadConcern;\n\n  // cursor flags, some are deprecated\n  oplogReplay?: boolean;\n  exhaust?: boolean;\n  partial?: boolean;\n};\n\n/** @public */\nexport type AbstractCursorEvents = {\n  [AbstractCursor.CLOSE](): void;\n};\n\n/** @public */\nexport abstract class AbstractCursor<\n  TSchema = any,\n  CursorEvents extends AbstractCursorEvents = AbstractCursorEvents\n> extends TypedEventEmitter<CursorEvents> {\n  /** @internal */\n  [kId]?: Long;\n  /** @internal */\n  [kSession]?: ClientSession;\n  /** @internal */\n  [kServer]?: Server;\n  /** @internal */\n  [kNamespace]: MongoDBNamespace;\n  /** @internal */\n  [kDocuments]: TSchema[];\n  /** @internal */\n  [kTopology]: Topology;\n  /** @internal */\n  [kTransform]?: (doc: TSchema) => Document;\n  /** @internal */\n  [kInitialized]: boolean;\n  /** @internal */\n  [kClosed]: boolean;\n  /** @internal */\n  [kKilled]: boolean;\n  /** @internal */\n  [kOptions]: InternalAbstractCursorOptions;\n\n  /** @event */\n  static readonly CLOSE = 'close' as const;\n\n  /** @internal */\n  constructor(\n    topology: Topology,\n    namespace: MongoDBNamespace,\n    options: AbstractCursorOptions = {}\n  ) {\n    super();\n\n    this[kTopology] = topology;\n    this[kNamespace] = namespace;\n    this[kDocuments] = []; // TODO: https://github.com/microsoft/TypeScript/issues/36230\n    this[kInitialized] = false;\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kOptions] = {\n      readPreference:\n        options.readPreference && options.readPreference instanceof ReadPreference\n          ? options.readPreference\n          : ReadPreference.primary,\n      ...pluckBSONSerializeOptions(options)\n    };\n\n    const readConcern = ReadConcern.fromOptions(options);\n    if (readConcern) {\n      this[kOptions].readConcern = readConcern;\n    }\n\n    if (typeof options.batchSize === 'number') {\n      this[kOptions].batchSize = options.batchSize;\n    }\n\n    if (options.comment != null) {\n      this[kOptions].comment = options.comment;\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      this[kOptions].maxTimeMS = options.maxTimeMS;\n    }\n\n    if (options.session instanceof ClientSession) {\n      this[kSession] = options.session;\n    }\n  }\n\n  get id(): Long | undefined {\n    return this[kId];\n  }\n\n  /** @internal */\n  get topology(): Topology {\n    return this[kTopology];\n  }\n\n  /** @internal */\n  get server(): Server | undefined {\n    return this[kServer];\n  }\n\n  get namespace(): MongoDBNamespace {\n    return this[kNamespace];\n  }\n\n  get readPreference(): ReadPreference {\n    return this[kOptions].readPreference;\n  }\n\n  get readConcern(): ReadConcern | undefined {\n    return this[kOptions].readConcern;\n  }\n\n  /** @internal */\n  get session(): ClientSession | undefined {\n    return this[kSession];\n  }\n\n  set session(clientSession: ClientSession | undefined) {\n    this[kSession] = clientSession;\n  }\n\n  /** @internal */\n  get cursorOptions(): InternalAbstractCursorOptions {\n    return this[kOptions];\n  }\n\n  get closed(): boolean {\n    return this[kClosed];\n  }\n\n  get killed(): boolean {\n    return this[kKilled];\n  }\n\n  get loadBalanced(): boolean {\n    return this[kTopology].loadBalanced;\n  }\n\n  /** Returns current buffered documents length */\n  bufferedCount(): number {\n    return this[kDocuments].length;\n  }\n\n  /** Returns current buffered documents */\n  readBufferedDocuments(number?: number): TSchema[] {\n    return this[kDocuments].splice(0, number ?? this[kDocuments].length);\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<TSchema, void> {\n    return {\n      next: () =>\n        this.next().then(value =>\n          value != null ? { value, done: false } : { value: undefined, done: true }\n        )\n    };\n  }\n\n  stream(options?: CursorStreamOptions): Readable {\n    if (options?.transform) {\n      const transform = options.transform;\n      const readable = makeCursorStream(this);\n\n      return readable.pipe(\n        new Transform({\n          objectMode: true,\n          highWaterMark: 1,\n          transform(chunk, _, callback) {\n            try {\n              const transformed = transform(chunk);\n              callback(undefined, transformed);\n            } catch (err) {\n              callback(err);\n            }\n          }\n        })\n      );\n    }\n\n    return makeCursorStream(this);\n  }\n\n  hasNext(): Promise<boolean>;\n  hasNext(callback: Callback<boolean>): void;\n  hasNext(callback?: Callback<boolean>): Promise<boolean> | void {\n    return maybePromise(callback, done => {\n      if (this[kId] === Long.ZERO) {\n        return done(undefined, false);\n      }\n\n      if (this[kDocuments].length) {\n        return done(undefined, true);\n      }\n\n      next<TSchema>(this, true, (err, doc) => {\n        if (err) return done(err);\n\n        if (doc) {\n          this[kDocuments].unshift(doc);\n          done(undefined, true);\n          return;\n        }\n\n        done(undefined, false);\n      });\n    });\n  }\n\n  /** Get the next available document from the cursor, returns null if no more documents are available. */\n  next(): Promise<TSchema | null>;\n  next(callback: Callback<TSchema | null>): void;\n  next(callback?: Callback<TSchema | null>): Promise<TSchema | null> | void;\n  next(callback?: Callback<TSchema | null>): Promise<TSchema | null> | void {\n    return maybePromise(callback, done => {\n      if (this[kId] === Long.ZERO) {\n        return done(new MongoCursorExhaustedError());\n      }\n\n      next(this, true, done);\n    });\n  }\n\n  /**\n   * Try to get the next available document from the cursor or `null` if an empty batch is returned\n   */\n  tryNext(): Promise<TSchema | null>;\n  tryNext(callback: Callback<TSchema | null>): void;\n  tryNext(callback?: Callback<TSchema | null>): Promise<TSchema | null> | void {\n    return maybePromise(callback, done => {\n      if (this[kId] === Long.ZERO) {\n        return done(new MongoCursorExhaustedError());\n      }\n\n      next(this, false, done);\n    });\n  }\n\n  /**\n   * Iterates over all the documents for this cursor using the iterator, callback pattern.\n   *\n   * @param iterator - The iteration callback.\n   * @param callback - The end callback.\n   */\n  forEach(iterator: (doc: TSchema) => boolean | void): Promise<void>;\n  forEach(iterator: (doc: TSchema) => boolean | void, callback: Callback<void>): void;\n  forEach(\n    iterator: (doc: TSchema) => boolean | void,\n    callback?: Callback<void>\n  ): Promise<void> | void {\n    if (typeof iterator !== 'function') {\n      throw new MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n    }\n    return maybePromise(callback, done => {\n      const transform = this[kTransform];\n      const fetchDocs = () => {\n        next<TSchema>(this, true, (err, doc) => {\n          if (err || doc == null) return done(err);\n          let result;\n          // NOTE: no need to transform because `next` will do this automatically\n          try {\n            result = iterator(doc); // TODO(NODE-3283): Improve transform typing\n          } catch (error) {\n            return done(error);\n          }\n\n          if (result === false) return done();\n\n          // these do need to be transformed since they are copying the rest of the batch\n          const internalDocs = this[kDocuments].splice(0, this[kDocuments].length);\n          for (let i = 0; i < internalDocs.length; ++i) {\n            try {\n              result = iterator(\n                (transform ? transform(internalDocs[i]) : internalDocs[i]) as TSchema // TODO(NODE-3283): Improve transform typing\n              );\n            } catch (error) {\n              return done(error);\n            }\n            if (result === false) return done();\n          }\n\n          fetchDocs();\n        });\n      };\n\n      fetchDocs();\n    });\n  }\n\n  close(): void;\n  close(callback: Callback): void;\n  /**\n   * @deprecated options argument is deprecated\n   */\n  close(options: CursorCloseOptions): Promise<void>;\n  /**\n   * @deprecated options argument is deprecated\n   */\n  close(options: CursorCloseOptions, callback: Callback): void;\n  close(options?: CursorCloseOptions | Callback, callback?: Callback): Promise<void> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n\n    const needsToEmitClosed = !this[kClosed];\n    this[kClosed] = true;\n\n    return maybePromise(callback, done => cleanupCursor(this, { needsToEmitClosed }, done));\n  }\n\n  /**\n   * Returns an array of documents. The caller is responsible for making sure that there\n   * is enough memory to store the results. Note that the array only contains partial\n   * results when this cursor had been previously accessed. In that case,\n   * cursor.rewind() can be used to reset the cursor.\n   *\n   * @param callback - The result callback.\n   */\n  toArray(): Promise<TSchema[]>;\n  toArray(callback: Callback<TSchema[]>): void;\n  toArray(callback?: Callback<TSchema[]>): Promise<TSchema[]> | void {\n    return maybePromise(callback, done => {\n      const docs: TSchema[] = [];\n      const transform = this[kTransform];\n      const fetchDocs = () => {\n        // NOTE: if we add a `nextBatch` then we should use it here\n        next<TSchema>(this, true, (err, doc) => {\n          if (err) return done(err);\n          if (doc == null) return done(undefined, docs);\n\n          // NOTE: no need to transform because `next` will do this automatically\n          docs.push(doc);\n\n          // these do need to be transformed since they are copying the rest of the batch\n          const internalDocs = (\n            transform\n              ? this[kDocuments].splice(0, this[kDocuments].length).map(transform)\n              : this[kDocuments].splice(0, this[kDocuments].length)\n          ) as TSchema[]; // TODO(NODE-3283): Improve transform typing\n\n          if (internalDocs) {\n            docs.push(...internalDocs);\n          }\n\n          fetchDocs();\n        });\n      };\n\n      fetchDocs();\n    });\n  }\n\n  /**\n   * Add a cursor flag to the cursor\n   *\n   * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n   * @param value - The flag boolean value.\n   */\n  addCursorFlag(flag: CursorFlag, value: boolean): this {\n    assertUninitialized(this);\n    if (!CURSOR_FLAGS.includes(flag)) {\n      throw new MongoInvalidArgumentError(`Flag ${flag} is not one of ${CURSOR_FLAGS}`);\n    }\n\n    if (typeof value !== 'boolean') {\n      throw new MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n    }\n\n    this[kOptions][flag] = value;\n    return this;\n  }\n\n  /**\n   * Map all documents using the provided function\n   * If there is a transform set on the cursor, that will be called first and the result passed to\n   * this function's transform.\n   *\n   * @remarks\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling map,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<Document> = coll.find();\n   * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n   * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n   * ```\n   * @param transform - The mapping transformation method.\n   */\n  map<T = any>(transform: (doc: TSchema) => T): AbstractCursor<T> {\n    assertUninitialized(this);\n    const oldTransform = this[kTransform] as (doc: TSchema) => TSchema; // TODO(NODE-3283): Improve transform typing\n    if (oldTransform) {\n      this[kTransform] = doc => {\n        return transform(oldTransform(doc));\n      };\n    } else {\n      this[kTransform] = transform;\n    }\n\n    return this as unknown as AbstractCursor<T>;\n  }\n\n  /**\n   * Set the ReadPreference for the cursor.\n   *\n   * @param readPreference - The new read preference for the cursor.\n   */\n  withReadPreference(readPreference: ReadPreferenceLike): this {\n    assertUninitialized(this);\n    if (readPreference instanceof ReadPreference) {\n      this[kOptions].readPreference = readPreference;\n    } else if (typeof readPreference === 'string') {\n      this[kOptions].readPreference = ReadPreference.fromString(readPreference);\n    } else {\n      throw new MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n    }\n\n    return this;\n  }\n\n  /**\n   * Set the ReadPreference for the cursor.\n   *\n   * @param readPreference - The new read preference for the cursor.\n   */\n  withReadConcern(readConcern: ReadConcernLike): this {\n    assertUninitialized(this);\n    const resolvedReadConcern = ReadConcern.fromOptions({ readConcern });\n    if (resolvedReadConcern) {\n      this[kOptions].readConcern = resolvedReadConcern;\n    }\n\n    return this;\n  }\n\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n  maxTimeMS(value: number): this {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n\n    this[kOptions].maxTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Set the batch size for the cursor.\n   *\n   * @param value - The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find/|find command documentation}.\n   */\n  batchSize(value: number): this {\n    assertUninitialized(this);\n    if (this[kOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support batchSize');\n    }\n\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n    }\n\n    this[kOptions].batchSize = value;\n    return this;\n  }\n\n  /**\n   * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n   * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n   * if the resultant data has already been retrieved by this cursor.\n   */\n  rewind(): void {\n    if (!this[kInitialized]) {\n      return;\n    }\n\n    this[kId] = undefined;\n    this[kDocuments] = [];\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kInitialized] = false;\n\n    const session = this[kSession];\n    if (session) {\n      // We only want to end this session if we created it, and it hasn't ended yet\n      if (session.explicit === false && !session.hasEnded) {\n        session.endSession();\n      }\n\n      this[kSession] = undefined;\n    }\n  }\n\n  /**\n   * Returns a new uninitialized copy of this cursor, with options matching those that have been set on the current instance\n   */\n  abstract clone(): AbstractCursor<TSchema>;\n\n  /** @internal */\n  abstract _initialize(\n    session: ClientSession | undefined,\n    callback: Callback<ExecutionResult>\n  ): void;\n\n  /** @internal */\n  _getMore(batchSize: number, callback: Callback<Document>): void {\n    const cursorId = this[kId];\n    const cursorNs = this[kNamespace];\n    const server = this[kServer];\n\n    if (cursorId == null) {\n      callback(new MongoRuntimeError('Unable to iterate cursor with no id'));\n      return;\n    }\n\n    if (server == null) {\n      callback(new MongoRuntimeError('Unable to iterate cursor without selected server'));\n      return;\n    }\n\n    const getMoreOperation = new GetMoreOperation(cursorNs, cursorId, server, {\n      ...this[kOptions],\n      session: this[kSession],\n      batchSize\n    });\n\n    executeOperation(this.topology, getMoreOperation, callback);\n  }\n}\n\nfunction nextDocument<T>(cursor: AbstractCursor): T | null | undefined {\n  if (cursor[kDocuments] == null || !cursor[kDocuments].length) {\n    return null;\n  }\n\n  const doc = cursor[kDocuments].shift();\n  if (doc) {\n    const transform = cursor[kTransform];\n    if (transform) {\n      return transform(doc) as T;\n    }\n\n    return doc;\n  }\n\n  return null;\n}\n\nfunction next<T>(cursor: AbstractCursor, blocking: boolean, callback: Callback<T | null>): void {\n  const cursorId = cursor[kId];\n  if (cursor.closed) {\n    return callback(undefined, null);\n  }\n\n  if (cursor[kDocuments] && cursor[kDocuments].length) {\n    callback(undefined, nextDocument(cursor));\n    return;\n  }\n\n  if (cursorId == null) {\n    // All cursors must operate within a session, one must be made implicitly if not explicitly provided\n    if (cursor[kSession] == null) {\n      if (cursor[kTopology].shouldCheckForSessionSupport()) {\n        return cursor[kTopology].selectServer(ReadPreference.primaryPreferred, err => {\n          if (err) return callback(err);\n          return next(cursor, blocking, callback);\n        });\n      } else if (cursor[kTopology].hasSessionSupport()) {\n        cursor[kSession] = cursor[kTopology].startSession({ owner: cursor, explicit: false });\n      }\n    }\n\n    cursor._initialize(cursor[kSession], (err, state) => {\n      if (state) {\n        const response = state.response;\n        cursor[kServer] = state.server;\n        cursor[kSession] = state.session;\n\n        if (response.cursor) {\n          cursor[kId] =\n            typeof response.cursor.id === 'number'\n              ? Long.fromNumber(response.cursor.id)\n              : response.cursor.id;\n\n          if (response.cursor.ns) {\n            cursor[kNamespace] = ns(response.cursor.ns);\n          }\n\n          cursor[kDocuments] = response.cursor.firstBatch;\n        } else {\n          // NOTE: This is for support of older servers (<3.2) which do not use commands\n          cursor[kId] =\n            typeof response.cursorId === 'number'\n              ? Long.fromNumber(response.cursorId)\n              : response.cursorId;\n          cursor[kDocuments] = response.documents;\n        }\n\n        // When server responses return without a cursor document, we close this cursor\n        // and return the raw server response. This is often the case for explain commands\n        // for example\n        if (cursor[kId] == null) {\n          cursor[kId] = Long.ZERO;\n          // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\n          cursor[kDocuments] = [state.response as TODO_NODE_3286];\n        }\n      }\n\n      // the cursor is now initialized, even if an error occurred or it is dead\n      cursor[kInitialized] = true;\n\n      if (err || cursorIsDead(cursor)) {\n        return cleanupCursor(cursor, { error: err }, () => callback(err, nextDocument(cursor)));\n      }\n\n      next(cursor, blocking, callback);\n    });\n\n    return;\n  }\n\n  if (cursorIsDead(cursor)) {\n    return cleanupCursor(cursor, undefined, () => callback(undefined, null));\n  }\n\n  // otherwise need to call getMore\n  const batchSize = cursor[kOptions].batchSize || 1000;\n  cursor._getMore(batchSize, (err, response) => {\n    if (response) {\n      const cursorId =\n        typeof response.cursor.id === 'number'\n          ? Long.fromNumber(response.cursor.id)\n          : response.cursor.id;\n\n      cursor[kDocuments] = response.cursor.nextBatch;\n      cursor[kId] = cursorId;\n    }\n\n    if (err || cursorIsDead(cursor)) {\n      return cleanupCursor(cursor, { error: err }, () => callback(err, nextDocument(cursor)));\n    }\n\n    if (cursor[kDocuments].length === 0 && blocking === false) {\n      return callback(undefined, null);\n    }\n\n    next(cursor, blocking, callback);\n  });\n}\n\nfunction cursorIsDead(cursor: AbstractCursor): boolean {\n  const cursorId = cursor[kId];\n  return !!cursorId && cursorId.isZero();\n}\n\nfunction cleanupCursor(\n  cursor: AbstractCursor,\n  options: { error?: AnyError | undefined; needsToEmitClosed?: boolean } | undefined,\n  callback: Callback\n): void {\n  const cursorId = cursor[kId];\n  const cursorNs = cursor[kNamespace];\n  const server = cursor[kServer];\n  const session = cursor[kSession];\n  const error = options?.error;\n  const needsToEmitClosed = options?.needsToEmitClosed ?? cursor[kDocuments].length === 0;\n\n  if (error) {\n    if (cursor.loadBalanced && error instanceof MongoNetworkError) {\n      return completeCleanup();\n    }\n  }\n\n  if (cursorId == null || server == null || cursorId.isZero() || cursorNs == null) {\n    if (needsToEmitClosed) {\n      cursor[kClosed] = true;\n      cursor[kId] = Long.ZERO;\n      cursor.emit(AbstractCursor.CLOSE);\n    }\n\n    if (session) {\n      if (session.owner === cursor) {\n        return session.endSession({ error }, callback);\n      }\n\n      if (!session.inTransaction()) {\n        maybeClearPinnedConnection(session, { error });\n      }\n    }\n\n    return callback();\n  }\n\n  function completeCleanup() {\n    if (session) {\n      if (session.owner === cursor) {\n        return session.endSession({ error }, () => {\n          cursor.emit(AbstractCursor.CLOSE);\n          callback();\n        });\n      }\n\n      if (!session.inTransaction()) {\n        maybeClearPinnedConnection(session, { error });\n      }\n    }\n\n    cursor.emit(AbstractCursor.CLOSE);\n    return callback();\n  }\n\n  cursor[kKilled] = true;\n  server.killCursors(\n    cursorNs,\n    [cursorId],\n    { ...pluckBSONSerializeOptions(cursor[kOptions]), session },\n    () => completeCleanup()\n  );\n}\n\n/** @internal */\nexport function assertUninitialized(cursor: AbstractCursor): void {\n  if (cursor[kInitialized]) {\n    throw new MongoCursorInUseError();\n  }\n}\n\nfunction makeCursorStream<TSchema extends Document>(cursor: AbstractCursor<TSchema>) {\n  const readable = new Readable({\n    objectMode: true,\n    autoDestroy: false,\n    highWaterMark: 1\n  });\n\n  let initialized = false;\n  let reading = false;\n  let needToClose = true; // NOTE: we must close the cursor if we never read from it, use `_construct` in future node versions\n\n  readable._read = function () {\n    if (initialized === false) {\n      needToClose = false;\n      initialized = true;\n    }\n\n    if (!reading) {\n      reading = true;\n      readNext();\n    }\n  };\n\n  readable._destroy = function (error, cb) {\n    if (needToClose) {\n      cursor.close(err => process.nextTick(cb, err || error));\n    } else {\n      cb(error);\n    }\n  };\n\n  function readNext() {\n    needToClose = false;\n    next(cursor, true, (err, result) => {\n      needToClose = err ? !cursor.closed : result != null;\n\n      if (err) {\n        // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n        //       desired behavior is that a stream ends cleanly when a user explicitly closes\n        //       a client during iteration. Alternatively, we could do the \"right\" thing and\n        //       propagate the error message by removing this special case.\n        if (err.message.match(/server is closed/)) {\n          cursor.close();\n          return readable.push(null);\n        }\n\n        // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n        //       to be \"operation interrupted\", where a cursor has been closed but there is an\n        //       active getMore in-flight. This used to check if the cursor was killed but once\n        //       that changed to happen in cleanup legitimate errors would not destroy the\n        //       stream. There are change streams test specifically test these cases.\n        if (err.message.match(/interrupted/)) {\n          return readable.push(null);\n        }\n\n        return readable.destroy(err);\n      }\n\n      if (result == null) {\n        readable.push(null);\n      } else if (readable.destroyed) {\n        cursor.close();\n      } else {\n        if (readable.push(result)) {\n          return readNext();\n        }\n\n        reading = false;\n      }\n    });\n  }\n\n  return readable;\n}\n"]},"metadata":{},"sourceType":"script"}