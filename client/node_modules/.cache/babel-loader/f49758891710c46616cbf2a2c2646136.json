{"ast":null,"code":"import { name, date, random, internet } from \"faker\";\nimport { MongoClient } from \"mongodb\";\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included \n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nasync function findAll() {\n  const uri = \"mongodb://127.0.0.1:27017\";\n  const client = new MongoClient(uri, {\n    useNewUrlParser: true // useUnifiedTopology: true,\n\n  });\n\n  try {\n    await client.connect();\n    console.log(\"Connected correctly to server\"); // const database = client.db(\"iot\");\n    // const movies = database.collection(\"sensor\");\n\n    const collection = client.db(\"iot\").collection(\"sensor\");\n    const docs = await collection.find().toArray(); // await docs.forEach(data => console.log(data.cat));\n\n    console.log(docs);\n    client.close();\n  } catch (err) {\n    console.log(err.stack);\n  }\n}\n\nexport async function seedDB() {\n  // Connection URL\n  const uri = \"mongodb://127.0.0.1:27017\";\n  const client = new MongoClient(uri, {\n    useNewUrlParser: true // useUnifiedTopology: true,\n\n  });\n\n  try {\n    await client.connect();\n    console.log(\"Connected correctly to server\");\n    const collection = client.db(\"iot\").collection(\"sensor\");\n    await collection.drop(); // make a bunch of time series data\n\n    let timeSeriesData = [];\n\n    for (let i = 0; i < 5000; i++) {\n      const firstName = name.firstName();\n      const lastName = name.lastName();\n      let newDay = {\n        timestamp_day: date.past(),\n        cat: random.word(),\n        owner: {\n          email: internet.email(firstName, lastName),\n          firstName,\n          lastName\n        },\n        events: []\n      };\n\n      for (let j = 0; j < randomIntFromInterval(1, 6); j++) {\n        let newEvent = {\n          timestamp_event: date.past(),\n          weight: randomIntFromInterval(14, 16)\n        };\n        newDay.events.push(newEvent);\n      }\n\n      timeSeriesData.push(newDay);\n    }\n\n    await collection.insertMany(timeSeriesData);\n    console.log(\"Database seeded! :)\");\n    client.close();\n  } catch (err) {\n    console.log(err.stack);\n  }\n} // export {findAll,seedDB};\n\nexport default seedDB;","map":{"version":3,"sources":["/Users/santiago/Documents/tulipan1637/iot-sensor/src/models/sensor.js"],"names":["name","date","random","internet","MongoClient","randomIntFromInterval","min","max","Math","floor","findAll","uri","client","useNewUrlParser","connect","console","log","collection","db","docs","find","toArray","close","err","stack","seedDB","drop","timeSeriesData","i","firstName","lastName","newDay","timestamp_day","past","cat","word","owner","email","events","j","newEvent","timestamp_event","weight","push","insertMany"],"mappings":"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","sourcesContent":["\nimport { name, date, random, internet } from \"faker\";\nimport { MongoClient } from \"mongodb\";\n\nfunction randomIntFromInterval(min, max) { // min and max included \n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nasync function findAll(){\n    const uri = \"mongodb://127.0.0.1:27017\";\n\n    const client = new MongoClient(uri, {\n        useNewUrlParser: true,\n        // useUnifiedTopology: true,\n    });\n\n    try{\n        await client.connect();\n        console.log(\"Connected correctly to server\");\n\n        // const database = client.db(\"iot\");\n        // const movies = database.collection(\"sensor\");\n\n        const collection = client.db(\"iot\").collection(\"sensor\");\n\n        const docs = await collection.find().toArray();\n        // await docs.forEach(data => console.log(data.cat));\n\n        console.log(docs);\n\n        client.close();\n\n    }catch(err){\n        console.log(err.stack);\n    }\n\n\n}\n\nexport async function seedDB() {\n    // Connection URL\n    const uri = \"mongodb://127.0.0.1:27017\";\n\n    const client = new MongoClient(uri, {\n        useNewUrlParser: true,\n        // useUnifiedTopology: true,\n    });\n\n    try {\n        await client.connect();\n        console.log(\"Connected correctly to server\");\n\n        const collection = client.db(\"iot\").collection(\"sensor\");\n\n  \n        await collection.drop();\n\n        // make a bunch of time series data\n        let timeSeriesData = [];\n\n        for (let i = 0; i < 5000; i++) {\n            const firstName = name.firstName();\n            const lastName = name.lastName();\n            let newDay = {\n                timestamp_day: date.past(),\n                cat: random.word(),\n                owner: {\n                    email: internet.email(firstName, lastName),\n                    firstName,\n                    lastName,\n                },\n                events: [],\n            };\n\n            for (let j = 0; j < randomIntFromInterval(1, 6); j++) {\n                let newEvent = {\n                    timestamp_event: date.past(),\n                    weight: randomIntFromInterval(14,16),\n                }\n                newDay.events.push(newEvent);\n            }\n            timeSeriesData.push(newDay);\n        }\n        await collection.insertMany(timeSeriesData);\n\n        console.log(\"Database seeded! :)\");\n        client.close();\n    } catch (err) {\n        console.log(err.stack);\n    }\n}\n\n// export {findAll,seedDB};\nexport default seedDB;"]},"metadata":{},"sourceType":"module"}