{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\nconst initialState = {\n  value: 0,\n  status: 'idle'\n}; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\nexport const incrementAsync = createAsyncThunk('counter/fetchCount', async amount => {\n  const response = await fetchCount(amount); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nexport const tableSlice = createSlice({\n  name: 'table',\n  initialState: [],\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    setTableValues: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state = payload;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.value += action.payload;\n    });\n  }\n});\nexport const {\n  setTableValues\n} = tableSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectCount = state => state.counter.value; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default tableSlice.reducer;","map":{"version":3,"sources":["/Users/santiago/Documents/tulipan1637/iot-sensor/app/src/features/table/tableSlice.js"],"names":["createAsyncThunk","createSlice","fetchCount","initialState","value","status","incrementAsync","amount","response","data","tableSlice","name","reducers","setTableValues","state","payload","extraReducers","builder","addCase","pending","fulfilled","action","actions","selectCount","counter","incrementIfOdd","dispatch","getState","currentValue","incrementByAmount","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,MAAM,EAAE;AAFW,CAArB,C,CAKA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAGN,gBAAgB,CAC5C,oBAD4C,EAE5C,MAAOO,MAAP,IAAkB;AAChB,QAAMC,QAAQ,GAAG,MAAMN,UAAU,CAACK,MAAD,CAAjC,CADgB,CAEhB;;AACA,SAAOC,QAAQ,CAACC,IAAhB;AACD,CAN2C,CAAvC;AASP,OAAO,MAAMC,UAAU,GAAGT,WAAW,CAAC;AACpCU,EAAAA,IAAI,EAAE,OAD8B;AAEpCR,EAAAA,YAAY,EAAC,EAFuB;AAGpC;AACAS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,cAAc,EAAE,CAACC,KAAD,WAAsB;AAAA,UAAd;AAACC,QAAAA;AAAD,OAAc;AACpCD,MAAAA,KAAK,GAAGC,OAAR;AACD;AAHO,GAJ0B;AASpC;AACA;AACAC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWZ,cAAc,CAACa,OAD1B,EACoCL,KAAD,IAAW;AAC1CA,MAAAA,KAAK,CAACT,MAAN,GAAe,SAAf;AACD,KAHH,EAIGa,OAJH,CAIWZ,cAAc,CAACc,SAJ1B,EAIqC,CAACN,KAAD,EAAQO,MAAR,KAAmB;AACpDP,MAAAA,KAAK,CAACT,MAAN,GAAe,MAAf;AACAS,MAAAA,KAAK,CAACV,KAAN,IAAeiB,MAAM,CAACN,OAAtB;AACD,KAPH;AAQD;AApBmC,CAAD,CAA9B;AAuBP,OAAO,MAAM;AAAEF,EAAAA;AAAF,IAAqBH,UAAU,CAACY,OAAtC,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAIT,KAAD,IAAWA,KAAK,CAACU,OAAN,CAAcpB,KAA7C,C,CAEP;AACA;;AACA,OAAO,MAAMqB,cAAc,GAAIlB,MAAD,IAAY,CAACmB,QAAD,EAAWC,QAAX,KAAwB;AAChE,QAAMC,YAAY,GAAGL,WAAW,CAACI,QAAQ,EAAT,CAAhC;;AACA,MAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;AAC1BF,IAAAA,QAAQ,CAACG,iBAAiB,CAACtB,MAAD,CAAlB,CAAR;AACD;AACF,CALM;AAOP,eAAeG,UAAU,CAACoB,OAA1B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const tableSlice = createSlice({\n  name: 'table',\n  initialState:[],\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    setTableValues: (state, {payload}) => {\n      state = payload;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { setTableValues } = tableSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default tableSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}