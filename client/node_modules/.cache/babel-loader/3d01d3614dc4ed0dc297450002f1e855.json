{"ast":null,"code":"var _jsxFileName = \"/Users/santiago/Documents/tulipan1637/iot-sensor/app/src/features/table/Table.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useTable, useBlockLayout } from 'react-table';\nimport scrollbarWidth from './scrollbarWidth';\nimport { FixedSizeList } from 'react-window';\nexport function Table(_ref) {\n  var _this = this;\n\n  var columns = _ref.columns,\n      data = _ref.data;\n  var defaultColumn = React.useMemo(function () {\n    return {\n      width: 150\n    };\n  }, []);\n  var scrollBarSize = React.useMemo(function () {\n    return scrollbarWidth();\n  }, []);\n\n  var _useTable = useTable({\n    columns: columns,\n    data: data\n  }, useBlockLayout),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      rows = _useTable.rows,\n      totalColumnsWidth = _useTable.totalColumnsWidth,\n      prepareRow = _useTable.prepareRow;\n\n  var RenderRow = React.useCallback(function (_ref2) {\n    var index = _ref2.index,\n        style = _ref2.style;\n    var row = rows[index];\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, row.getRowProps({\n      style: style\n    }), {\n      className: \"tr\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }), row.cells.map(function (cell) {\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, cell.getCellProps(), {\n        className: \"td\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 19\n        }\n      }), cell.render('Cell'));\n    }));\n  }, [prepareRow, rows]);\n  return /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    style: {\n      border: 'solid 1px blue'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, headerGroups.map(function (headerGroup) {\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 15\n      }\n    }), headerGroup.headers.map(function (column) {\n      return /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n        style: {\n          borderBottom: 'solid 3px red',\n          background: 'aliceblue',\n          color: 'black',\n          fontWeight: 'bold'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 19\n        }\n      }), column.render('Header'));\n    }));\n  })), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FixedSizeList, {\n    height: 400,\n    itemCount: rows.length,\n    itemSize: 35,\n    width: totalColumnsWidth + scrollBarSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, RenderRow)));\n}","map":{"version":3,"sources":["/Users/santiago/Documents/tulipan1637/iot-sensor/app/src/features/table/Table.js"],"names":["React","styled","useTable","useBlockLayout","scrollbarWidth","FixedSizeList","Table","columns","data","defaultColumn","useMemo","width","scrollBarSize","getTableProps","getTableBodyProps","headerGroups","rows","totalColumnsWidth","prepareRow","RenderRow","useCallback","index","style","row","getRowProps","cells","map","cell","getCellProps","render","border","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","borderBottom","background","color","fontWeight","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components'\nimport {useTable, useBlockLayout} from 'react-table';\nimport scrollbarWidth from './scrollbarWidth'\nimport { FixedSizeList } from 'react-window'\n\nexport function Table({ columns, data }){\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      width: 150,\n    }),\n    []\n  )\n\n  const scrollBarSize = React.useMemo(() => scrollbarWidth(), [])\n    \n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    totalColumnsWidth,\n    prepareRow,\n  } = useTable({ columns, data },useBlockLayout);\n\n      const RenderRow = React.useCallback(\n        ({ index, style }) => {\n          const row = rows[index]\n          prepareRow(row)\n          return (\n            <div\n              {...row.getRowProps({\n                style,\n              })}\n              className=\"tr\"\n            >\n              {row.cells.map(cell => {\n                return (\n                  <div {...cell.getCellProps()} className=\"td\">\n                    {cell.render('Cell')}\n                  </div>\n                )\n              })}\n            </div>\n          )\n        },\n        [prepareRow, rows]\n      )\n\n\n    \n      return (\n        <table {...getTableProps()} style={{ border: 'solid 1px blue' }}>\n          <thead>\n            {headerGroups.map(headerGroup => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map(column => (\n                  <th\n                    {...column.getHeaderProps()}\n                    style={{\n                      borderBottom: 'solid 3px red',\n                      background: 'aliceblue',\n                      color: 'black',\n                      fontWeight: 'bold',\n                    }}\n                  >\n                    {column.render('Header')}\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()}>\n          <FixedSizeList\n          height={400}\n          itemCount={rows.length}\n          itemSize={35}\n          width={totalColumnsWidth+scrollBarSize}\n        >\n          {RenderRow}\n        </FixedSizeList>\n          </tbody>\n        </table>\n      )\n}"]},"metadata":{},"sourceType":"module"}