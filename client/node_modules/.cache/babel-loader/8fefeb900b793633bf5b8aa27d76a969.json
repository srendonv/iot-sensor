{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChangeStreamCursor = exports.ChangeStream = void 0;\n\nconst Denque = require(\"denque\");\n\nconst collection_1 = require(\"./collection\");\n\nconst abstract_cursor_1 = require(\"./cursor/abstract_cursor\");\n\nconst db_1 = require(\"./db\");\n\nconst error_1 = require(\"./error\");\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nconst mongo_types_1 = require(\"./mongo_types\");\n\nconst aggregate_1 = require(\"./operations/aggregate\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst utils_1 = require(\"./utils\");\n/** @internal */\n\n\nconst kResumeQueue = Symbol('resumeQueue');\n/** @internal */\n\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\n\nconst kClosed = Symbol('closed');\n/** @internal */\n\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument'];\nconst CURSOR_OPTIONS = ['batchSize', 'maxAwaitTimeMS', 'collation', 'readPreference'].concat(CHANGE_STREAM_OPTIONS);\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst NO_CURSOR_ERROR = 'ChangeStream has no cursor';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\n\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  constructor(parent) {\n    let pipeline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n    this.pipeline = pipeline;\n    this.options = options;\n\n    if (parent instanceof collection_1.Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof db_1.Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof mongo_client_1.MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n    }\n\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    }\n\n    this[kResumeQueue] = new Denque(); // Create contained Change Stream cursor\n\n    this.cursor = createChangeStreamCursor(this, options);\n    this[kClosed] = false;\n    this[kMode] = false; // Listen for any `change` listeners being added to ChangeStream\n\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        streamEvents(this, this.cursor);\n      }\n    });\n    this.on('removeListener', eventName => {\n      var _a;\n\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        (_a = this[kCursorStream]) === null || _a === void 0 ? void 0 : _a.removeAllListeners('data');\n      }\n    });\n  }\n  /** @internal */\n\n\n  get cursorStream() {\n    return this[kCursorStream];\n  }\n  /** The cached resume token that is used to resume after the most recently returned change. */\n\n\n  get resumeToken() {\n    var _a;\n\n    return (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.resumeToken;\n  }\n\n  hasNext(callback) {\n    setIsIterator(this);\n    return (0, utils_1.maybePromise)(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n        cursor.hasNext(cb);\n      });\n    });\n  }\n\n  next(callback) {\n    setIsIterator(this);\n    return (0, utils_1.maybePromise)(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n        cursor.next((error, change) => {\n          if (error) {\n            this[kResumeQueue].push(() => this.next(cb));\n            processError(this, error, cb);\n            return;\n          }\n\n          processNewChange(this, change, cb);\n        });\n      });\n    });\n  }\n  /** Is the cursor closed */\n\n\n  get closed() {\n    var _a, _b;\n\n    return this[kClosed] || ((_b = (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.closed) !== null && _b !== void 0 ? _b : false);\n  }\n  /** Close the Change Stream */\n\n\n  close(callback) {\n    this[kClosed] = true;\n    return (0, utils_1.maybePromise)(callback, cb => {\n      if (!this.cursor) {\n        return cb();\n      }\n\n      const cursor = this.cursor;\n      return cursor.close(err => {\n        endStream(this);\n        this.cursor = undefined;\n        return cb(err);\n      });\n    });\n  }\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   * @throws MongoDriverError if this.cursor is undefined\n   */\n\n\n  stream(options) {\n    this.streamOptions = options;\n    if (!this.cursor) throw new error_1.MongoChangeStreamError(NO_CURSOR_ERROR);\n    return this.cursor.stream(options);\n  }\n\n  tryNext(callback) {\n    setIsIterator(this);\n    return (0, utils_1.maybePromise)(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n        return cursor.tryNext(cb);\n      });\n    });\n  }\n\n}\n\nexports.ChangeStream = ChangeStream;\n/** @event */\n\nChangeStream.RESPONSE = 'response';\n/** @event */\n\nChangeStream.MORE = 'more';\n/** @event */\n\nChangeStream.INIT = 'init';\n/** @event */\n\nChangeStream.CLOSE = 'close';\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\n\nChangeStream.CHANGE = 'change';\n/** @event */\n\nChangeStream.END = 'end';\n/** @event */\n\nChangeStream.ERROR = 'error';\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\n\nChangeStream.RESUME_TOKEN_CHANGED = 'resumeTokenChanged';\n/** @internal */\n\nclass ChangeStreamCursor extends abstract_cursor_1.AbstractCursor {\n  constructor(topology, namespace) {\n    let pipeline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(topology, namespace, options);\n    this.pipeline = pipeline;\n    this.options = options;\n    this._resumeToken = null;\n    this.startAtOperationTime = options.startAtOperationTime;\n\n    if (options.startAfter) {\n      this.resumeToken = options.startAfter;\n    } else if (options.resumeAfter) {\n      this.resumeToken = options.resumeAfter;\n    }\n  }\n\n  set resumeToken(token) {\n    this._resumeToken = token;\n    this.emit(ChangeStream.RESUME_TOKEN_CHANGED, token);\n  }\n\n  get resumeToken() {\n    return this._resumeToken;\n  }\n\n  get resumeOptions() {\n    const result = {};\n\n    for (const optionName of CURSOR_OPTIONS) {\n      if (Reflect.has(this.options, optionName)) {\n        Reflect.set(result, optionName, Reflect.get(this.options, optionName));\n      }\n    }\n\n    if (this.resumeToken || this.startAtOperationTime) {\n      ['resumeAfter', 'startAfter', 'startAtOperationTime'].forEach(key => Reflect.deleteProperty(result, key));\n\n      if (this.resumeToken) {\n        const resumeKey = this.options.startAfter && !this.hasReceived ? 'startAfter' : 'resumeAfter';\n        Reflect.set(result, resumeKey, this.resumeToken);\n      } else if (this.startAtOperationTime && (0, utils_1.maxWireVersion)(this.server) >= 7) {\n        result.startAtOperationTime = this.startAtOperationTime;\n      }\n    }\n\n    return result;\n  }\n\n  cacheResumeToken(resumeToken) {\n    if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n      this.resumeToken = this.postBatchResumeToken;\n    } else {\n      this.resumeToken = resumeToken;\n    }\n\n    this.hasReceived = true;\n  }\n\n  _processBatch(batchName, response) {\n    const cursor = (response === null || response === void 0 ? void 0 : response.cursor) || {};\n\n    if (cursor.postBatchResumeToken) {\n      this.postBatchResumeToken = cursor.postBatchResumeToken;\n\n      if (cursor[batchName].length === 0) {\n        this.resumeToken = cursor.postBatchResumeToken;\n      }\n    }\n  }\n\n  clone() {\n    return new ChangeStreamCursor(this.topology, this.namespace, this.pipeline, { ...this.cursorOptions\n    });\n  }\n\n  _initialize(session, callback) {\n    const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, { ...this.cursorOptions,\n      ...this.options,\n      session\n    });\n    (0, execute_operation_1.executeOperation)(this.topology, aggregateOperation, (err, response) => {\n      if (err || response == null) {\n        return callback(err);\n      }\n\n      const server = aggregateOperation.server;\n\n      if (this.startAtOperationTime == null && this.resumeAfter == null && this.startAfter == null && (0, utils_1.maxWireVersion)(server) >= 7) {\n        this.startAtOperationTime = response.operationTime;\n      }\n\n      this._processBatch('firstBatch', response);\n\n      this.emit(ChangeStream.INIT, response);\n      this.emit(ChangeStream.RESPONSE); // TODO: NODE-2882\n\n      callback(undefined, {\n        server,\n        session,\n        response\n      });\n    });\n  }\n\n  _getMore(batchSize, callback) {\n    super._getMore(batchSize, (err, response) => {\n      if (err) {\n        return callback(err);\n      }\n\n      this._processBatch('nextBatch', response);\n\n      this.emit(ChangeStream.MORE, response);\n      this.emit(ChangeStream.RESPONSE);\n      callback(err, response);\n    });\n  }\n\n}\n\nexports.ChangeStreamCursor = ChangeStreamCursor;\nconst CHANGE_STREAM_EVENTS = [ChangeStream.RESUME_TOKEN_CHANGED, ChangeStream.END, ChangeStream.CLOSE];\n\nfunction setIsEmitter(changeStream) {\n  if (changeStream[kMode] === 'iterator') {\n    // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n    throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n  }\n\n  changeStream[kMode] = 'emitter';\n}\n\nfunction setIsIterator(changeStream) {\n  if (changeStream[kMode] === 'emitter') {\n    // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n    throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n  }\n\n  changeStream[kMode] = 'iterator';\n}\n/**\n * Create a new change stream cursor based on self's configuration\n * @internal\n */\n\n\nfunction createChangeStreamCursor(changeStream, options) {\n  const changeStreamStageOptions = {\n    fullDocument: options.fullDocument || 'default'\n  };\n  applyKnownOptions(changeStreamStageOptions, options, CHANGE_STREAM_OPTIONS);\n\n  if (changeStream.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n    changeStreamStageOptions.allChangesForCluster = true;\n  }\n\n  const pipeline = [{\n    $changeStream: changeStreamStageOptions\n  }].concat(changeStream.pipeline);\n  const cursorOptions = applyKnownOptions({}, options, CURSOR_OPTIONS);\n  const changeStreamCursor = new ChangeStreamCursor((0, utils_1.getTopology)(changeStream.parent), changeStream.namespace, pipeline, cursorOptions);\n\n  for (const event of CHANGE_STREAM_EVENTS) {\n    changeStreamCursor.on(event, e => changeStream.emit(event, e));\n  }\n\n  if (changeStream.listenerCount(ChangeStream.CHANGE) > 0) {\n    streamEvents(changeStream, changeStreamCursor);\n  }\n\n  return changeStreamCursor;\n}\n\nfunction applyKnownOptions(target, source, optionNames) {\n  optionNames.forEach(name => {\n    if (source[name]) {\n      target[name] = source[name];\n    }\n  });\n  return target;\n} // This method performs a basic server selection loop, satisfying the requirements of\n// ChangeStream resumability until the new SDAM layer can be used.\n\n\nconst SELECTION_TIMEOUT = 30000;\n\nfunction waitForTopologyConnected(topology, options, callback) {\n  setTimeout(() => {\n    if (options && options.start == null) {\n      options.start = (0, utils_1.now)();\n    }\n\n    const start = options.start || (0, utils_1.now)();\n    const timeout = options.timeout || SELECTION_TIMEOUT;\n\n    if (topology.isConnected()) {\n      return callback();\n    }\n\n    if ((0, utils_1.calculateDurationInMs)(start) > timeout) {\n      // TODO(NODE-3497): Replace with MongoNetworkTimeoutError\n      return callback(new error_1.MongoRuntimeError('Timed out waiting for connection'));\n    }\n\n    waitForTopologyConnected(topology, options, callback);\n  }, 500); // this is an arbitrary wait time to allow SDAM to transition\n}\n\nfunction closeWithError(changeStream, error, callback) {\n  if (!callback) {\n    changeStream.emit(ChangeStream.ERROR, error);\n  }\n\n  changeStream.close(() => callback && callback(error));\n}\n\nfunction streamEvents(changeStream, cursor) {\n  setIsEmitter(changeStream);\n  const stream = changeStream[kCursorStream] || cursor.stream();\n  changeStream[kCursorStream] = stream;\n  stream.on('data', change => processNewChange(changeStream, change));\n  stream.on('error', error => processError(changeStream, error));\n}\n\nfunction endStream(changeStream) {\n  const cursorStream = changeStream[kCursorStream];\n\n  if (cursorStream) {\n    ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n    cursorStream.destroy();\n  }\n\n  changeStream[kCursorStream] = undefined;\n}\n\nfunction processNewChange(changeStream, change, callback) {\n  var _a;\n\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    if (callback) callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  } // a null change means the cursor has been notified, implicitly closing the change stream\n\n\n  if (change == null) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    return closeWithError(changeStream, new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR), callback);\n  }\n\n  if (change && !change._id) {\n    return closeWithError(changeStream, new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR), callback);\n  } // cache the resume token\n\n\n  (_a = changeStream.cursor) === null || _a === void 0 ? void 0 : _a.cacheResumeToken(change._id); // wipe the startAtOperationTime if there was one so that there won't be a conflict\n  // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n\n  changeStream.options.startAtOperationTime = undefined; // Return the change\n\n  if (!callback) return changeStream.emit(ChangeStream.CHANGE, change);\n  return callback(undefined, change);\n}\n\nfunction processError(changeStream, error, callback) {\n  const cursor = changeStream.cursor; // If the change stream has been closed explicitly, do not process error.\n\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    if (callback) callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  } // if the resume succeeds, continue with the new cursor\n\n\n  function resumeWithCursor(newCursor) {\n    changeStream.cursor = newCursor;\n    processResumeQueue(changeStream);\n  } // otherwise, raise an error and close the change stream\n\n\n  function unresumableError(err) {\n    if (!callback) {\n      changeStream.emit(ChangeStream.ERROR, err);\n    }\n\n    changeStream.close(() => processResumeQueue(changeStream, err));\n  }\n\n  if (cursor && (0, error_1.isResumableError)(error, (0, utils_1.maxWireVersion)(cursor.server))) {\n    changeStream.cursor = undefined; // stop listening to all events from old cursor\n\n    endStream(changeStream); // close internal cursor, ignore errors\n\n    cursor.close();\n    const topology = (0, utils_1.getTopology)(changeStream.parent);\n    waitForTopologyConnected(topology, {\n      readPreference: cursor.readPreference\n    }, err => {\n      // if the topology can't reconnect, close the stream\n      if (err) return unresumableError(err); // create a new cursor, preserving the old cursor's options\n\n      const newCursor = createChangeStreamCursor(changeStream, cursor.resumeOptions); // attempt to continue in emitter mode\n\n      if (!callback) return resumeWithCursor(newCursor); // attempt to continue in iterator mode\n\n      newCursor.hasNext(err => {\n        // if there's an error immediately after resuming, close the stream\n        if (err) return unresumableError(err);\n        resumeWithCursor(newCursor);\n      });\n    });\n    return;\n  } // if initial error wasn't resumable, raise an error and close the change stream\n\n\n  return closeWithError(changeStream, error, callback);\n}\n/**\n * Safely provides a cursor across resume attempts\n *\n * @param changeStream - the parent ChangeStream\n */\n\n\nfunction getCursor(changeStream, callback) {\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  } // if a cursor exists and it is open, return it\n\n\n  if (changeStream.cursor) {\n    callback(undefined, changeStream.cursor);\n    return;\n  } // no cursor, queue callback until topology reconnects\n\n\n  changeStream[kResumeQueue].push(callback);\n}\n/**\n * Drain the resume queue when a new has become available\n *\n * @param changeStream - the parent ChangeStream\n * @param err - error getting a new cursor\n */\n\n\nfunction processResumeQueue(changeStream, err) {\n  while (changeStream[kResumeQueue].length) {\n    const request = changeStream[kResumeQueue].pop();\n    if (!request) break; // Should never occur but TS can't use the length check in the while condition\n\n    if (!err) {\n      if (changeStream[kClosed]) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        request(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n        return;\n      }\n\n      if (!changeStream.cursor) {\n        request(new error_1.MongoChangeStreamError(NO_CURSOR_ERROR));\n        return;\n      }\n    }\n\n    request(err, changeStream.cursor);\n  }\n}","map":{"version":3,"mappings":"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","names":["kResumeQueue","Symbol","kCursorStream","kClosed","kMode","CHANGE_STREAM_OPTIONS","CURSOR_OPTIONS","concat","CHANGE_DOMAIN_TYPES","COLLECTION","DATABASE","CLUSTER","NO_RESUME_TOKEN_ERROR","NO_CURSOR_ERROR","CHANGESTREAM_CLOSED_ERROR","ChangeStream","mongo_types_1","constructor","parent","pipeline","options","collection_1","type","db_1","mongo_client_1","error_1","namespace","s","readPreference","Denque","cursor","createChangeStreamCursor","on","eventName","listenerCount","streamEvents","_a","removeAllListeners","cursorStream","resumeToken","hasNext","callback","setIsIterator","cb","getCursor","err","next","error","change","push","processError","processNewChange","closed","_b","close","endStream","undefined","stream","streamOptions","tryNext","exports","ChangeStreamCursor","abstract_cursor_1","topology","_resumeToken","startAtOperationTime","startAfter","resumeAfter","token","emit","RESUME_TOKEN_CHANGED","resumeOptions","result","optionName","Reflect","has","set","get","forEach","key","deleteProperty","resumeKey","hasReceived","server","cacheResumeToken","bufferedCount","postBatchResumeToken","_processBatch","batchName","response","length","clone","cursorOptions","_initialize","session","aggregateOperation","aggregate_1","operationTime","INIT","RESPONSE","_getMore","batchSize","MORE","CHANGE_STREAM_EVENTS","END","CLOSE","setIsEmitter","changeStream","changeStreamStageOptions","fullDocument","applyKnownOptions","allChangesForCluster","$changeStream","changeStreamCursor","event","e","CHANGE","target","source","optionNames","name","SELECTION_TIMEOUT","waitForTopologyConnected","setTimeout","start","timeout","isConnected","closeWithError","ERROR","destroy","_id","resumeWithCursor","newCursor","processResumeQueue","unresumableError","request","pop"],"sources":["/Users/santiago/Documents/tulipan1637/iot-sensor/node_modules/mongodb/src/change_stream.ts"],"sourcesContent":["import Denque = require('denque');\nimport type { Readable } from 'stream';\n\nimport type { Document, Timestamp } from './bson';\nimport { Collection } from './collection';\nimport {\n  AbstractCursor,\n  AbstractCursorEvents,\n  AbstractCursorOptions,\n  CursorStreamOptions\n} from './cursor/abstract_cursor';\nimport { Db } from './db';\nimport {\n  AnyError,\n  isResumableError,\n  MongoAPIError,\n  MongoChangeStreamError,\n  MongoError,\n  MongoRuntimeError\n} from './error';\nimport { MongoClient } from './mongo_client';\nimport { InferIdType, Nullable, TypedEventEmitter } from './mongo_types';\nimport { AggregateOperation, AggregateOptions } from './operations/aggregate';\nimport type { CollationOptions, OperationParent } from './operations/command';\nimport { executeOperation, ExecutionResult } from './operations/execute_operation';\nimport type { ReadPreference } from './read_preference';\nimport type { Topology } from './sdam/topology';\nimport type { ClientSession } from './sessions';\nimport {\n  calculateDurationInMs,\n  Callback,\n  getTopology,\n  maxWireVersion,\n  maybePromise,\n  MongoDBNamespace,\n  now\n} from './utils';\n\n/** @internal */\nconst kResumeQueue = Symbol('resumeQueue');\n/** @internal */\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kMode = Symbol('mode');\n\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument'];\nconst CURSOR_OPTIONS = ['batchSize', 'maxAwaitTimeMS', 'collation', 'readPreference'].concat(\n  CHANGE_STREAM_OPTIONS\n);\n\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\n\nconst NO_RESUME_TOKEN_ERROR =\n  'A change stream document has been received that lacks a resume token (_id).';\nconst NO_CURSOR_ERROR = 'ChangeStream has no cursor';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n\n/** @public */\nexport interface ResumeOptions {\n  startAtOperationTime?: Timestamp;\n  batchSize?: number;\n  maxAwaitTimeMS?: number;\n  collation?: CollationOptions;\n  readPreference?: ReadPreference;\n}\n\n/**\n * Represents the logical starting point for a new or resuming {@link https://docs.mongodb.com/manual/changeStreams/#std-label-change-stream-resume| Change Stream} on the server.\n * @public\n */\nexport type ResumeToken = unknown;\n\n/**\n * Represents a specific point in time on a server. Can be retrieved by using {@link Db#command}\n * @public\n * @remarks\n * See {@link https://docs.mongodb.com/manual/reference/method/db.runCommand/#response| Run Command Response}\n */\nexport type OperationTime = Timestamp;\n\n/** @public */\nexport interface PipeOptions {\n  end?: boolean;\n}\n\n/**\n * Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.\n * @public\n */\nexport interface ChangeStreamOptions extends AggregateOptions {\n  /** Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred. */\n  fullDocument?: string;\n  /** The maximum amount of time for the server to wait on new documents to satisfy a change stream query. */\n  maxAwaitTimeMS?: number;\n  /** Allows you to start a changeStream after a specified event. See {@link https://docs.mongodb.com/manual/changeStreams/#resumeafter-for-change-streams|ChangeStream documentation}. */\n  resumeAfter?: ResumeToken;\n  /** Similar to resumeAfter, but will allow you to start after an invalidated event. See {@link https://docs.mongodb.com/manual/changeStreams/#startafter-for-change-streams|ChangeStream documentation}. */\n  startAfter?: ResumeToken;\n  /** Will start the changeStream after the specified operationTime. */\n  startAtOperationTime?: OperationTime;\n  /** The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}. */\n  batchSize?: number;\n}\n\n/** @public */\nexport interface ChangeStreamDocument<TSchema extends Document = Document> {\n  /**\n   * The id functions as an opaque token for use when resuming an interrupted\n   * change stream.\n   */\n  _id: InferIdType<TSchema>;\n\n  /**\n   * Describes the type of operation represented in this change notification.\n   */\n  operationType:\n    | 'insert'\n    | 'update'\n    | 'replace'\n    | 'delete'\n    | 'invalidate'\n    | 'drop'\n    | 'dropDatabase'\n    | 'rename';\n\n  /**\n   * Contains two fields: “db” and “coll” containing the database and\n   * collection name in which the change happened.\n   */\n  ns: { db: string; coll: string };\n\n  /**\n   * Only present for ops of type ‘insert’, ‘update’, ‘replace’, and\n   * ‘delete’.\n   *\n   * For unsharded collections this contains a single field, _id, with the\n   * value of the _id of the document updated.  For sharded collections,\n   * this will contain all the components of the shard key in order,\n   * followed by the _id if the _id isn’t part of the shard key.\n   */\n  documentKey?: { _id: InferIdType<TSchema> };\n\n  /**\n   * Only present for ops of type ‘update’.\n   *\n   * Contains a description of updated and removed fields in this\n   * operation.\n   */\n  updateDescription?: UpdateDescription<TSchema>;\n\n  /**\n   * Always present for operations of type ‘insert’ and ‘replace’. Also\n   * present for operations of type ‘update’ if the user has specified ‘updateLookup’\n   * in the ‘fullDocument’ arguments to the ‘$changeStream’ stage.\n   *\n   * For operations of type ‘insert’ and ‘replace’, this key will contain the\n   * document being inserted, or the new version of the document that is replacing\n   * the existing document, respectively.\n   *\n   * For operations of type ‘update’, this key will contain a copy of the full\n   * version of the document from some point after the update occurred. If the\n   * document was deleted since the updated happened, it will be null.\n   */\n  fullDocument?: TSchema;\n}\n\n/** @public */\nexport interface UpdateDescription<TSchema extends Document = Document> {\n  /**\n   * A document containing key:value pairs of names of the fields that were\n   * changed, and the new value for those fields.\n   */\n  updatedFields: Partial<TSchema>;\n\n  /**\n   * An array of field names that were removed from the document.\n   */\n  removedFields: string[];\n}\n\n/** @public */\nexport type ChangeStreamEvents<TSchema extends Document = Document> = {\n  resumeTokenChanged(token: ResumeToken): void;\n  init(response: TSchema): void;\n  more(response?: TSchema | undefined): void;\n  response(): void;\n  end(): void;\n  error(error: Error): void;\n  change(change: ChangeStreamDocument<TSchema>): void;\n} & AbstractCursorEvents;\n\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nexport class ChangeStream<TSchema extends Document = Document> extends TypedEventEmitter<\n  ChangeStreamEvents<TSchema>\n> {\n  pipeline: Document[];\n  options: ChangeStreamOptions;\n  parent: MongoClient | Db | Collection;\n  namespace: MongoDBNamespace;\n  type: symbol;\n  /** @internal */\n  cursor?: ChangeStreamCursor<TSchema>;\n  streamOptions?: CursorStreamOptions;\n  /** @internal */\n  [kResumeQueue]: Denque<Callback<ChangeStreamCursor<TSchema>>>;\n  /** @internal */\n  [kCursorStream]?: Readable;\n  /** @internal */\n  [kClosed]: boolean;\n  /** @internal */\n  [kMode]: false | 'iterator' | 'emitter';\n\n  /** @event */\n  static readonly RESPONSE = 'response' as const;\n  /** @event */\n  static readonly MORE = 'more' as const;\n  /** @event */\n  static readonly INIT = 'init' as const;\n  /** @event */\n  static readonly CLOSE = 'close' as const;\n  /**\n   * Fired for each new matching change in the specified namespace. Attaching a `change`\n   * event listener to a Change Stream will switch the stream into flowing mode. Data will\n   * then be passed as soon as it is available.\n   * @event\n   */\n  static readonly CHANGE = 'change' as const;\n  /** @event */\n  static readonly END = 'end' as const;\n  /** @event */\n  static readonly ERROR = 'error' as const;\n  /**\n   * Emitted each time the change stream stores a new resume token.\n   * @event\n   */\n  static readonly RESUME_TOKEN_CHANGED = 'resumeTokenChanged' as const;\n\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  constructor(\n    parent: OperationParent,\n    pipeline: Document[] = [],\n    options: ChangeStreamOptions = {}\n  ) {\n    super();\n\n    this.pipeline = pipeline;\n    this.options = options;\n\n    if (parent instanceof Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new MongoChangeStreamError(\n        'Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient'\n      );\n    }\n\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    }\n\n    this[kResumeQueue] = new Denque();\n\n    // Create contained Change Stream cursor\n    this.cursor = createChangeStreamCursor(this, options);\n\n    this[kClosed] = false;\n    this[kMode] = false;\n\n    // Listen for any `change` listeners being added to ChangeStream\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        streamEvents(this, this.cursor);\n      }\n    });\n\n    this.on('removeListener', eventName => {\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        this[kCursorStream]?.removeAllListeners('data');\n      }\n    });\n  }\n\n  /** @internal */\n  get cursorStream(): Readable | undefined {\n    return this[kCursorStream];\n  }\n\n  /** The cached resume token that is used to resume after the most recently returned change. */\n  get resumeToken(): ResumeToken {\n    return this.cursor?.resumeToken;\n  }\n\n  /** Check if there is any document still available in the Change Stream */\n  hasNext(): Promise<boolean>;\n  hasNext(callback: Callback<boolean>): void;\n  hasNext(callback?: Callback): Promise<boolean> | void {\n    setIsIterator(this);\n    return maybePromise(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n        cursor.hasNext(cb);\n      });\n    });\n  }\n\n  /** Get the next available document from the Change Stream. */\n  next(): Promise<ChangeStreamDocument<TSchema>>;\n  next(callback: Callback<ChangeStreamDocument<TSchema>>): void;\n  next(\n    callback?: Callback<ChangeStreamDocument<TSchema>>\n  ): Promise<ChangeStreamDocument<TSchema>> | void {\n    setIsIterator(this);\n    return maybePromise(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n        cursor.next((error, change) => {\n          if (error) {\n            this[kResumeQueue].push(() => this.next(cb));\n            processError(this, error, cb);\n            return;\n          }\n          processNewChange<TSchema>(this, change, cb);\n        });\n      });\n    });\n  }\n\n  /** Is the cursor closed */\n  get closed(): boolean {\n    return this[kClosed] || (this.cursor?.closed ?? false);\n  }\n\n  /** Close the Change Stream */\n  close(callback?: Callback): Promise<void> | void {\n    this[kClosed] = true;\n\n    return maybePromise(callback, cb => {\n      if (!this.cursor) {\n        return cb();\n      }\n\n      const cursor = this.cursor;\n      return cursor.close(err => {\n        endStream(this);\n        this.cursor = undefined;\n        return cb(err);\n      });\n    });\n  }\n\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   * @throws MongoDriverError if this.cursor is undefined\n   */\n  stream(options?: CursorStreamOptions): Readable {\n    this.streamOptions = options;\n    if (!this.cursor) throw new MongoChangeStreamError(NO_CURSOR_ERROR);\n    return this.cursor.stream(options);\n  }\n\n  /**\n   * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n   */\n  tryNext(): Promise<Document | null>;\n  tryNext(callback: Callback<Document | null>): void;\n  tryNext(callback?: Callback<Document | null>): Promise<Document | null> | void {\n    setIsIterator(this);\n    return maybePromise(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n        return cursor.tryNext(cb);\n      });\n    });\n  }\n}\n\n/** @internal */\nexport interface ChangeStreamCursorOptions extends AbstractCursorOptions {\n  startAtOperationTime?: OperationTime;\n  resumeAfter?: ResumeToken;\n  startAfter?: boolean;\n}\n\n/** @internal */\nexport class ChangeStreamCursor<TSchema extends Document = Document> extends AbstractCursor<\n  ChangeStreamDocument<TSchema>,\n  ChangeStreamEvents\n> {\n  _resumeToken: ResumeToken;\n  startAtOperationTime?: OperationTime;\n  hasReceived?: boolean;\n  resumeAfter: ResumeToken;\n  startAfter: ResumeToken;\n  options: ChangeStreamCursorOptions;\n\n  postBatchResumeToken?: ResumeToken;\n  pipeline: Document[];\n\n  constructor(\n    topology: Topology,\n    namespace: MongoDBNamespace,\n    pipeline: Document[] = [],\n    options: ChangeStreamCursorOptions = {}\n  ) {\n    super(topology, namespace, options);\n\n    this.pipeline = pipeline;\n    this.options = options;\n    this._resumeToken = null;\n    this.startAtOperationTime = options.startAtOperationTime;\n\n    if (options.startAfter) {\n      this.resumeToken = options.startAfter;\n    } else if (options.resumeAfter) {\n      this.resumeToken = options.resumeAfter;\n    }\n  }\n\n  set resumeToken(token: ResumeToken) {\n    this._resumeToken = token;\n    this.emit(ChangeStream.RESUME_TOKEN_CHANGED, token);\n  }\n\n  get resumeToken(): ResumeToken {\n    return this._resumeToken;\n  }\n\n  get resumeOptions(): ResumeOptions {\n    const result = {} as ResumeOptions;\n    for (const optionName of CURSOR_OPTIONS) {\n      if (Reflect.has(this.options, optionName)) {\n        Reflect.set(result, optionName, Reflect.get(this.options, optionName));\n      }\n    }\n\n    if (this.resumeToken || this.startAtOperationTime) {\n      ['resumeAfter', 'startAfter', 'startAtOperationTime'].forEach(key =>\n        Reflect.deleteProperty(result, key)\n      );\n\n      if (this.resumeToken) {\n        const resumeKey =\n          this.options.startAfter && !this.hasReceived ? 'startAfter' : 'resumeAfter';\n        Reflect.set(result, resumeKey, this.resumeToken);\n      } else if (this.startAtOperationTime && maxWireVersion(this.server) >= 7) {\n        result.startAtOperationTime = this.startAtOperationTime;\n      }\n    }\n\n    return result;\n  }\n\n  cacheResumeToken(resumeToken: ResumeToken): void {\n    if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n      this.resumeToken = this.postBatchResumeToken;\n    } else {\n      this.resumeToken = resumeToken;\n    }\n    this.hasReceived = true;\n  }\n\n  _processBatch(batchName: string, response?: Document): void {\n    const cursor = response?.cursor || {};\n    if (cursor.postBatchResumeToken) {\n      this.postBatchResumeToken = cursor.postBatchResumeToken;\n\n      if (cursor[batchName].length === 0) {\n        this.resumeToken = cursor.postBatchResumeToken;\n      }\n    }\n  }\n\n  clone(): AbstractCursor<ChangeStreamDocument<TSchema>> {\n    return new ChangeStreamCursor(this.topology, this.namespace, this.pipeline, {\n      ...this.cursorOptions\n    });\n  }\n\n  _initialize(session: ClientSession, callback: Callback<ExecutionResult>): void {\n    const aggregateOperation = new AggregateOperation(this.namespace, this.pipeline, {\n      ...this.cursorOptions,\n      ...this.options,\n      session\n    });\n\n    executeOperation(this.topology, aggregateOperation, (err, response) => {\n      if (err || response == null) {\n        return callback(err);\n      }\n\n      const server = aggregateOperation.server;\n      if (\n        this.startAtOperationTime == null &&\n        this.resumeAfter == null &&\n        this.startAfter == null &&\n        maxWireVersion(server) >= 7\n      ) {\n        this.startAtOperationTime = response.operationTime;\n      }\n\n      this._processBatch('firstBatch', response);\n\n      this.emit(ChangeStream.INIT, response);\n      this.emit(ChangeStream.RESPONSE);\n\n      // TODO: NODE-2882\n      callback(undefined, { server, session, response });\n    });\n  }\n\n  _getMore(batchSize: number, callback: Callback): void {\n    super._getMore(batchSize, (err, response) => {\n      if (err) {\n        return callback(err);\n      }\n\n      this._processBatch('nextBatch', response);\n\n      this.emit(ChangeStream.MORE, response);\n      this.emit(ChangeStream.RESPONSE);\n      callback(err, response);\n    });\n  }\n}\n\nconst CHANGE_STREAM_EVENTS = [\n  ChangeStream.RESUME_TOKEN_CHANGED,\n  ChangeStream.END,\n  ChangeStream.CLOSE\n];\n\nfunction setIsEmitter<TSchema>(changeStream: ChangeStream<TSchema>): void {\n  if (changeStream[kMode] === 'iterator') {\n    // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n    throw new MongoAPIError(\n      'ChangeStream cannot be used as an EventEmitter after being used as an iterator'\n    );\n  }\n  changeStream[kMode] = 'emitter';\n}\n\nfunction setIsIterator<TSchema>(changeStream: ChangeStream<TSchema>): void {\n  if (changeStream[kMode] === 'emitter') {\n    // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n    throw new MongoAPIError(\n      'ChangeStream cannot be used as an iterator after being used as an EventEmitter'\n    );\n  }\n  changeStream[kMode] = 'iterator';\n}\n/**\n * Create a new change stream cursor based on self's configuration\n * @internal\n */\nfunction createChangeStreamCursor<TSchema>(\n  changeStream: ChangeStream<TSchema>,\n  options: ChangeStreamOptions\n): ChangeStreamCursor<TSchema> {\n  const changeStreamStageOptions: Document = { fullDocument: options.fullDocument || 'default' };\n  applyKnownOptions(changeStreamStageOptions, options, CHANGE_STREAM_OPTIONS);\n  if (changeStream.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n    changeStreamStageOptions.allChangesForCluster = true;\n  }\n\n  const pipeline = [{ $changeStream: changeStreamStageOptions } as Document].concat(\n    changeStream.pipeline\n  );\n\n  const cursorOptions = applyKnownOptions({}, options, CURSOR_OPTIONS);\n  const changeStreamCursor = new ChangeStreamCursor<TSchema>(\n    getTopology(changeStream.parent),\n    changeStream.namespace,\n    pipeline,\n    cursorOptions\n  );\n\n  for (const event of CHANGE_STREAM_EVENTS) {\n    changeStreamCursor.on(event, e => changeStream.emit(event, e));\n  }\n\n  if (changeStream.listenerCount(ChangeStream.CHANGE) > 0) {\n    streamEvents(changeStream, changeStreamCursor);\n  }\n\n  return changeStreamCursor;\n}\n\nfunction applyKnownOptions(target: Document, source: Document, optionNames: string[]) {\n  optionNames.forEach(name => {\n    if (source[name]) {\n      target[name] = source[name];\n    }\n  });\n\n  return target;\n}\n\ninterface TopologyWaitOptions {\n  start?: number;\n  timeout?: number;\n  readPreference?: ReadPreference;\n}\n// This method performs a basic server selection loop, satisfying the requirements of\n// ChangeStream resumability until the new SDAM layer can be used.\nconst SELECTION_TIMEOUT = 30000;\nfunction waitForTopologyConnected(\n  topology: Topology,\n  options: TopologyWaitOptions,\n  callback: Callback\n) {\n  setTimeout(() => {\n    if (options && options.start == null) {\n      options.start = now();\n    }\n\n    const start = options.start || now();\n    const timeout = options.timeout || SELECTION_TIMEOUT;\n    if (topology.isConnected()) {\n      return callback();\n    }\n\n    if (calculateDurationInMs(start) > timeout) {\n      // TODO(NODE-3497): Replace with MongoNetworkTimeoutError\n      return callback(new MongoRuntimeError('Timed out waiting for connection'));\n    }\n\n    waitForTopologyConnected(topology, options, callback);\n  }, 500); // this is an arbitrary wait time to allow SDAM to transition\n}\n\nfunction closeWithError<T>(\n  changeStream: ChangeStream<T>,\n  error: AnyError,\n  callback?: Callback\n): void {\n  if (!callback) {\n    changeStream.emit(ChangeStream.ERROR, error);\n  }\n\n  changeStream.close(() => callback && callback(error));\n}\n\nfunction streamEvents<TSchema>(\n  changeStream: ChangeStream<TSchema>,\n  cursor: ChangeStreamCursor<TSchema>\n): void {\n  setIsEmitter(changeStream);\n  const stream = changeStream[kCursorStream] || cursor.stream();\n  changeStream[kCursorStream] = stream;\n  stream.on('data', change => processNewChange(changeStream, change));\n  stream.on('error', error => processError(changeStream, error));\n}\n\nfunction endStream<TSchema>(changeStream: ChangeStream<TSchema>): void {\n  const cursorStream = changeStream[kCursorStream];\n  if (cursorStream) {\n    ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n    cursorStream.destroy();\n  }\n\n  changeStream[kCursorStream] = undefined;\n}\n\nfunction processNewChange<TSchema>(\n  changeStream: ChangeStream<TSchema>,\n  change: Nullable<ChangeStreamDocument<TSchema>>,\n  callback?: Callback<ChangeStreamDocument<TSchema>>\n) {\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    if (callback) callback(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  }\n\n  // a null change means the cursor has been notified, implicitly closing the change stream\n  if (change == null) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    return closeWithError(changeStream, new MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR), callback);\n  }\n\n  if (change && !change._id) {\n    return closeWithError(\n      changeStream,\n      new MongoChangeStreamError(NO_RESUME_TOKEN_ERROR),\n      callback\n    );\n  }\n\n  // cache the resume token\n  changeStream.cursor?.cacheResumeToken(change._id);\n\n  // wipe the startAtOperationTime if there was one so that there won't be a conflict\n  // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n  changeStream.options.startAtOperationTime = undefined;\n\n  // Return the change\n  if (!callback) return changeStream.emit(ChangeStream.CHANGE, change);\n  return callback(undefined, change);\n}\n\nfunction processError<TSchema>(\n  changeStream: ChangeStream<TSchema>,\n  error: AnyError,\n  callback?: Callback\n) {\n  const cursor = changeStream.cursor;\n\n  // If the change stream has been closed explicitly, do not process error.\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    if (callback) callback(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  }\n\n  // if the resume succeeds, continue with the new cursor\n  function resumeWithCursor(newCursor: ChangeStreamCursor<TSchema>) {\n    changeStream.cursor = newCursor;\n    processResumeQueue(changeStream);\n  }\n\n  // otherwise, raise an error and close the change stream\n  function unresumableError(err: AnyError) {\n    if (!callback) {\n      changeStream.emit(ChangeStream.ERROR, err);\n    }\n\n    changeStream.close(() => processResumeQueue(changeStream, err));\n  }\n\n  if (cursor && isResumableError(error as MongoError, maxWireVersion(cursor.server))) {\n    changeStream.cursor = undefined;\n\n    // stop listening to all events from old cursor\n    endStream(changeStream);\n\n    // close internal cursor, ignore errors\n    cursor.close();\n\n    const topology = getTopology(changeStream.parent);\n    waitForTopologyConnected(topology, { readPreference: cursor.readPreference }, err => {\n      // if the topology can't reconnect, close the stream\n      if (err) return unresumableError(err);\n\n      // create a new cursor, preserving the old cursor's options\n      const newCursor = createChangeStreamCursor(changeStream, cursor.resumeOptions);\n\n      // attempt to continue in emitter mode\n      if (!callback) return resumeWithCursor(newCursor);\n\n      // attempt to continue in iterator mode\n      newCursor.hasNext(err => {\n        // if there's an error immediately after resuming, close the stream\n        if (err) return unresumableError(err);\n        resumeWithCursor(newCursor);\n      });\n    });\n    return;\n  }\n\n  // if initial error wasn't resumable, raise an error and close the change stream\n  return closeWithError(changeStream, error, callback);\n}\n\n/**\n * Safely provides a cursor across resume attempts\n *\n * @param changeStream - the parent ChangeStream\n */\nfunction getCursor<T>(changeStream: ChangeStream<T>, callback: Callback<ChangeStreamCursor<T>>) {\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    callback(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  }\n\n  // if a cursor exists and it is open, return it\n  if (changeStream.cursor) {\n    callback(undefined, changeStream.cursor);\n    return;\n  }\n\n  // no cursor, queue callback until topology reconnects\n  changeStream[kResumeQueue].push(callback);\n}\n\n/**\n * Drain the resume queue when a new has become available\n *\n * @param changeStream - the parent ChangeStream\n * @param err - error getting a new cursor\n */\nfunction processResumeQueue<TSchema>(changeStream: ChangeStream<TSchema>, err?: Error) {\n  while (changeStream[kResumeQueue].length) {\n    const request = changeStream[kResumeQueue].pop();\n    if (!request) break; // Should never occur but TS can't use the length check in the while condition\n\n    if (!err) {\n      if (changeStream[kClosed]) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        request(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n        return;\n      }\n      if (!changeStream.cursor) {\n        request(new MongoChangeStreamError(NO_CURSOR_ERROR));\n        return;\n      }\n    }\n    request(err, changeStream.cursor);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}