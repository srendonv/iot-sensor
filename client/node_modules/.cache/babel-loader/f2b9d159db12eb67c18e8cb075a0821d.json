{"ast":null,"code":"import _slicedToArray from \"/Users/santiago/Documents/tulipan1637/iot-sensor/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/santiago/Documents/tulipan1637/iot-sensor/app/src/features/table/Table.js\";\nimport React, { useState, useEffect } from 'react'; // import {Table} from 'react-bootstrap';\n\nimport { useTable, useBlockLayout, useGlobalFilter, useSortBy, useAsyncDebounce } from 'react-table';\nimport scrollbarWidth from './scrollbarWidth';\nimport { FixedSizeList } from 'react-window';\nimport axios from 'axios';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setSensorData, selectTable } from './tableSlice';\nvar TWO_HUNDRED_MS = 100;\n/*\n * Helper function as global filter\n*/\n\nfunction GlobalFilter(_ref) {\n  var preGlobalFilteredRows = _ref.preGlobalFilteredRows,\n      globalFilter = _ref.globalFilter,\n      setGlobalFilter = _ref.setGlobalFilter;\n\n  var _useState = useState(globalFilter),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _onChange = useAsyncDebounce(function (value) {\n    setGlobalFilter(value || undefined);\n  }, TWO_HUNDRED_MS);\n\n  return /*#__PURE__*/React.createElement(\"input\", {\n    value: value || \"\",\n    onChange: function onChange(e) {\n      setValue(e.target.value);\n\n      _onChange(e.target.value);\n    },\n    placeholder: \"Search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  });\n}\n/*\n * Table component function as global filter\n*/\n\n\nexport function Table(_ref2) {\n  var _this = this;\n\n  var columns = _ref2.columns,\n      data = _ref2.data;\n  var defaultColumn = React.useMemo(function () {\n    return {\n      width: 160\n    };\n  }, []);\n  var scrollBarSize = React.useMemo(function () {\n    return scrollbarWidth();\n  }, []);\n\n  var _useTable = useTable({\n    columns: columns,\n    data: data,\n    defaultColumn: defaultColumn\n  }, useBlockLayout, useGlobalFilter, useSortBy),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      rows = _useTable.rows,\n      totalColumnsWidth = _useTable.totalColumnsWidth,\n      prepareRow = _useTable.prepareRow,\n      globalFilter = _useTable.state.globalFilter,\n      visibleColumns = _useTable.visibleColumns,\n      preGlobalFilteredRows = _useTable.preGlobalFilteredRows,\n      setGlobalFilter = _useTable.setGlobalFilter;\n\n  var RenderRow = React.useCallback(function (_ref3) {\n    var index = _ref3.index,\n        style = _ref3.style;\n    var row = rows[index];\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps({\n      style: style\n    }), {\n      className: \"tr\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }), row.cells.map(function (cell) {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        className: \"td\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }\n      }), cell.render('Cell'));\n    }));\n  }, [prepareRow, rows]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    sorting: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    colSpan: visibleColumns.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(GlobalFilter, {\n    preGlobalFilteredRows: preGlobalFilteredRows,\n    globalFilter: globalFilter,\n    setGlobalFilter: setGlobalFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }))), headerGroups.map(function (headerGroup) {\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 15\n      }\n    }), headerGroup.headers.map(function (column) {\n      return /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(column.getSortByToggleProps()), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 19\n        }\n      }), column.render('Header'));\n    }));\n  })), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FixedSizeList, {\n    height: 500,\n    itemCount: rows.length,\n    itemSize: 45,\n    width: totalColumnsWidth + scrollBarSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, RenderRow))));\n}","map":{"version":3,"sources":["/Users/santiago/Documents/tulipan1637/iot-sensor/app/src/features/table/Table.js"],"names":["React","useState","useEffect","useTable","useBlockLayout","useGlobalFilter","useSortBy","useAsyncDebounce","scrollbarWidth","FixedSizeList","axios","useSelector","useDispatch","setSensorData","selectTable","TWO_HUNDRED_MS","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","value","setValue","onChange","undefined","e","target","Table","columns","data","defaultColumn","useMemo","width","scrollBarSize","getTableProps","getTableBodyProps","headerGroups","rows","totalColumnsWidth","prepareRow","state","visibleColumns","RenderRow","useCallback","index","style","row","getRowProps","cells","map","cell","getCellProps","render","length","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\n// import {Table} from 'react-bootstrap';\nimport {useTable, useBlockLayout, useGlobalFilter, useSortBy, useAsyncDebounce} from 'react-table';\nimport scrollbarWidth from './scrollbarWidth';\nimport { FixedSizeList } from 'react-window';\nimport axios from 'axios';\n\nimport {useSelector, useDispatch} from 'react-redux';\nimport {setSensorData, selectTable} from './tableSlice';\n\n\nconst TWO_HUNDRED_MS = 100;\n\n/*\n * Helper function as global filter\n*/\n\nfunction GlobalFilter({preGlobalFilteredRows, globalFilter,setGlobalFilter}){\n  const [value, setValue] = useState(globalFilter);\n  const onChange = useAsyncDebounce(value => {\n    setGlobalFilter(value || undefined)\n  }, TWO_HUNDRED_MS);\n  return (\n    <input  value={value || \"\"}\n            onChange={e => {\n                setValue(e.target.value);\n                onChange(e.target.value);\n              }}\n    placeholder={`Search`}\n  />);\n}\n\n/*\n * Table component function as global filter\n*/\nexport function Table({ columns, data }){\n  \n  const defaultColumn = React.useMemo(\n    () => ({\n      width: 160,\n    }),\n    []\n  )\n\n  const scrollBarSize = React.useMemo(() => scrollbarWidth(), [])\n    \n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    totalColumnsWidth,\n    prepareRow,\n    state: { globalFilter },\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter\n  } = useTable({ columns, data, defaultColumn },useBlockLayout, useGlobalFilter, useSortBy);\n\n\n  const RenderRow = React.useCallback(\n    ({ index, style }) => {\n      const row = rows[index]\n      prepareRow(row)\n      return (\n        <tr\n          {...row.getRowProps({\n            style,\n          })}\n          className=\"tr\"\n        >\n          {row.cells.map(cell => {\n            return (\n              <td {...cell.getCellProps()} className=\"td\">\n                {cell.render('Cell')}\n              </td>\n            )\n          })}\n        </tr>\n      )\n    },\n    [prepareRow, rows]\n  )\n\n      return (\n        <div>\n        <table {...getTableProps()} sorting>\n          <thead>\n          <tr>\n          <th colSpan={visibleColumns.length}>\n            <GlobalFilter\n            preGlobalFilteredRows={preGlobalFilteredRows}\n            globalFilter={globalFilter}\n            setGlobalFilter={setGlobalFilter}\n            />\n          </th>\n        </tr>\n            {headerGroups.map(headerGroup => (\n              <tr {...headerGroup.getHeaderGroupProps()} >\n                {headerGroup.headers.map(column => (\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())} >\n                    {column.render('Header')}\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n    \n          <tbody {...getTableBodyProps()}>\n            <FixedSizeList\n              height={500}\n              itemCount={rows.length}\n              itemSize={45}\n              width={totalColumnsWidth+scrollBarSize}\n            >\n              {RenderRow}\n            </FixedSizeList>\n          </tbody>\n        </table>\n        </div>\n      )\n}\n"]},"metadata":{},"sourceType":"module"}