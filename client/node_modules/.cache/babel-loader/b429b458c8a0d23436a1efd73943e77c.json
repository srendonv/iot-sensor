{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Server = void 0;\n\nconst connection_1 = require(\"../cmap/connection\");\n\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\n\nconst constants_1 = require(\"../constants\");\n\nconst error_1 = require(\"../error\");\n\nconst logger_1 = require(\"../logger\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst transactions_1 = require(\"../transactions\");\n\nconst utils_1 = require(\"../utils\");\n\nconst common_1 = require(\"./common\");\n\nconst monitor_1 = require(\"./monitor\");\n\nconst server_description_1 = require(\"./server_description\");\n\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\n\nconst kMonitor = Symbol('monitor');\n/** @internal */\n\nclass Server extends mongo_types_1.TypedEventEmitter {\n  /**\n   * Create a server\n   */\n  constructor(topology, description, options) {\n    super();\n    this.serverApi = options.serverApi;\n    const poolOptions = {\n      hostAddress: description.hostAddress,\n      ...options\n    };\n    this.s = {\n      description,\n      options,\n      logger: new logger_1.Logger('Server'),\n      state: common_1.STATE_CLOSED,\n      topology,\n      pool: new connection_pool_1.ConnectionPool(poolOptions)\n    };\n\n    for (const event of [...constants_1.CMAP_EVENTS, ...constants_1.APM_EVENTS]) {\n      this.s.pool.on(event, e => this.emit(event, e));\n    }\n\n    this.s.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, clusterTime => {\n      this.clusterTime = clusterTime;\n    }); // monitoring is disabled in load balancing mode\n\n    if (this.loadBalanced) return; // create the monitor\n\n    this[kMonitor] = new monitor_1.Monitor(this, this.s.options);\n\n    for (const event of constants_1.HEARTBEAT_EVENTS) {\n      this[kMonitor].on(event, e => this.emit(event, e));\n    }\n\n    this[kMonitor].on('resetConnectionPool', () => {\n      this.s.pool.clear();\n    });\n    this[kMonitor].on('resetServer', error => markServerUnknown(this, error));\n    this[kMonitor].on(Server.SERVER_HEARTBEAT_SUCCEEDED, event => {\n      this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n        roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n      }));\n\n      if (this.s.state === common_1.STATE_CONNECTING) {\n        stateTransition(this, common_1.STATE_CONNECTED);\n        this.emit(Server.CONNECT, this);\n      }\n    });\n  }\n\n  get clusterTime() {\n    return this.s.topology.clusterTime;\n  }\n\n  set clusterTime(clusterTime) {\n    this.s.topology.clusterTime = clusterTime;\n  }\n\n  get description() {\n    return this.s.description;\n  }\n\n  get name() {\n    return this.s.description.address;\n  }\n\n  get autoEncrypter() {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n  }\n\n  get loadBalanced() {\n    return this.s.topology.description.type === common_1.TopologyType.LoadBalanced;\n  }\n  /**\n   * Initiate server connect\n   */\n\n\n  connect() {\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CONNECTING); // If in load balancer mode we automatically set the server to\n    // a load balancer. It never transitions out of this state and\n    // has no monitor.\n\n    if (!this.loadBalanced) {\n      this[kMonitor].connect();\n    } else {\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Server.CONNECT, this);\n    }\n  }\n  /** Destroy the server connection */\n\n\n  destroy(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = Object.assign({}, {\n      force: false\n    }, options);\n\n    if (this.s.state === common_1.STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CLOSING);\n\n    if (!this.loadBalanced) {\n      this[kMonitor].close();\n    }\n\n    this.s.pool.close(options, err => {\n      stateTransition(this, common_1.STATE_CLOSED);\n      this.emit('closed');\n\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    });\n  }\n  /**\n   * Immediately schedule monitoring of this server. If there already an attempt being made\n   * this will be a no-op.\n   */\n\n\n  requestCheck() {\n    if (!this.loadBalanced) {\n      this[kMonitor].requestCheck();\n    }\n  }\n\n  command(ns, cmd, options, callback) {\n    if (typeof options === 'function') {\n      callback = options, options = {}, options = options !== null && options !== void 0 ? options : {};\n    }\n\n    if (callback == null) {\n      throw new error_1.MongoInvalidArgumentError('Callback must be provided');\n    }\n\n    if (ns.db == null || typeof ns === 'string') {\n      throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n    }\n\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      callback(new error_1.MongoServerClosedError());\n      return;\n    } // Clone the options\n\n\n    const finalOptions = Object.assign({}, options, {\n      wireProtocolCommand: false\n    }); // There are cases where we need to flag the read preference not to get sent in\n    // the command, such as pre-5.0 servers attempting to perform an aggregate write\n    // with a non-primary read preference. In this case the effective read preference\n    // (primary) is not the same as the provided and must be removed completely.\n\n    if (finalOptions.omitReadPreference) {\n      delete finalOptions.readPreference;\n    } // error if collation not supported\n\n\n    if ((0, utils_1.collationNotSupported)(this, cmd)) {\n      callback(new error_1.MongoCompatibilityError(`Server ${this.name} does not support collation`));\n      return;\n    }\n\n    const session = finalOptions.session;\n    const conn = session === null || session === void 0 ? void 0 : session.pinnedConnection; // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n    //       (and prevent them from being checked back in) at the point of operation execution.\n    //       This should be considered as part of the work for NODE-2882\n\n    if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n      this.s.pool.checkOut((err, checkedOut) => {\n        if (err || checkedOut == null) {\n          if (callback) return callback(err);\n          return;\n        }\n\n        session.pin(checkedOut);\n        this.command(ns, cmd, finalOptions, callback);\n      });\n      return;\n    }\n\n    this.s.pool.withConnection(conn, (err, conn, cb) => {\n      if (err || !conn) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.command(ns, cmd, finalOptions, makeOperationHandler(this, conn, cmd, finalOptions, cb));\n    }, callback);\n  }\n  /**\n   * Execute a query against the server\n   * @internal\n   */\n\n\n  query(ns, cmd, options, callback) {\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      callback(new error_1.MongoServerClosedError());\n      return;\n    }\n\n    this.s.pool.withConnection(undefined, (err, conn, cb) => {\n      if (err || !conn) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.query(ns, cmd, options, makeOperationHandler(this, conn, cmd, options, cb));\n    }, callback);\n  }\n  /**\n   * Execute a `getMore` against the server\n   * @internal\n   */\n\n\n  getMore(ns, cursorId, options, callback) {\n    var _a;\n\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      callback(new error_1.MongoServerClosedError());\n      return;\n    }\n\n    this.s.pool.withConnection((_a = options.session) === null || _a === void 0 ? void 0 : _a.pinnedConnection, (err, conn, cb) => {\n      if (err || !conn) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.getMore(ns, cursorId, options, makeOperationHandler(this, conn, {}, options, cb));\n    }, callback);\n  }\n  /**\n   * Execute a `killCursors` command against the server\n   * @internal\n   */\n\n\n  killCursors(ns, cursorIds, options, callback) {\n    var _a;\n\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback(new error_1.MongoServerClosedError());\n      }\n\n      return;\n    }\n\n    this.s.pool.withConnection((_a = options.session) === null || _a === void 0 ? void 0 : _a.pinnedConnection, (err, conn, cb) => {\n      if (err || !conn) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.killCursors(ns, cursorIds, options, makeOperationHandler(this, conn, {}, undefined, cb));\n    }, callback);\n  }\n\n}\n\nexports.Server = Server;\n/** @event */\n\nServer.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */\n\nServer.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */\n\nServer.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */\n\nServer.CONNECT = constants_1.CONNECT;\n/** @event */\n\nServer.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */\n\nServer.CLOSED = constants_1.CLOSED;\n/** @event */\n\nServer.ENDED = constants_1.ENDED;\n\nfunction calculateRoundTripTime(oldRtt, duration) {\n  if (oldRtt === -1) {\n    return duration;\n  }\n\n  const alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\n\nfunction markServerUnknown(server, error) {\n  // Load balancer servers can never be marked unknown.\n  if (server.loadBalanced) {\n    return;\n  }\n\n  if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n    server[kMonitor].reset();\n  }\n\n  server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, {\n    error,\n    topologyVersion: error && error.topologyVersion ? error.topologyVersion : server.description.topologyVersion\n  }));\n}\n\nfunction isPinnableCommand(cmd, session) {\n  if (session) {\n    return session.inTransaction() || 'aggregate' in cmd || 'find' in cmd || 'getMore' in cmd || 'listCollections' in cmd || 'listIndexes' in cmd;\n  }\n\n  return false;\n}\n\nfunction connectionIsStale(pool, connection) {\n  if (connection.serviceId) {\n    return connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString());\n  }\n\n  return connection.generation !== pool.generation;\n}\n\nfunction shouldHandleStateChangeError(server, err) {\n  const etv = err.topologyVersion;\n  const stv = server.description.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\n\nfunction inActiveTransaction(session, cmd) {\n  return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\n\n\nfunction isRetryableWritesEnabled(topology) {\n  return topology.s.options.retryWrites !== false;\n}\n\nfunction makeOperationHandler(server, connection, cmd, options, callback) {\n  const session = options === null || options === void 0 ? void 0 : options.session;\n  return function handleOperationResult(err, result) {\n    if (err && !connectionIsStale(server.s.pool, connection)) {\n      if (err instanceof error_1.MongoNetworkError) {\n        if (session && !session.hasEnded && session.serverSession) {\n          session.serverSession.isDirty = true;\n        } // inActiveTransaction check handles commit and abort.\n\n\n        if (inActiveTransaction(session, cmd) && !err.hasErrorLabel('TransientTransactionError')) {\n          err.addErrorLabel('TransientTransactionError');\n        }\n\n        if ((isRetryableWritesEnabled(server.s.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, utils_1.supportsRetryableWrites)(server) && !inActiveTransaction(session, cmd)) {\n          err.addErrorLabel('RetryableWriteError');\n        }\n\n        if (!(err instanceof error_1.MongoNetworkTimeoutError) || (0, error_1.isNetworkErrorBeforeHandshake)(err)) {\n          // In load balanced mode we never mark the server as unknown and always\n          // clear for the specific service id.\n          server.s.pool.clear(connection.serviceId);\n\n          if (!server.loadBalanced) {\n            markServerUnknown(server, err);\n          }\n        }\n      } else {\n        // if pre-4.4 server, then add error label if its a retryable write error\n        if ((isRetryableWritesEnabled(server.s.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, utils_1.maxWireVersion)(server) < 9 && (0, error_1.isRetryableWriteError)(err) && !inActiveTransaction(session, cmd)) {\n          err.addErrorLabel('RetryableWriteError');\n        }\n\n        if ((0, error_1.isSDAMUnrecoverableError)(err)) {\n          if (shouldHandleStateChangeError(server, err)) {\n            if ((0, utils_1.maxWireVersion)(server) <= 7 || (0, error_1.isNodeShuttingDownError)(err)) {\n              server.s.pool.clear(connection.serviceId);\n            }\n\n            if (!server.loadBalanced) {\n              markServerUnknown(server, err);\n              process.nextTick(() => server.requestCheck());\n            }\n          }\n        }\n      }\n\n      if (session && session.isPinned && err.hasErrorLabel('TransientTransactionError')) {\n        session.unpin({\n          force: true\n        });\n      }\n    }\n\n    callback(err, result);\n  };\n}","map":{"version":3,"mappings":"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","names":["stateTransition","common_1","kMonitor","Symbol","Server","mongo_types_1","constructor","topology","description","options","serverApi","poolOptions","hostAddress","s","logger","logger_1","state","pool","connection_pool_1","event","constants_1","on","e","emit","connection_1","CLUSTER_TIME_RECEIVED","clusterTime","loadBalanced","monitor_1","clear","error","markServerUnknown","SERVER_HEARTBEAT_SUCCEEDED","DESCRIPTION_RECEIVED","server_description_1","reply","roundTripTime","calculateRoundTripTime","duration","CONNECT","name","address","autoEncrypter","type","LoadBalanced","connect","destroy","callback","Object","assign","force","close","err","requestCheck","command","ns","cmd","error_1","db","finalOptions","wireProtocolCommand","omitReadPreference","readPreference","session","conn","pinnedConnection","isPinnableCommand","checkOut","checkedOut","pin","withConnection","cb","makeOperationHandler","query","undefined","getMore","cursorId","_a","killCursors","cursorIds","exports","oldRtt","alpha","server","reset","topologyVersion","inTransaction","connectionIsStale","connection","serviceId","generation","serviceGenerations","get","toHexString","shouldHandleStateChangeError","etv","stv","inActiveTransaction","isRetryableWritesEnabled","retryWrites","handleOperationResult","result","hasEnded","serverSession","isDirty","hasErrorLabel","addErrorLabel","process","nextTick","isPinned","unpin"],"sources":["/Users/santiago/Documents/tulipan1637/iot-sensor/node_modules/mongodb/src/sdam/server.ts"],"sourcesContent":["import type { Document, Long } from '../bson';\nimport {\n  CommandOptions,\n  Connection,\n  DestroyOptions,\n  GetMoreOptions,\n  QueryOptions\n} from '../cmap/connection';\nimport {\n  ConnectionPool,\n  ConnectionPoolEvents,\n  ConnectionPoolOptions\n} from '../cmap/connection_pool';\nimport {\n  APM_EVENTS,\n  CLOSED,\n  CMAP_EVENTS,\n  CONNECT,\n  DESCRIPTION_RECEIVED,\n  ENDED,\n  HEARTBEAT_EVENTS,\n  SERVER_HEARTBEAT_FAILED,\n  SERVER_HEARTBEAT_STARTED,\n  SERVER_HEARTBEAT_SUCCEEDED\n} from '../constants';\nimport type { AutoEncrypter } from '../deps';\nimport {\n  isNetworkErrorBeforeHandshake,\n  isNodeShuttingDownError,\n  isRetryableWriteError,\n  isSDAMUnrecoverableError,\n  MongoCompatibilityError,\n  MongoError,\n  MongoInvalidArgumentError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoServerClosedError\n} from '../error';\nimport { Logger } from '../logger';\nimport type { ServerApi } from '../mongo_client';\nimport { TypedEventEmitter } from '../mongo_types';\nimport type { ClientSession } from '../sessions';\nimport { isTransactionCommand } from '../transactions';\nimport {\n  Callback,\n  CallbackWithType,\n  collationNotSupported,\n  EventEmitterWithState,\n  makeStateMachine,\n  maxWireVersion,\n  MongoDBNamespace,\n  supportsRetryableWrites\n} from '../utils';\nimport {\n  ClusterTime,\n  STATE_CLOSED,\n  STATE_CLOSING,\n  STATE_CONNECTED,\n  STATE_CONNECTING,\n  TopologyType\n} from './common';\nimport type {\n  ServerHeartbeatFailedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent\n} from './events';\nimport { Monitor, MonitorOptions } from './monitor';\nimport { compareTopologyVersion, ServerDescription } from './server_description';\nimport type { Topology } from './topology';\n\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\n\n/** @internal */\nconst kMonitor = Symbol('monitor');\n\n/** @public */\nexport type ServerOptions = Omit<ConnectionPoolOptions, 'id' | 'generation' | 'hostAddress'> &\n  MonitorOptions;\n\n/** @internal */\nexport interface ServerPrivate {\n  /** The server description for this server */\n  description: ServerDescription;\n  /** A copy of the options used to construct this instance */\n  options: ServerOptions;\n  /** A logger instance */\n  logger: Logger;\n  /** The current state of the Server */\n  state: string;\n  /** The topology this server is a part of */\n  topology: Topology;\n  /** A connection pool for this server */\n  pool: ConnectionPool;\n  /** MongoDB server API version */\n  serverApi?: ServerApi;\n}\n\n/** @public */\nexport type ServerEvents = {\n  serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void;\n  serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void;\n  serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void;\n  /** Top level MongoClient doesn't emit this so it is marked: @internal */\n  connect(server: Server): void;\n  descriptionReceived(description: ServerDescription): void;\n  closed(): void;\n  ended(): void;\n} & ConnectionPoolEvents &\n  EventEmitterWithState;\n\n/** @internal */\nexport class Server extends TypedEventEmitter<ServerEvents> {\n  /** @internal */\n  s: ServerPrivate;\n  serverApi?: ServerApi;\n  hello?: Document;\n  [kMonitor]: Monitor;\n\n  /** @event */\n  static readonly SERVER_HEARTBEAT_STARTED = SERVER_HEARTBEAT_STARTED;\n  /** @event */\n  static readonly SERVER_HEARTBEAT_SUCCEEDED = SERVER_HEARTBEAT_SUCCEEDED;\n  /** @event */\n  static readonly SERVER_HEARTBEAT_FAILED = SERVER_HEARTBEAT_FAILED;\n  /** @event */\n  static readonly CONNECT = CONNECT;\n  /** @event */\n  static readonly DESCRIPTION_RECEIVED = DESCRIPTION_RECEIVED;\n  /** @event */\n  static readonly CLOSED = CLOSED;\n  /** @event */\n  static readonly ENDED = ENDED;\n\n  /**\n   * Create a server\n   */\n  constructor(topology: Topology, description: ServerDescription, options: ServerOptions) {\n    super();\n\n    this.serverApi = options.serverApi;\n\n    const poolOptions = { hostAddress: description.hostAddress, ...options };\n\n    this.s = {\n      description,\n      options,\n      logger: new Logger('Server'),\n      state: STATE_CLOSED,\n      topology,\n      pool: new ConnectionPool(poolOptions)\n    };\n\n    for (const event of [...CMAP_EVENTS, ...APM_EVENTS]) {\n      this.s.pool.on(event, (e: any) => this.emit(event, e));\n    }\n\n    this.s.pool.on(Connection.CLUSTER_TIME_RECEIVED, (clusterTime: ClusterTime) => {\n      this.clusterTime = clusterTime;\n    });\n\n    // monitoring is disabled in load balancing mode\n    if (this.loadBalanced) return;\n\n    // create the monitor\n    this[kMonitor] = new Monitor(this, this.s.options);\n\n    for (const event of HEARTBEAT_EVENTS) {\n      this[kMonitor].on(event, (e: any) => this.emit(event, e));\n    }\n\n    this[kMonitor].on('resetConnectionPool', () => {\n      this.s.pool.clear();\n    });\n\n    this[kMonitor].on('resetServer', (error: MongoError) => markServerUnknown(this, error));\n    this[kMonitor].on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event: ServerHeartbeatSucceededEvent) => {\n      this.emit(\n        Server.DESCRIPTION_RECEIVED,\n        new ServerDescription(this.description.hostAddress, event.reply, {\n          roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n        })\n      );\n\n      if (this.s.state === STATE_CONNECTING) {\n        stateTransition(this, STATE_CONNECTED);\n        this.emit(Server.CONNECT, this);\n      }\n    });\n  }\n\n  get clusterTime(): ClusterTime | undefined {\n    return this.s.topology.clusterTime;\n  }\n\n  set clusterTime(clusterTime: ClusterTime | undefined) {\n    this.s.topology.clusterTime = clusterTime;\n  }\n\n  get description(): ServerDescription {\n    return this.s.description;\n  }\n\n  get name(): string {\n    return this.s.description.address;\n  }\n\n  get autoEncrypter(): AutoEncrypter | undefined {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n  }\n\n  get loadBalanced(): boolean {\n    return this.s.topology.description.type === TopologyType.LoadBalanced;\n  }\n\n  /**\n   * Initiate server connect\n   */\n  connect(): void {\n    if (this.s.state !== STATE_CLOSED) {\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING);\n\n    // If in load balancer mode we automatically set the server to\n    // a load balancer. It never transitions out of this state and\n    // has no monitor.\n    if (!this.loadBalanced) {\n      this[kMonitor].connect();\n    } else {\n      stateTransition(this, STATE_CONNECTED);\n      this.emit(Server.CONNECT, this);\n    }\n  }\n\n  /** Destroy the server connection */\n  destroy(options?: DestroyOptions, callback?: Callback): void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = Object.assign({}, { force: false }, options);\n\n    if (this.s.state === STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n\n    if (!this.loadBalanced) {\n      this[kMonitor].close();\n    }\n\n    this.s.pool.close(options, err => {\n      stateTransition(this, STATE_CLOSED);\n      this.emit('closed');\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    });\n  }\n\n  /**\n   * Immediately schedule monitoring of this server. If there already an attempt being made\n   * this will be a no-op.\n   */\n  requestCheck(): void {\n    if (!this.loadBalanced) {\n      this[kMonitor].requestCheck();\n    }\n  }\n\n  /**\n   * Execute a command\n   * @internal\n   */\n  command(ns: MongoDBNamespace, cmd: Document, callback: Callback): void;\n  /** @internal */\n  command(\n    ns: MongoDBNamespace,\n    cmd: Document,\n    options: CommandOptions,\n    callback: Callback<Document>\n  ): void;\n  command(\n    ns: MongoDBNamespace,\n    cmd: Document,\n    options?: CommandOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): void {\n    if (typeof options === 'function') {\n      (callback = options), (options = {}), (options = options ?? {});\n    }\n\n    if (callback == null) {\n      throw new MongoInvalidArgumentError('Callback must be provided');\n    }\n\n    if (ns.db == null || typeof ns === 'string') {\n      throw new MongoInvalidArgumentError('Namespace must not be a string');\n    }\n\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      callback(new MongoServerClosedError());\n      return;\n    }\n\n    // Clone the options\n    const finalOptions = Object.assign({}, options, { wireProtocolCommand: false });\n\n    // There are cases where we need to flag the read preference not to get sent in\n    // the command, such as pre-5.0 servers attempting to perform an aggregate write\n    // with a non-primary read preference. In this case the effective read preference\n    // (primary) is not the same as the provided and must be removed completely.\n    if (finalOptions.omitReadPreference) {\n      delete finalOptions.readPreference;\n    }\n\n    // error if collation not supported\n    if (collationNotSupported(this, cmd)) {\n      callback(new MongoCompatibilityError(`Server ${this.name} does not support collation`));\n      return;\n    }\n\n    const session = finalOptions.session;\n    const conn = session?.pinnedConnection;\n\n    // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n    //       (and prevent them from being checked back in) at the point of operation execution.\n    //       This should be considered as part of the work for NODE-2882\n    if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n      this.s.pool.checkOut((err, checkedOut) => {\n        if (err || checkedOut == null) {\n          if (callback) return callback(err);\n          return;\n        }\n\n        session.pin(checkedOut);\n        this.command(ns, cmd, finalOptions, callback as Callback<Document>);\n      });\n\n      return;\n    }\n\n    this.s.pool.withConnection(\n      conn,\n      (err, conn, cb) => {\n        if (err || !conn) {\n          markServerUnknown(this, err);\n          return cb(err);\n        }\n\n        conn.command(\n          ns,\n          cmd,\n          finalOptions,\n          makeOperationHandler(this, conn, cmd, finalOptions, cb) as Callback<Document>\n        );\n      },\n      callback\n    );\n  }\n\n  /**\n   * Execute a query against the server\n   * @internal\n   */\n  query(ns: MongoDBNamespace, cmd: Document, options: QueryOptions, callback: Callback): void {\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      callback(new MongoServerClosedError());\n      return;\n    }\n\n    this.s.pool.withConnection(\n      undefined,\n      (err, conn, cb) => {\n        if (err || !conn) {\n          markServerUnknown(this, err);\n          return cb(err);\n        }\n\n        conn.query(\n          ns,\n          cmd,\n          options,\n          makeOperationHandler(this, conn, cmd, options, cb) as Callback\n        );\n      },\n      callback\n    );\n  }\n\n  /**\n   * Execute a `getMore` against the server\n   * @internal\n   */\n  getMore(\n    ns: MongoDBNamespace,\n    cursorId: Long,\n    options: GetMoreOptions,\n    callback: Callback<Document>\n  ): void {\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      callback(new MongoServerClosedError());\n      return;\n    }\n\n    this.s.pool.withConnection(\n      options.session?.pinnedConnection,\n      (err, conn, cb) => {\n        if (err || !conn) {\n          markServerUnknown(this, err);\n          return cb(err);\n        }\n\n        conn.getMore(\n          ns,\n          cursorId,\n          options,\n          makeOperationHandler(this, conn, {}, options, cb) as Callback\n        );\n      },\n      callback\n    );\n  }\n\n  /**\n   * Execute a `killCursors` command against the server\n   * @internal\n   */\n  killCursors(\n    ns: MongoDBNamespace,\n    cursorIds: Long[],\n    options: CommandOptions,\n    callback?: Callback\n  ): void {\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback(new MongoServerClosedError());\n      }\n\n      return;\n    }\n\n    this.s.pool.withConnection(\n      options.session?.pinnedConnection,\n      (err, conn, cb) => {\n        if (err || !conn) {\n          markServerUnknown(this, err);\n          return cb(err);\n        }\n\n        conn.killCursors(\n          ns,\n          cursorIds,\n          options,\n          makeOperationHandler(this, conn, {}, undefined, cb) as Callback\n        );\n      },\n      callback\n    );\n  }\n}\n\nfunction calculateRoundTripTime(oldRtt: number, duration: number): number {\n  if (oldRtt === -1) {\n    return duration;\n  }\n\n  const alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\n\nfunction markServerUnknown(server: Server, error?: MongoError) {\n  // Load balancer servers can never be marked unknown.\n  if (server.loadBalanced) {\n    return;\n  }\n\n  if (error instanceof MongoNetworkError && !(error instanceof MongoNetworkTimeoutError)) {\n    server[kMonitor].reset();\n  }\n\n  server.emit(\n    Server.DESCRIPTION_RECEIVED,\n    new ServerDescription(server.description.hostAddress, undefined, {\n      error,\n      topologyVersion:\n        error && error.topologyVersion ? error.topologyVersion : server.description.topologyVersion\n    })\n  );\n}\n\nfunction isPinnableCommand(cmd: Document, session?: ClientSession): boolean {\n  if (session) {\n    return (\n      session.inTransaction() ||\n      'aggregate' in cmd ||\n      'find' in cmd ||\n      'getMore' in cmd ||\n      'listCollections' in cmd ||\n      'listIndexes' in cmd\n    );\n  }\n\n  return false;\n}\n\nfunction connectionIsStale(pool: ConnectionPool, connection: Connection) {\n  if (connection.serviceId) {\n    return (\n      connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString())\n    );\n  }\n\n  return connection.generation !== pool.generation;\n}\n\nfunction shouldHandleStateChangeError(server: Server, err: MongoError) {\n  const etv = err.topologyVersion;\n  const stv = server.description.topologyVersion;\n  return compareTopologyVersion(stv, etv) < 0;\n}\n\nfunction inActiveTransaction(session: ClientSession | undefined, cmd: Document) {\n  return session && session.inTransaction() && !isTransactionCommand(cmd);\n}\n\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology: Topology) {\n  return topology.s.options.retryWrites !== false;\n}\n\nfunction makeOperationHandler(\n  server: Server,\n  connection: Connection,\n  cmd: Document,\n  options: CommandOptions | GetMoreOptions | undefined,\n  callback: Callback\n): CallbackWithType<MongoError, Document> {\n  const session = options?.session;\n  return function handleOperationResult(err, result) {\n    if (err && !connectionIsStale(server.s.pool, connection)) {\n      if (err instanceof MongoNetworkError) {\n        if (session && !session.hasEnded && session.serverSession) {\n          session.serverSession.isDirty = true;\n        }\n\n        // inActiveTransaction check handles commit and abort.\n        if (inActiveTransaction(session, cmd) && !err.hasErrorLabel('TransientTransactionError')) {\n          err.addErrorLabel('TransientTransactionError');\n        }\n\n        if (\n          (isRetryableWritesEnabled(server.s.topology) || isTransactionCommand(cmd)) &&\n          supportsRetryableWrites(server) &&\n          !inActiveTransaction(session, cmd)\n        ) {\n          err.addErrorLabel('RetryableWriteError');\n        }\n\n        if (!(err instanceof MongoNetworkTimeoutError) || isNetworkErrorBeforeHandshake(err)) {\n          // In load balanced mode we never mark the server as unknown and always\n          // clear for the specific service id.\n\n          server.s.pool.clear(connection.serviceId);\n          if (!server.loadBalanced) {\n            markServerUnknown(server, err);\n          }\n        }\n      } else {\n        // if pre-4.4 server, then add error label if its a retryable write error\n        if (\n          (isRetryableWritesEnabled(server.s.topology) || isTransactionCommand(cmd)) &&\n          maxWireVersion(server) < 9 &&\n          isRetryableWriteError(err) &&\n          !inActiveTransaction(session, cmd)\n        ) {\n          err.addErrorLabel('RetryableWriteError');\n        }\n\n        if (isSDAMUnrecoverableError(err)) {\n          if (shouldHandleStateChangeError(server, err)) {\n            if (maxWireVersion(server) <= 7 || isNodeShuttingDownError(err)) {\n              server.s.pool.clear(connection.serviceId);\n            }\n\n            if (!server.loadBalanced) {\n              markServerUnknown(server, err);\n              process.nextTick(() => server.requestCheck());\n            }\n          }\n        }\n      }\n\n      if (session && session.isPinned && err.hasErrorLabel('TransientTransactionError')) {\n        session.unpin({ force: true });\n      }\n    }\n\n    callback(err, result);\n  };\n}\n"]},"metadata":{},"sourceType":"script"}