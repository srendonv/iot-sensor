{"ast":null,"code":"var _jsxFileName = \"/Users/santiago/Documents/tulipan1637/iot-sensor/app/src/features/table/TableV2.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Table } from 'react-bootstrap';\nimport { useTable, useBlockLayout, useGlobalFilter, useSortBy, useAsyncDebounce } from 'react-table';\nimport scrollbarWidth from './scrollbarWidth';\nimport { FixedSizeList } from 'react-window';\nimport axios from 'axios';\nimport { setSensorData, selectTable } from './tableSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWO_HUNDRED_MS = 100;\n/*\n * Helper function as global filter\n*/\n\nfunction GlobalFilter(_ref) {\n  _s();\n\n  let {\n    preGlobalFilteredRows,\n    globalFilter,\n    setGlobalFilter\n  } = _ref;\n  const [value, setValue] = useState(globalFilter);\n  const onChange = useAsyncDebounce(value => {\n    setGlobalFilter(value || undefined);\n  }, TWO_HUNDRED_MS);\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    value: value || \"\",\n    onChange: e => {\n      setValue(e.target.value);\n      onChange(e.target.value);\n    },\n    placeholder: `Search`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n/*\n * Table component function as global filter\n*/\n\n\n_s(GlobalFilter, \"u76gItWTPW4jhTYSCcNG7/LfbyA=\", false, function () {\n  return [useAsyncDebounce];\n});\n\n_c = GlobalFilter;\nexport function TableV2(_ref2) {\n  _s2();\n\n  let {\n    columns\n  } = _ref2;\n  const count = useSelector(selectTable);\n  const dispatch = useDispatch();\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/listings');\n      const SensorData = await response.data;\n      dispatch(setSensorData(SensorData));\n    } catch (e) {\n      console.log(e.stack);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const defaultColumn = React.useMemo(() => ({\n    width: 160\n  }), []);\n  const scrollBarSize = React.useMemo(() => scrollbarWidth(), []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    totalColumnsWidth,\n    prepareRow,\n    state: {\n      globalFilter\n    },\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter\n  } = useTable({\n    columns,\n    count,\n    defaultColumn\n  }, useBlockLayout, useGlobalFilter, useSortBy);\n  const RenderRow = React.useCallback(_ref3 => {\n    let {\n      index,\n      style\n    } = _ref3;\n    const row = rows[index];\n    prepareRow(row);\n    return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps({\n        style\n      }),\n      className: \"tr\",\n      children: row.cells.map(cell => {\n        return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n          className: \"td\",\n          children: cell.render('Cell')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this);\n  }, [prepareRow, rows]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Table, { ...getTableProps(),\n      sorting: true,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"th\", {\n            colSpan: visibleColumns.length,\n            children: /*#__PURE__*/_jsxDEV(GlobalFilter, {\n              preGlobalFilteredRows: preGlobalFilteredRows,\n              globalFilter: globalFilter,\n              setGlobalFilter: setGlobalFilter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(column.getSortByToggleProps()),\n            children: column.render('Header')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: /*#__PURE__*/_jsxDEV(FixedSizeList, {\n          height: 500,\n          itemCount: rows.length,\n          itemSize: 45,\n          width: totalColumnsWidth + scrollBarSize,\n          children: RenderRow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(TableV2, \"GUzuODVUAeyWyNMQoIMzoa4dgUY=\", false, function () {\n  return [useSelector, useDispatch, useTable];\n});\n\n_c2 = TableV2;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GlobalFilter\");\n$RefreshReg$(_c2, \"TableV2\");","map":{"version":3,"sources":["/Users/santiago/Documents/tulipan1637/iot-sensor/app/src/features/table/TableV2.js"],"names":["React","useState","useEffect","Table","useTable","useBlockLayout","useGlobalFilter","useSortBy","useAsyncDebounce","scrollbarWidth","FixedSizeList","axios","setSensorData","selectTable","useSelector","useDispatch","TWO_HUNDRED_MS","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","value","setValue","onChange","undefined","e","target","TableV2","columns","count","dispatch","fetchData","response","get","SensorData","data","console","log","stack","defaultColumn","useMemo","width","scrollBarSize","getTableProps","getTableBodyProps","headerGroups","rows","totalColumnsWidth","prepareRow","state","visibleColumns","RenderRow","useCallback","index","style","row","getRowProps","cells","map","cell","getCellProps","render","length","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport {Table} from 'react-bootstrap';\nimport {useTable, useBlockLayout, useGlobalFilter, useSortBy, useAsyncDebounce} from 'react-table';\nimport scrollbarWidth from './scrollbarWidth';\nimport { FixedSizeList } from 'react-window';\nimport axios from 'axios';\n\nimport {setSensorData, selectTable} from './tableSlice';\nimport {useSelector, useDispatch} from 'react-redux';\n\nconst TWO_HUNDRED_MS = 100;\n\n/*\n * Helper function as global filter\n*/\n\nfunction GlobalFilter({preGlobalFilteredRows, globalFilter,setGlobalFilter}){\n  const [value, setValue] = useState(globalFilter);\n  const onChange = useAsyncDebounce(value => {\n    setGlobalFilter(value || undefined)\n  }, TWO_HUNDRED_MS);\n  return (\n    <input  value={value || \"\"}\n            onChange={e => {\n                setValue(e.target.value);\n                onChange(e.target.value);\n              }}\n    placeholder={`Search`}\n  />);\n}\n\n/*\n * Table component function as global filter\n*/\nexport function TableV2({ columns }){\n\n  const count = useSelector(selectTable);\n  const dispatch = useDispatch();\n\n  const fetchData = async ()=>{\n    try{\n      const response = await axios.get('http://localhost:5000/listings');\n      const SensorData = await response.data;\n      dispatch(setSensorData(SensorData));\n    }catch(e){\n      console.log(e.stack);\n    }\n  }\n\n  useEffect( ()=> {fetchData()},[]);\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      width: 160,\n    }),\n    []\n  )\n\n  const scrollBarSize = React.useMemo(() => scrollbarWidth(), [])\n    \n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    totalColumnsWidth,\n    prepareRow,\n    state: { globalFilter },\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter\n  } = useTable({ columns, count, defaultColumn },useBlockLayout, useGlobalFilter, useSortBy);\n\n\n  const RenderRow = React.useCallback(\n    ({ index, style }) => {\n      const row = rows[index]\n      prepareRow(row)\n      return (\n        <tr\n          {...row.getRowProps({\n            style,\n          })}\n          className=\"tr\"\n        >\n          {row.cells.map(cell => {\n            return (\n              <td {...cell.getCellProps()} className=\"td\">\n                {cell.render('Cell')}\n              </td>\n            )\n          })}\n        </tr>\n      )\n    },\n    [prepareRow, rows]\n  )\n\n      return (\n        <div>\n        <Table {...getTableProps()} sorting>\n          <thead>\n          <tr>\n          <th colSpan={visibleColumns.length}>\n            <GlobalFilter\n            preGlobalFilteredRows={preGlobalFilteredRows}\n            globalFilter={globalFilter}\n            setGlobalFilter={setGlobalFilter}\n            />\n          </th>\n        </tr>\n            {headerGroups.map(headerGroup => (\n              <tr {...headerGroup.getHeaderGroupProps()} >\n                {headerGroup.headers.map(column => (\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())} >\n                    {column.render('Header')}\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n    \n          <tbody {...getTableBodyProps()}>\n            <FixedSizeList\n              height={500}\n              itemCount={rows.length}\n              itemSize={45}\n              width={totalColumnsWidth+scrollBarSize}\n            >\n              {RenderRow}\n            </FixedSizeList>\n          </tbody>\n        </Table>\n        </div>\n      )\n}\n"]},"metadata":{},"sourceType":"module"}