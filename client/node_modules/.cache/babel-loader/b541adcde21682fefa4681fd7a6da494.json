{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport _assertThisInitialized from '@babel/runtime/helpers/esm/assertThisInitialized';\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose'; // Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nvar hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\nvar now = hasNativePerformanceNow ? function () {\n  return performance.now();\n} : function () {\n  return Date.now();\n};\n\nfunction cancelTimeout(timeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nfunction requestTimeout(callback, delay) {\n  var start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  var timeoutID = {\n    id: requestAnimationFrame(tick)\n  };\n  return timeoutID;\n}\n\nvar size = -1; // This utility copied from \"dom-helpers\" package.\n\nfunction getScrollbarSize(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n\n  if (size === -1 || recalculate) {\n    var div = document.createElement('div');\n    var style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n    document.body.appendChild(div);\n    size = div.offsetWidth - div.clientWidth;\n    document.body.removeChild(div);\n  }\n\n  return size;\n}\n\nvar cachedRTLResult = null; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\n\nfunction getRTLOffsetType(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n\n  if (cachedRTLResult === null || recalculate) {\n    var outerDiv = document.createElement('div');\n    var outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n    var innerDiv = document.createElement('div');\n    var innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n    outerDiv.appendChild(innerDiv);\n    document.body.appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    document.body.removeChild(outerDiv);\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n\nvar IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nvar defaultItemKey = function defaultItemKey(_ref) {\n  var columnIndex = _ref.columnIndex,\n      data = _ref.data,\n      rowIndex = _ref.rowIndex;\n  return rowIndex + \":\" + columnIndex;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\n\nvar devWarningsOverscanCount = null;\nvar devWarningsOverscanRowsColumnsCount = null;\nvar devWarningsTagName = null;\n\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = /*#__PURE__*/new WeakSet();\n    devWarningsOverscanRowsColumnsCount = /*#__PURE__*/new WeakSet();\n    devWarningsTagName = /*#__PURE__*/new WeakSet();\n  }\n}\n\nfunction createGridComponent(_ref2) {\n  var _class, _temp;\n\n  var getColumnOffset = _ref2.getColumnOffset,\n      getColumnStartIndexForOffset = _ref2.getColumnStartIndexForOffset,\n      getColumnStopIndexForStartIndex = _ref2.getColumnStopIndexForStartIndex,\n      getColumnWidth = _ref2.getColumnWidth,\n      getEstimatedTotalHeight = _ref2.getEstimatedTotalHeight,\n      getEstimatedTotalWidth = _ref2.getEstimatedTotalWidth,\n      getOffsetForColumnAndAlignment = _ref2.getOffsetForColumnAndAlignment,\n      getOffsetForRowAndAlignment = _ref2.getOffsetForRowAndAlignment,\n      getRowHeight = _ref2.getRowHeight,\n      getRowOffset = _ref2.getRowOffset,\n      getRowStartIndexForOffset = _ref2.getRowStartIndexForOffset,\n      getRowStopIndexForStartIndex = _ref2.getRowStopIndexForStartIndex,\n      initInstanceProps = _ref2.initInstanceProps,\n      shouldResetStyleCacheOnItemSizeChange = _ref2.shouldResetStyleCacheOnItemSizeChange,\n      validateProps = _ref2.validateProps;\n  return _temp = _class = /*#__PURE__*/function (_PureComponent) {\n    _inheritsLoose(Grid, _PureComponent); // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n\n\n    function Grid(props) {\n      var _this;\n\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_assertThisInitialized(_this)));\n      _this._resetIsScrollingTimeoutId = null;\n      _this._outerRef = void 0;\n      _this.state = {\n        instance: _assertThisInitialized(_assertThisInitialized(_this)),\n        isScrolling: false,\n        horizontalScrollDirection: 'forward',\n        scrollLeft: typeof _this.props.initialScrollLeft === 'number' ? _this.props.initialScrollLeft : 0,\n        scrollTop: typeof _this.props.initialScrollTop === 'number' ? _this.props.initialScrollTop : 0,\n        scrollUpdateWasRequested: false,\n        verticalScrollDirection: 'forward'\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = memoizeOne(function (overscanColumnStartIndex, overscanColumnStopIndex, overscanRowStartIndex, overscanRowStopIndex, visibleColumnStartIndex, visibleColumnStopIndex, visibleRowStartIndex, visibleRowStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanColumnStartIndex: overscanColumnStartIndex,\n          overscanColumnStopIndex: overscanColumnStopIndex,\n          overscanRowStartIndex: overscanRowStartIndex,\n          overscanRowStopIndex: overscanRowStopIndex,\n          visibleColumnStartIndex: visibleColumnStartIndex,\n          visibleColumnStopIndex: visibleColumnStopIndex,\n          visibleRowStartIndex: visibleRowStartIndex,\n          visibleRowStopIndex: visibleRowStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = memoizeOne(function (scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          horizontalScrollDirection: horizontalScrollDirection,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          verticalScrollDirection: verticalScrollDirection,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n\n      _this._getItemStyle = function (rowIndex, columnIndex) {\n        var _this$props = _this.props,\n            columnWidth = _this$props.columnWidth,\n            direction = _this$props.direction,\n            rowHeight = _this$props.rowHeight;\n\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && columnWidth, shouldResetStyleCacheOnItemSizeChange && direction, shouldResetStyleCacheOnItemSizeChange && rowHeight);\n\n        var key = rowIndex + \":\" + columnIndex;\n        var style;\n\n        if (itemStyleCache.hasOwnProperty(key)) {\n          style = itemStyleCache[key];\n        } else {\n          var _offset = getColumnOffset(_this.props, columnIndex, _this._instanceProps);\n\n          var isRtl = direction === 'rtl';\n          itemStyleCache[key] = style = {\n            position: 'absolute',\n            left: isRtl ? undefined : _offset,\n            right: isRtl ? _offset : undefined,\n            top: getRowOffset(_this.props, rowIndex, _this._instanceProps),\n            height: getRowHeight(_this.props, rowIndex, _this._instanceProps),\n            width: getColumnWidth(_this.props, columnIndex, _this._instanceProps)\n          };\n        }\n\n        return style;\n      };\n\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = memoizeOne(function (_, __, ___) {\n        return {};\n      });\n\n      _this._onScroll = function (event) {\n        var _event$currentTarget = event.currentTarget,\n            clientHeight = _event$currentTarget.clientHeight,\n            clientWidth = _event$currentTarget.clientWidth,\n            scrollLeft = _event$currentTarget.scrollLeft,\n            scrollTop = _event$currentTarget.scrollTop,\n            scrollHeight = _event$currentTarget.scrollHeight,\n            scrollWidth = _event$currentTarget.scrollWidth;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n\n          var direction = _this.props.direction; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n\n          var calculatedScrollLeft = scrollLeft;\n\n          if (direction === 'rtl') {\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                calculatedScrollLeft = -scrollLeft;\n                break;\n\n              case 'positive-descending':\n                calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          calculatedScrollLeft = Math.max(0, Math.min(calculatedScrollLeft, scrollWidth - clientWidth));\n          var calculatedScrollTop = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n            scrollLeft: calculatedScrollLeft,\n            scrollTop: calculatedScrollTop,\n            verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL);\n      };\n\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1);\n        });\n      };\n\n      return _this;\n    }\n\n    Grid.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n\n    var _proto = Grid.prototype;\n\n    _proto.scrollTo = function scrollTo(_ref3) {\n      var scrollLeft = _ref3.scrollLeft,\n          scrollTop = _ref3.scrollTop;\n\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(function (prevState) {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward'\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _proto.scrollToItem = function scrollToItem(_ref4) {\n      var _ref4$align = _ref4.align,\n          align = _ref4$align === void 0 ? 'auto' : _ref4$align,\n          columnIndex = _ref4.columnIndex,\n          rowIndex = _ref4.rowIndex;\n      var _this$props2 = this.props,\n          columnCount = _this$props2.columnCount,\n          height = _this$props2.height,\n          rowCount = _this$props2.rowCount,\n          width = _this$props2.width;\n      var _this$state = this.state,\n          scrollLeft = _this$state.scrollLeft,\n          scrollTop = _this$state.scrollTop;\n      var scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps); // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n\n      var horizontalScrollbarSize = estimatedTotalWidth > width ? scrollbarSize : 0;\n      var verticalScrollbarSize = estimatedTotalHeight > height ? scrollbarSize : 0;\n      this.scrollTo({\n        scrollLeft: columnIndex !== undefined ? getOffsetForColumnAndAlignment(this.props, columnIndex, align, scrollLeft, this._instanceProps, verticalScrollbarSize) : scrollLeft,\n        scrollTop: rowIndex !== undefined ? getOffsetForRowAndAlignment(this.props, rowIndex, align, scrollTop, this._instanceProps, horizontalScrollbarSize) : scrollTop\n      });\n    };\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props3 = this.props,\n          initialScrollLeft = _this$props3.initialScrollLeft,\n          initialScrollTop = _this$props3.initialScrollTop;\n\n      if (this._outerRef != null) {\n        var outerRef = this._outerRef;\n\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var direction = this.props.direction;\n      var _this$state2 = this.state,\n          scrollLeft = _this$state2.scrollLeft,\n          scrollTop = _this$state2.scrollTop,\n          scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        var outerRef = this._outerRef;\n\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n\n            default:\n              var clientWidth = outerRef.clientWidth,\n                  scrollWidth = outerRef.scrollWidth;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n\n    _proto.render = function render() {\n      var _this$props4 = this.props,\n          children = _this$props4.children,\n          className = _this$props4.className,\n          columnCount = _this$props4.columnCount,\n          direction = _this$props4.direction,\n          height = _this$props4.height,\n          innerRef = _this$props4.innerRef,\n          innerElementType = _this$props4.innerElementType,\n          innerTagName = _this$props4.innerTagName,\n          itemData = _this$props4.itemData,\n          _this$props4$itemKey = _this$props4.itemKey,\n          itemKey = _this$props4$itemKey === void 0 ? defaultItemKey : _this$props4$itemKey,\n          outerElementType = _this$props4.outerElementType,\n          outerTagName = _this$props4.outerTagName,\n          rowCount = _this$props4.rowCount,\n          style = _this$props4.style,\n          useIsScrolling = _this$props4.useIsScrolling,\n          width = _this$props4.width;\n      var isScrolling = this.state.isScrolling;\n\n      var _this$_getHorizontalR = this._getHorizontalRangeToRender(),\n          columnStartIndex = _this$_getHorizontalR[0],\n          columnStopIndex = _this$_getHorizontalR[1];\n\n      var _this$_getVerticalRan = this._getVerticalRangeToRender(),\n          rowStartIndex = _this$_getVerticalRan[0],\n          rowStopIndex = _this$_getVerticalRan[1];\n\n      var items = [];\n\n      if (columnCount > 0 && rowCount) {\n        for (var _rowIndex = rowStartIndex; _rowIndex <= rowStopIndex; _rowIndex++) {\n          for (var _columnIndex = columnStartIndex; _columnIndex <= columnStopIndex; _columnIndex++) {\n            items.push(createElement(children, {\n              columnIndex: _columnIndex,\n              data: itemData,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              key: itemKey({\n                columnIndex: _columnIndex,\n                data: itemData,\n                rowIndex: _rowIndex\n              }),\n              rowIndex: _rowIndex,\n              style: this._getItemStyle(_rowIndex, _columnIndex)\n            }));\n          }\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps);\n      return createElement(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: this._onScroll,\n        ref: this._outerRefSetter,\n        style: _extends({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, createElement(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: estimatedTotalHeight,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: estimatedTotalWidth\n        }\n      }));\n    };\n\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      var _this$props5 = this.props,\n          columnCount = _this$props5.columnCount,\n          onItemsRendered = _this$props5.onItemsRendered,\n          onScroll = _this$props5.onScroll,\n          rowCount = _this$props5.rowCount;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          var _this$_getHorizontalR2 = this._getHorizontalRangeToRender(),\n              _overscanColumnStartIndex = _this$_getHorizontalR2[0],\n              _overscanColumnStopIndex = _this$_getHorizontalR2[1],\n              _visibleColumnStartIndex = _this$_getHorizontalR2[2],\n              _visibleColumnStopIndex = _this$_getHorizontalR2[3];\n\n          var _this$_getVerticalRan2 = this._getVerticalRangeToRender(),\n              _overscanRowStartIndex = _this$_getVerticalRan2[0],\n              _overscanRowStopIndex = _this$_getVerticalRan2[1],\n              _visibleRowStartIndex = _this$_getVerticalRan2[2],\n              _visibleRowStopIndex = _this$_getVerticalRan2[3];\n\n          this._callOnItemsRendered(_overscanColumnStartIndex, _overscanColumnStopIndex, _overscanRowStartIndex, _overscanRowStopIndex, _visibleColumnStartIndex, _visibleColumnStopIndex, _visibleRowStartIndex, _visibleRowStopIndex);\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        var _this$state3 = this.state,\n            _horizontalScrollDirection = _this$state3.horizontalScrollDirection,\n            _scrollLeft = _this$state3.scrollLeft,\n            _scrollTop = _this$state3.scrollTop,\n            _scrollUpdateWasRequested = _this$state3.scrollUpdateWasRequested,\n            _verticalScrollDirection = _this$state3.verticalScrollDirection;\n\n        this._callOnScroll(_scrollLeft, _scrollTop, _horizontalScrollDirection, _verticalScrollDirection, _scrollUpdateWasRequested);\n      }\n    }; // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n\n\n    _proto._getHorizontalRangeToRender = function _getHorizontalRangeToRender() {\n      var _this$props6 = this.props,\n          columnCount = _this$props6.columnCount,\n          overscanColumnCount = _this$props6.overscanColumnCount,\n          overscanColumnsCount = _this$props6.overscanColumnsCount,\n          overscanCount = _this$props6.overscanCount,\n          rowCount = _this$props6.rowCount;\n      var _this$state4 = this.state,\n          horizontalScrollDirection = _this$state4.horizontalScrollDirection,\n          isScrolling = _this$state4.isScrolling,\n          scrollLeft = _this$state4.scrollLeft;\n      var overscanCountResolved = overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getColumnStartIndexForOffset(this.props, scrollLeft, this._instanceProps);\n      var stopIndex = getColumnStopIndexForStartIndex(this.props, startIndex, scrollLeft, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || horizontalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || horizontalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    _proto._getVerticalRangeToRender = function _getVerticalRangeToRender() {\n      var _this$props7 = this.props,\n          columnCount = _this$props7.columnCount,\n          overscanCount = _this$props7.overscanCount,\n          overscanRowCount = _this$props7.overscanRowCount,\n          overscanRowsCount = _this$props7.overscanRowsCount,\n          rowCount = _this$props7.rowCount;\n      var _this$state5 = this.state,\n          isScrolling = _this$state5.isScrolling,\n          verticalScrollDirection = _this$state5.verticalScrollDirection,\n          scrollTop = _this$state5.scrollTop;\n      var overscanCountResolved = overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getRowStartIndexForOffset(this.props, scrollTop, this._instanceProps);\n      var stopIndex = getRowStopIndexForStartIndex(this.props, startIndex, scrollTop, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || verticalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || verticalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    return Grid;\n  }(PureComponent), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    useIsScrolling: false\n  }, _temp;\n}\n\nvar validateSharedProps = function validateSharedProps(_ref5, _ref6) {\n  var children = _ref5.children,\n      direction = _ref5.direction,\n      height = _ref5.height,\n      innerTagName = _ref5.innerTagName,\n      outerTagName = _ref5.outerTagName,\n      overscanColumnsCount = _ref5.overscanColumnsCount,\n      overscanCount = _ref5.overscanCount,\n      overscanRowsCount = _ref5.overscanRowsCount,\n      width = _ref5.width;\n  var instance = _ref6.instance;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn('The overscanCount prop has been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n\n    if (typeof overscanColumnsCount === 'number' || typeof overscanRowsCount === 'number') {\n      if (devWarningsOverscanRowsColumnsCount && !devWarningsOverscanRowsColumnsCount.has(instance)) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn('The overscanColumnsCount and overscanRowsCount props have been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    }\n\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n\n    if (typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Grids must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    }\n\n    if (typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Grids must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\n\nvar DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\nvar getEstimatedTotalHeight = function getEstimatedTotalHeight(_ref, _ref2) {\n  var rowCount = _ref.rowCount;\n  var rowMetadataMap = _ref2.rowMetadataMap,\n      estimatedRowHeight = _ref2.estimatedRowHeight,\n      lastMeasuredRowIndex = _ref2.lastMeasuredRowIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n\n  if (lastMeasuredRowIndex >= 0) {\n    var itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nvar getEstimatedTotalWidth = function getEstimatedTotalWidth(_ref3, _ref4) {\n  var columnCount = _ref3.columnCount;\n  var columnMetadataMap = _ref4.columnMetadataMap,\n      estimatedColumnWidth = _ref4.estimatedColumnWidth,\n      lastMeasuredColumnIndex = _ref4.lastMeasuredColumnIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n\n  if (lastMeasuredColumnIndex >= 0) {\n    var itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nvar getItemMetadata = function getItemMetadata(itemType, props, index, instanceProps) {\n  var itemMetadataMap, itemSize, lastMeasuredIndex;\n\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = props.columnWidth;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = props.rowHeight;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n\n  return itemMetadataMap[index];\n};\n\nvar findNearestItem = function findNearestItem(itemType, props, instanceProps, offset) {\n  var itemMetadataMap, lastMeasuredIndex;\n\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(itemType, props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(itemType, props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\n\nvar findNearestItemBinarySearch = function findNearestItemBinarySearch(itemType, props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata(itemType, props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nvar findNearestItemExponentialSearch = function findNearestItemExponentialSearch(itemType, props, instanceProps, index, offset) {\n  var itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  var interval = 1;\n\n  while (index < itemCount && getItemMetadata(itemType, props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(itemType, props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\n\nvar getOffsetForIndexAndAlignment = function getOffsetForIndexAndAlignment(itemType, props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n  var size = itemType === 'column' ? props.width : props.height;\n  var itemMetadata = getItemMetadata(itemType, props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n\n  var estimatedTotalSize = itemType === 'column' ? getEstimatedTotalWidth(props, instanceProps) : getEstimatedTotalHeight(props, instanceProps);\n  var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n  var minOffset = Math.max(0, itemMetadata.offset - size + scrollbarSize + itemMetadata.size);\n\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n\n    case 'end':\n      return minOffset;\n\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n\n  }\n};\n\nvar VariableSizeGrid = /*#__PURE__*/createGridComponent({\n  getColumnOffset: function getColumnOffset(props, index, instanceProps) {\n    return getItemMetadata('column', props, index, instanceProps).offset;\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props, scrollLeft, instanceProps) {\n    return findNearestItem('column', props, instanceProps, scrollLeft);\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, instanceProps) {\n    var columnCount = props.columnCount,\n        width = props.width;\n    var itemMetadata = getItemMetadata('column', props, startIndex, instanceProps);\n    var maxOffset = scrollLeft + width;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  getColumnWidth: function getColumnWidth(props, index, instanceProps) {\n    return instanceProps.columnMetadataMap[index].size;\n  },\n  getEstimatedTotalHeight: getEstimatedTotalHeight,\n  getEstimatedTotalWidth: getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('column', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('row', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getRowOffset: function getRowOffset(props, index, instanceProps) {\n    return getItemMetadata('row', props, index, instanceProps).offset;\n  },\n  getRowHeight: function getRowHeight(props, index, instanceProps) {\n    return instanceProps.rowMetadataMap[index].size;\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(props, scrollTop, instanceProps) {\n    return findNearestItem('row', props, instanceProps, scrollTop);\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props, startIndex, scrollTop, instanceProps) {\n    var rowCount = props.rowCount,\n        height = props.height;\n    var itemMetadata = getItemMetadata('row', props, startIndex, instanceProps);\n    var maxOffset = scrollTop + height;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref5 = props,\n        estimatedColumnWidth = _ref5.estimatedColumnWidth,\n        estimatedRowHeight = _ref5.estimatedRowHeight;\n    var instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {}\n    };\n\n    instance.resetAfterColumnIndex = function (columnIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instance.resetAfterIndices({\n        columnIndex: columnIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n\n    instance.resetAfterRowIndex = function (rowIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instance.resetAfterIndices({\n        rowIndex: rowIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n\n    instance.resetAfterIndices = function (_ref6) {\n      var columnIndex = _ref6.columnIndex,\n          rowIndex = _ref6.rowIndex,\n          _ref6$shouldForceUpda = _ref6.shouldForceUpdate,\n          shouldForceUpdate = _ref6$shouldForceUpda === void 0 ? true : _ref6$shouldForceUpda;\n\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(instanceProps.lastMeasuredColumnIndex, columnIndex - 1);\n      }\n\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(instanceProps.lastMeasuredRowIndex, rowIndex - 1);\n      } // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref7) {\n    var columnWidth = _ref7.columnWidth,\n        rowHeight = _ref7.rowHeight;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      } else if (typeof rowHeight !== 'function') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;\n\nvar defaultItemKey$1 = function defaultItemKey(index, data) {\n  return index;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\n\nvar devWarningsDirection = null;\nvar devWarningsTagName$1 = null;\n\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = /*#__PURE__*/new WeakSet();\n    devWarningsTagName$1 = /*#__PURE__*/new WeakSet();\n  }\n}\n\nfunction createListComponent(_ref) {\n  var _class, _temp;\n\n  var getItemOffset = _ref.getItemOffset,\n      getEstimatedTotalSize = _ref.getEstimatedTotalSize,\n      getItemSize = _ref.getItemSize,\n      getOffsetForIndexAndAlignment = _ref.getOffsetForIndexAndAlignment,\n      getStartIndexForOffset = _ref.getStartIndexForOffset,\n      getStopIndexForStartIndex = _ref.getStopIndexForStartIndex,\n      initInstanceProps = _ref.initInstanceProps,\n      shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange,\n      validateProps = _ref.validateProps;\n  return _temp = _class = /*#__PURE__*/function (_PureComponent) {\n    _inheritsLoose(List, _PureComponent); // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n\n\n    function List(props) {\n      var _this;\n\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_assertThisInitialized(_this)));\n      _this._outerRef = void 0;\n      _this._resetIsScrollingTimeoutId = null;\n      _this.state = {\n        instance: _assertThisInitialized(_assertThisInitialized(_this)),\n        isScrolling: false,\n        scrollDirection: 'forward',\n        scrollOffset: typeof _this.props.initialScrollOffset === 'number' ? _this.props.initialScrollOffset : 0,\n        scrollUpdateWasRequested: false\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = memoizeOne(function (overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanStartIndex: overscanStartIndex,\n          overscanStopIndex: overscanStopIndex,\n          visibleStartIndex: visibleStartIndex,\n          visibleStopIndex: visibleStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = memoizeOne(function (scrollDirection, scrollOffset, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          scrollDirection: scrollDirection,\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n\n      _this._getItemStyle = function (index) {\n        var _this$props = _this.props,\n            direction = _this$props.direction,\n            itemSize = _this$props.itemSize,\n            layout = _this$props.layout;\n\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout, shouldResetStyleCacheOnItemSizeChange && direction);\n\n        var style;\n\n        if (itemStyleCache.hasOwnProperty(index)) {\n          style = itemStyleCache[index];\n        } else {\n          var _offset = getItemOffset(_this.props, index, _this._instanceProps);\n\n          var size = getItemSize(_this.props, index, _this._instanceProps); // TODO Deprecate direction \"horizontal\"\n\n          var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n          var isRtl = direction === 'rtl';\n          var offsetHorizontal = isHorizontal ? _offset : 0;\n          itemStyleCache[index] = style = {\n            position: 'absolute',\n            left: isRtl ? undefined : offsetHorizontal,\n            right: isRtl ? offsetHorizontal : undefined,\n            top: !isHorizontal ? _offset : 0,\n            height: !isHorizontal ? size : '100%',\n            width: isHorizontal ? size : '100%'\n          };\n        }\n\n        return style;\n      };\n\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = memoizeOne(function (_, __, ___) {\n        return {};\n      });\n\n      _this._onScrollHorizontal = function (event) {\n        var _event$currentTarget = event.currentTarget,\n            clientWidth = _event$currentTarget.clientWidth,\n            scrollLeft = _event$currentTarget.scrollLeft,\n            scrollWidth = _event$currentTarget.scrollWidth;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollLeft) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n\n          var direction = _this.props.direction;\n          var scrollOffset = scrollLeft;\n\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n            // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                scrollOffset = -scrollLeft;\n                break;\n\n              case 'positive-descending':\n                scrollOffset = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._onScrollVertical = function (event) {\n        var _event$currentTarget2 = event.currentTarget,\n            clientHeight = _event$currentTarget2.clientHeight,\n            scrollHeight = _event$currentTarget2.scrollHeight,\n            scrollTop = _event$currentTarget2.scrollTop;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);\n      };\n\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1, null);\n        });\n      };\n\n      return _this;\n    }\n\n    List.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps$1(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n\n    var _proto = List.prototype;\n\n    _proto.scrollTo = function scrollTo(scrollOffset) {\n      scrollOffset = Math.max(0, scrollOffset);\n      this.setState(function (prevState) {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n\n        return {\n          scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _proto.scrollToItem = function scrollToItem(index, align) {\n      if (align === void 0) {\n        align = 'auto';\n      }\n\n      var itemCount = this.props.itemCount;\n      var scrollOffset = this.state.scrollOffset;\n      index = Math.max(0, Math.min(index, itemCount - 1));\n      this.scrollTo(getOffsetForIndexAndAlignment(this.props, index, align, scrollOffset, this._instanceProps));\n    };\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props2 = this.props,\n          direction = _this$props2.direction,\n          initialScrollOffset = _this$props2.initialScrollOffset,\n          layout = _this$props2.layout;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var _this$props3 = this.props,\n          direction = _this$props3.direction,\n          layout = _this$props3.layout;\n      var _this$state = this.state,\n          scrollOffset = _this$state.scrollOffset,\n          scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n\n              default:\n                var clientWidth = outerRef.clientWidth,\n                    scrollWidth = outerRef.scrollWidth;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n\n    _proto.render = function render() {\n      var _this$props4 = this.props,\n          children = _this$props4.children,\n          className = _this$props4.className,\n          direction = _this$props4.direction,\n          height = _this$props4.height,\n          innerRef = _this$props4.innerRef,\n          innerElementType = _this$props4.innerElementType,\n          innerTagName = _this$props4.innerTagName,\n          itemCount = _this$props4.itemCount,\n          itemData = _this$props4.itemData,\n          _this$props4$itemKey = _this$props4.itemKey,\n          itemKey = _this$props4$itemKey === void 0 ? defaultItemKey$1 : _this$props4$itemKey,\n          layout = _this$props4.layout,\n          outerElementType = _this$props4.outerElementType,\n          outerTagName = _this$props4.outerTagName,\n          style = _this$props4.style,\n          useIsScrolling = _this$props4.useIsScrolling,\n          width = _this$props4.width;\n      var isScrolling = this.state.isScrolling; // TODO Deprecate direction \"horizontal\"\n\n      var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n      var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;\n\n      var _this$_getRangeToRend = this._getRangeToRender(),\n          startIndex = _this$_getRangeToRend[0],\n          stopIndex = _this$_getRangeToRend[1];\n\n      var items = [];\n\n      if (itemCount > 0) {\n        for (var _index = startIndex; _index <= stopIndex; _index++) {\n          items.push(createElement(children, {\n            data: itemData,\n            key: itemKey(_index, itemData),\n            index: _index,\n            isScrolling: useIsScrolling ? isScrolling : undefined,\n            style: this._getItemStyle(_index)\n          }));\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n\n      var estimatedTotalSize = getEstimatedTotalSize(this.props, this._instanceProps);\n      return createElement(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: onScroll,\n        ref: this._outerRefSetter,\n        style: _extends({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, createElement(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: isHorizontal ? '100%' : estimatedTotalSize,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: isHorizontal ? estimatedTotalSize : '100%'\n        }\n      }));\n    };\n\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        var itemCount = this.props.itemCount;\n\n        if (itemCount > 0) {\n          var _this$_getRangeToRend2 = this._getRangeToRender(),\n              _overscanStartIndex = _this$_getRangeToRend2[0],\n              _overscanStopIndex = _this$_getRangeToRend2[1],\n              _visibleStartIndex = _this$_getRangeToRend2[2],\n              _visibleStopIndex = _this$_getRangeToRend2[3];\n\n          this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        var _this$state2 = this.state,\n            _scrollDirection = _this$state2.scrollDirection,\n            _scrollOffset = _this$state2.scrollOffset,\n            _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n\n        this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);\n      }\n    }; // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n\n\n    _proto._getRangeToRender = function _getRangeToRender() {\n      var _this$props5 = this.props,\n          itemCount = _this$props5.itemCount,\n          overscanCount = _this$props5.overscanCount;\n      var _this$state3 = this.state,\n          isScrolling = _this$state3.isScrolling,\n          scrollDirection = _this$state3.scrollDirection,\n          scrollOffset = _this$state3.scrollOffset;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getStartIndexForOffset(this.props, scrollOffset, this._instanceProps);\n      var stopIndex = getStopIndexForStartIndex(this.props, startIndex, scrollOffset, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || scrollDirection === 'backward' ? Math.max(1, overscanCount) : 1;\n      var overscanForward = !isScrolling || scrollDirection === 'forward' ? Math.max(1, overscanCount) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    return List;\n  }(PureComponent), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    layout: 'vertical',\n    overscanCount: 2,\n    useIsScrolling: false\n  }, _temp;\n} // NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\n\nvar validateSharedProps$1 = function validateSharedProps(_ref2, _ref3) {\n  var children = _ref2.children,\n      direction = _ref2.direction,\n      height = _ref2.height,\n      layout = _ref2.layout,\n      innerTagName = _ref2.innerTagName,\n      outerTagName = _ref2.outerTagName,\n      width = _ref2.width;\n  var instance = _ref3.instance;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName$1 && !devWarningsTagName$1.has(instance)) {\n        devWarningsTagName$1.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    } // TODO Deprecate direction \"horizontal\"\n\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn('The direction prop should be either \"ltr\" (default) or \"rtl\". ' + 'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.');\n        }\n\n        break;\n\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"layout\" prop has been specified. ' + 'Value should be either \"horizontal\" or \"vertical\". ' + (\"\\\"\" + layout + \"\\\" was specified.\"));\n    }\n\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Horizontal lists must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Vertical lists must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\n\nvar DEFAULT_ESTIMATED_ITEM_SIZE$1 = 50;\n\nvar getItemMetadata$1 = function getItemMetadata(props, index, instanceProps) {\n  var _ref = props,\n      itemSize = _ref.itemSize;\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n      lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nvar findNearestItem$1 = function findNearestItem(props, instanceProps, offset) {\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n      lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch$1(props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch$1(props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\n\nvar findNearestItemBinarySearch$1 = function findNearestItemBinarySearch(props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata$1(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nvar findNearestItemExponentialSearch$1 = function findNearestItemExponentialSearch(props, instanceProps, index, offset) {\n  var itemCount = props.itemCount;\n  var interval = 1;\n\n  while (index < itemCount && getItemMetadata$1(props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch$1(props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\n\nvar getEstimatedTotalSize = function getEstimatedTotalSize(_ref2, _ref3) {\n  var itemCount = _ref2.itemCount;\n  var itemMetadataMap = _ref3.itemMetadataMap,\n      estimatedItemSize = _ref3.estimatedItemSize,\n      lastMeasuredIndex = _ref3.lastMeasuredIndex;\n  var totalSizeOfMeasuredItems = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nvar VariableSizeList = /*#__PURE__*/createListComponent({\n  getItemOffset: function getItemOffset(props, index, instanceProps) {\n    return getItemMetadata$1(props, index, instanceProps).offset;\n  },\n  getItemSize: function getItemSize(props, index, instanceProps) {\n    return instanceProps.itemMetadataMap[index].size;\n  },\n  getEstimatedTotalSize: getEstimatedTotalSize,\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(props, index, align, scrollOffset, instanceProps) {\n    var direction = props.direction,\n        height = props.height,\n        layout = props.layout,\n        width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n\n    var estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n    var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n    var minOffset = Math.max(0, itemMetadata.offset - size + itemMetadata.size);\n\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(props, offset, instanceProps) {\n    return findNearestItem$1(props, instanceProps, offset);\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(props, startIndex, scrollOffset, instanceProps) {\n    var direction = props.direction,\n        height = props.height,\n        itemCount = props.itemCount,\n        layout = props.layout,\n        width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, startIndex, instanceProps);\n    var maxOffset = scrollOffset + size;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata$1(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref4 = props,\n        estimatedItemSize = _ref4.estimatedItemSize;\n    var instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE$1,\n      lastMeasuredIndex: -1\n    };\n\n    instance.resetAfterIndex = function (index, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instanceProps.lastMeasuredIndex = Math.min(instanceProps.lastMeasuredIndex, index - 1); // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref5) {\n    var itemSize = _ref5.itemSize;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar FixedSizeGrid = /*#__PURE__*/createGridComponent({\n  getColumnOffset: function getColumnOffset(_ref, index) {\n    var columnWidth = _ref.columnWidth;\n    return index * columnWidth;\n  },\n  getColumnWidth: function getColumnWidth(_ref2, index) {\n    var columnWidth = _ref2.columnWidth;\n    return columnWidth;\n  },\n  getRowOffset: function getRowOffset(_ref3, index) {\n    var rowHeight = _ref3.rowHeight;\n    return index * rowHeight;\n  },\n  getRowHeight: function getRowHeight(_ref4, index) {\n    var rowHeight = _ref4.rowHeight;\n    return rowHeight;\n  },\n  getEstimatedTotalHeight: function getEstimatedTotalHeight(_ref5) {\n    var rowCount = _ref5.rowCount,\n        rowHeight = _ref5.rowHeight;\n    return rowHeight * rowCount;\n  },\n  getEstimatedTotalWidth: function getEstimatedTotalWidth(_ref6) {\n    var columnCount = _ref6.columnCount,\n        columnWidth = _ref6.columnWidth;\n    return columnWidth * columnCount;\n  },\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(_ref7, columnIndex, align, scrollLeft, instanceProps, scrollbarSize) {\n    var columnCount = _ref7.columnCount,\n        columnWidth = _ref7.columnWidth,\n        width = _ref7.width;\n    var lastColumnOffset = Math.max(0, columnCount * columnWidth - width);\n    var maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);\n    var minOffset = Math.max(0, columnIndex * columnWidth - width + scrollbarSize + columnWidth);\n\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(_ref8, rowIndex, align, scrollTop, instanceProps, scrollbarSize) {\n    var rowHeight = _ref8.rowHeight,\n        height = _ref8.height,\n        rowCount = _ref8.rowCount;\n    var lastRowOffset = Math.max(0, rowCount * rowHeight - height);\n    var maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);\n    var minOffset = Math.max(0, rowIndex * rowHeight - height + scrollbarSize + rowHeight);\n\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(_ref9, scrollLeft) {\n    var columnWidth = _ref9.columnWidth,\n        columnCount = _ref9.columnCount;\n    return Math.max(0, Math.min(columnCount - 1, Math.floor(scrollLeft / columnWidth)));\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(_ref10, startIndex, scrollLeft) {\n    var columnWidth = _ref10.columnWidth,\n        columnCount = _ref10.columnCount,\n        width = _ref10.width;\n    var left = startIndex * columnWidth;\n    var numVisibleColumns = Math.ceil((width + scrollLeft - left) / columnWidth);\n    return Math.max(0, Math.min(columnCount - 1, startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(_ref11, scrollTop) {\n    var rowHeight = _ref11.rowHeight,\n        rowCount = _ref11.rowCount;\n    return Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTop / rowHeight)));\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(_ref12, startIndex, scrollTop) {\n    var rowHeight = _ref12.rowHeight,\n        rowCount = _ref12.rowCount,\n        height = _ref12.height;\n    var top = startIndex * rowHeight;\n    var numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);\n    return Math.max(0, Math.min(rowCount - 1, startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref13) {\n    var columnWidth = _ref13.columnWidth,\n        rowHeight = _ref13.rowHeight;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      }\n\n      if (typeof rowHeight !== 'number') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar FixedSizeList = /*#__PURE__*/createListComponent({\n  getItemOffset: function getItemOffset(_ref, index) {\n    var itemSize = _ref.itemSize;\n    return index * itemSize;\n  },\n  getItemSize: function getItemSize(_ref2, index) {\n    var itemSize = _ref2.itemSize;\n    return itemSize;\n  },\n  getEstimatedTotalSize: function getEstimatedTotalSize(_ref3) {\n    var itemCount = _ref3.itemCount,\n        itemSize = _ref3.itemSize;\n    return itemSize * itemCount;\n  },\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(_ref4, index, align, scrollOffset) {\n    var direction = _ref4.direction,\n        height = _ref4.height,\n        itemCount = _ref4.itemCount,\n        itemSize = _ref4.itemSize,\n        layout = _ref4.layout,\n        width = _ref4.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var lastItemOffset = Math.max(0, itemCount * itemSize - size);\n    var maxOffset = Math.min(lastItemOffset, index * itemSize);\n    var minOffset = Math.max(0, index * itemSize - size + itemSize);\n\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        {\n          // \"Centered\" offset is usually the average of the min and max.\n          // But near the edges of the list, this doesn't hold true.\n          var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n          if (middleOffset < Math.ceil(size / 2)) {\n            return 0; // near the beginning\n          } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n            return lastItemOffset; // near the end\n          } else {\n            return middleOffset;\n          }\n        }\n\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(_ref5, offset) {\n    var itemCount = _ref5.itemCount,\n        itemSize = _ref5.itemSize;\n    return Math.max(0, Math.min(itemCount - 1, Math.floor(offset / itemSize)));\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(_ref6, startIndex, scrollOffset) {\n    var direction = _ref6.direction,\n        height = _ref6.height,\n        itemCount = _ref6.itemCount,\n        itemSize = _ref6.itemSize,\n        layout = _ref6.layout,\n        width = _ref6.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var offset = startIndex * itemSize;\n    var size = isHorizontal ? width : height;\n    var numVisibleItems = Math.ceil((size + scrollOffset - offset) / itemSize);\n    return Math.max(0, Math.min(itemCount - 1, startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref7) {\n    var itemSize = _ref7.itemSize;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n}); // Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\n\nfunction shallowDiffers(prev, next) {\n  for (var attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n\n  for (var _attribute in next) {\n    if (prev[_attribute] !== next[_attribute]) {\n      return true;\n    }\n  }\n\n  return false;\n} // It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\n\n\nfunction areEqual(prevProps, nextProps) {\n  var prevStyle = prevProps.style,\n      prevRest = _objectWithoutPropertiesLoose(prevProps, [\"style\"]);\n\n  var nextStyle = nextProps.style,\n      nextRest = _objectWithoutPropertiesLoose(nextProps, [\"style\"]);\n\n  return !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest);\n} // It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\n\n\nfunction shouldComponentUpdate(nextProps, nextState) {\n  return !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState);\n}\n\nexport { VariableSizeGrid, VariableSizeList, FixedSizeGrid, FixedSizeList, areEqual, shouldComponentUpdate };","map":{"version":3,"mappings":"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","names":["hasNativePerformanceNow","performance","now","Date","cancelTimeout","timeoutID","cancelAnimationFrame","id","requestTimeout","callback","delay","start","tick","call","requestAnimationFrame","size","getScrollbarSize","recalculate","div","document","createElement","style","width","height","overflow","body","appendChild","offsetWidth","clientWidth","removeChild","cachedRTLResult","getRTLOffsetType","outerDiv","outerStyle","direction","innerDiv","innerStyle","scrollLeft","IS_SCROLLING_DEBOUNCE_INTERVAL","defaultItemKey","columnIndex","data","rowIndex","devWarningsOverscanCount","devWarningsOverscanRowsColumnsCount","devWarningsTagName","process","env","NODE_ENV","window","WeakSet","createGridComponent","getColumnOffset","getColumnStartIndexForOffset","getColumnStopIndexForStartIndex","getColumnWidth","getEstimatedTotalHeight","getEstimatedTotalWidth","getOffsetForColumnAndAlignment","getOffsetForRowAndAlignment","getRowHeight","getRowOffset","getRowStartIndexForOffset","getRowStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","props","_instanceProps","_this","_resetIsScrollingTimeoutId","_outerRef","state","instance","isScrolling","horizontalScrollDirection","initialScrollLeft","scrollTop","initialScrollTop","scrollUpdateWasRequested","verticalScrollDirection","_callOnItemsRendered","memoizeOne","overscanColumnStartIndex","overscanColumnStopIndex","overscanRowStartIndex","overscanRowStopIndex","visibleColumnStartIndex","visibleColumnStopIndex","visibleRowStartIndex","visibleRowStopIndex","onItemsRendered","_callOnScroll","onScroll","_getItemStyle","columnWidth","rowHeight","itemStyleCache","_getItemStyleCache","key","hasOwnProperty","offset","isRtl","position","left","undefined","right","top","_","__","___","_onScroll","event","currentTarget","clientHeight","scrollHeight","scrollWidth","setState","prevState","calculatedScrollLeft","Math","max","min","calculatedScrollTop","_resetIsScrollingDebounced","_outerRefSetter","ref","outerRef","current","_resetIsScrolling","getDerivedStateFromProps","nextProps","validateSharedProps","scrollTo","scrollToItem","align","columnCount","rowCount","scrollbarSize","estimatedTotalHeight","estimatedTotalWidth","horizontalScrollbarSize","verticalScrollbarSize","componentDidMount","_callPropsCallbacks","componentDidUpdate","componentWillUnmount","render","children","className","innerRef","innerElementType","innerTagName","itemData","itemKey","outerElementType","outerTagName","useIsScrolling","_getHorizontalRangeToRender","columnStartIndex","columnStopIndex","_getVerticalRangeToRender","rowStartIndex","rowStopIndex","items","push","WebkitOverflowScrolling","willChange","pointerEvents","overscanColumnCount","overscanColumnsCount","overscanCount","overscanCountResolved","startIndex","stopIndex","overscanBackward","overscanForward","overscanRowCount","overscanRowsCount","PureComponent","_class","defaultProps","_temp","has","add","console","warn","Error","DEFAULT_ESTIMATED_ITEM_SIZE","rowMetadataMap","estimatedRowHeight","lastMeasuredRowIndex","totalSizeOfMeasuredRows","itemMetadata","numUnmeasuredItems","totalSizeOfUnmeasuredItems","columnMetadataMap","estimatedColumnWidth","lastMeasuredColumnIndex","getItemMetadata","itemType","index","instanceProps","itemMetadataMap","itemSize","lastMeasuredIndex","i","findNearestItem","lastMeasuredItemOffset","findNearestItemBinarySearch","findNearestItemExponentialSearch","high","low","middle","floor","currentOffset","itemCount","interval","getOffsetForIndexAndAlignment","scrollOffset","estimatedTotalSize","maxOffset","minOffset","round","VariableSizeGrid","resetAfterColumnIndex","shouldForceUpdate","resetAfterIndices","resetAfterRowIndex","forceUpdate","devWarningsDirection","createListComponent","getItemOffset","getEstimatedTotalSize","getItemSize","getStartIndexForOffset","getStopIndexForStartIndex","scrollDirection","initialScrollOffset","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","layout","isHorizontal","offsetHorizontal","_onScrollHorizontal","_onScrollVertical","_getRangeToRender","estimatedItemSize","totalSizeOfMeasuredItems","VariableSizeList","resetAfterIndex","FixedSizeGrid","lastColumnOffset","middleOffset","ceil","lastRowOffset","numVisibleColumns","numVisibleRows","FixedSizeList","lastItemOffset","numVisibleItems","shallowDiffers","prev","next","attribute","areEqual","prevProps","prevStyle","prevRest","nextStyle","nextRest","shouldComponentUpdate","nextState"],"sources":["/Users/santiago/Documents/tulipan1637/iot-sensor/app/node_modules/react-window/src/timer.js","/Users/santiago/Documents/tulipan1637/iot-sensor/app/node_modules/react-window/src/domHelpers.js","/Users/santiago/Documents/tulipan1637/iot-sensor/app/node_modules/react-window/src/createGridComponent.js","/Users/santiago/Documents/tulipan1637/iot-sensor/app/node_modules/react-window/src/VariableSizeGrid.js","/Users/santiago/Documents/tulipan1637/iot-sensor/app/node_modules/react-window/src/createListComponent.js","/Users/santiago/Documents/tulipan1637/iot-sensor/app/node_modules/react-window/src/VariableSizeList.js","/Users/santiago/Documents/tulipan1637/iot-sensor/app/node_modules/react-window/src/FixedSizeGrid.js","/Users/santiago/Documents/tulipan1637/iot-sensor/app/node_modules/react-window/src/FixedSizeList.js","/Users/santiago/Documents/tulipan1637/iot-sensor/app/node_modules/react-window/src/shallowDiffers.js","/Users/santiago/Documents/tulipan1637/iot-sensor/app/node_modules/react-window/src/areEqual.js","/Users/santiago/Documents/tulipan1637/iot-sensor/app/node_modules/react-window/src/shouldComponentUpdate.js"],"sourcesContent":["// @flow\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nconst hasNativePerformanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nconst now = hasNativePerformanceNow\n  ? () => performance.now()\n  : () => Date.now();\n\nexport type TimeoutID = {|\n  id: AnimationFrameID,\n|};\n\nexport function cancelTimeout(timeoutID: TimeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\n  const start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  const timeoutID: TimeoutID = {\n    id: requestAnimationFrame(tick),\n  };\n\n  return timeoutID;\n}\n","// @flow\n\nlet size: number = -1;\n\n// This utility copied from \"dom-helpers\" package.\nexport function getScrollbarSize(recalculate?: boolean = false): number {\n  if (size === -1 || recalculate) {\n    const div = document.createElement('div');\n    const style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n\n    ((document.body: any): HTMLBodyElement).appendChild(div);\n\n    size = div.offsetWidth - div.clientWidth;\n\n    ((document.body: any): HTMLBodyElement).removeChild(div);\n  }\n\n  return size;\n}\n\nexport type RTLOffsetType =\n  | 'negative'\n  | 'positive-descending'\n  | 'positive-ascending';\n\nlet cachedRTLResult: RTLOffsetType | null = null;\n\n// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\nexport function getRTLOffsetType(recalculate?: boolean = false): RTLOffsetType {\n  if (cachedRTLResult === null || recalculate) {\n    const outerDiv = document.createElement('div');\n    const outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n\n    const innerDiv = document.createElement('div');\n    const innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n\n    outerDiv.appendChild(innerDiv);\n\n    ((document.body: any): HTMLBodyElement).appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    ((document.body: any): HTMLBodyElement).removeChild(outerDiv);\n\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\ntype Direction = 'ltr' | 'rtl';\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n\ntype RenderComponentProps<T> = {|\n  columnIndex: number,\n  data: T,\n  isScrolling?: boolean,\n  rowIndex: number,\n  style: Object,\n|};\nexport type RenderComponent<T> = React$ComponentType<\n  $Shape<RenderComponentProps<T>>\n>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype OnItemsRenderedCallback = ({\n  overscanColumnStartIndex: number,\n  overscanColumnStopIndex: number,\n  overscanRowStartIndex: number,\n  overscanRowStopIndex: number,\n  visibleColumnStartIndex: number,\n  visibleColumnStopIndex: number,\n  visibleRowStartIndex: number,\n  visibleRowStopIndex: number,\n}) => void;\ntype OnScrollCallback = ({\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [key: string]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  columnCount: number,\n  columnWidth: itemSize,\n  direction: Direction,\n  height: number,\n  initialScrollLeft?: number,\n  initialScrollTop?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemData: T,\n  itemKey?: (params: {|\n    columnIndex: number,\n    data: T,\n    rowIndex: number,\n  |}) => any,\n  onItemsRendered?: OnItemsRenderedCallback,\n  onScroll?: OnScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanColumnCount?: number,\n  overscanColumnsCount?: number, // deprecated\n  overscanCount?: number, // deprecated\n  overscanRowCount?: number,\n  overscanRowsCount?: number, // deprecated\n  rowCount: number,\n  rowHeight: itemSize,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n|};\n\ntype getItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForItemAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any,\n  scrollbarSize: number\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = ({ columnIndex, data, rowIndex }) =>\n  `${rowIndex}:${columnIndex}`;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsOverscanCount = null;\nlet devWarningsOverscanRowsColumnsCount = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = new WeakSet();\n    devWarningsOverscanRowsColumnsCount = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createGridComponent({\n  getColumnOffset,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getColumnWidth,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment,\n  getOffsetForRowAndAlignment,\n  getRowHeight,\n  getRowOffset,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getColumnOffset: getItemOffset,\n  getColumnStartIndexForOffset: GetStartIndexForOffset,\n  getColumnStopIndexForStartIndex: GetStopIndexForStartIndex,\n  getColumnWidth: getItemSize,\n  getEstimatedTotalHeight: getEstimatedTotalSize,\n  getEstimatedTotalWidth: getEstimatedTotalSize,\n  getOffsetForColumnAndAlignment: GetOffsetForItemAndAlignment,\n  getOffsetForRowAndAlignment: GetOffsetForItemAndAlignment,\n  getRowOffset: getItemOffset,\n  getRowHeight: getItemSize,\n  getRowStartIndexForOffset: GetStartIndexForOffset,\n  getRowStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class Grid<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n    _outerRef: ?HTMLDivElement;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      horizontalScrollDirection: 'forward',\n      scrollLeft:\n        typeof this.props.initialScrollLeft === 'number'\n          ? this.props.initialScrollLeft\n          : 0,\n      scrollTop:\n        typeof this.props.initialScrollTop === 'number'\n          ? this.props.initialScrollTop\n          : 0,\n      scrollUpdateWasRequested: false,\n      verticalScrollDirection: 'forward',\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo({\n      scrollLeft,\n      scrollTop,\n    }: {\n      scrollLeft: number,\n      scrollTop: number,\n    }): void {\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(prevState => {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem({\n      align = 'auto',\n      columnIndex,\n      rowIndex,\n    }: {\n      align: ScrollToAlign,\n      columnIndex?: number,\n      rowIndex?: number,\n    }): void {\n      const { columnCount, height, rowCount, width } = this.props;\n      const { scrollLeft, scrollTop } = this.state;\n      const scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      const horizontalScrollbarSize =\n        estimatedTotalWidth > width ? scrollbarSize : 0;\n      const verticalScrollbarSize =\n        estimatedTotalHeight > height ? scrollbarSize : 0;\n\n      this.scrollTo({\n        scrollLeft:\n          columnIndex !== undefined\n            ? getOffsetForColumnAndAlignment(\n                this.props,\n                columnIndex,\n                align,\n                scrollLeft,\n                this._instanceProps,\n                verticalScrollbarSize\n              )\n            : scrollLeft,\n        scrollTop:\n          rowIndex !== undefined\n            ? getOffsetForRowAndAlignment(\n                this.props,\n                rowIndex,\n                align,\n                scrollTop,\n                this._instanceProps,\n                horizontalScrollbarSize\n              )\n            : scrollTop,\n      });\n    }\n\n    componentDidMount() {\n      const { initialScrollLeft, initialScrollTop } = this.props;\n\n      if (this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction } = this.props;\n      const { scrollLeft, scrollTop, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              const { clientWidth, scrollWidth } = outerRef;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        columnCount,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemData,\n        itemKey = defaultItemKey,\n        outerElementType,\n        outerTagName,\n        rowCount,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      const [\n        columnStartIndex,\n        columnStopIndex,\n      ] = this._getHorizontalRangeToRender();\n      const [rowStartIndex, rowStopIndex] = this._getVerticalRangeToRender();\n\n      const items = [];\n      if (columnCount > 0 && rowCount) {\n        for (\n          let rowIndex = rowStartIndex;\n          rowIndex <= rowStopIndex;\n          rowIndex++\n        ) {\n          for (\n            let columnIndex = columnStartIndex;\n            columnIndex <= columnStopIndex;\n            columnIndex++\n          ) {\n            items.push(\n              createElement(children, {\n                columnIndex,\n                data: itemData,\n                isScrolling: useIsScrolling ? isScrolling : undefined,\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\n                rowIndex,\n                style: this._getItemStyle(rowIndex, columnIndex),\n              })\n            );\n          }\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll: this._onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: estimatedTotalHeight,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: estimatedTotalWidth,\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanColumnStartIndex: number,\n      overscanColumnStopIndex: number,\n      overscanRowStartIndex: number,\n      overscanRowStopIndex: number,\n      visibleColumnStartIndex: number,\n      visibleColumnStopIndex: number,\n      visibleRowStartIndex: number,\n      visibleRowStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanColumnStartIndex: number,\n        overscanColumnStopIndex: number,\n        overscanRowStartIndex: number,\n        overscanRowStopIndex: number,\n        visibleColumnStartIndex: number,\n        visibleColumnStopIndex: number,\n        visibleRowStartIndex: number,\n        visibleRowStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): OnItemsRenderedCallback)({\n          overscanColumnStartIndex,\n          overscanColumnStopIndex,\n          overscanRowStartIndex,\n          overscanRowStopIndex,\n          visibleColumnStartIndex,\n          visibleColumnStopIndex,\n          visibleRowStartIndex,\n          visibleRowStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollLeft: number,\n      scrollTop: number,\n      horizontalScrollDirection: ScrollDirection,\n      verticalScrollDirection: ScrollDirection,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollLeft: number,\n        scrollTop: number,\n        horizontalScrollDirection: ScrollDirection,\n        verticalScrollDirection: ScrollDirection,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): OnScrollCallback)({\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          verticalScrollDirection,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      const { columnCount, onItemsRendered, onScroll, rowCount } = this.props;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          const [\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n          ] = this._getHorizontalRangeToRender();\n          const [\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex,\n          ] = this._getVerticalRangeToRender();\n          this._callOnItemsRendered(\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex\n          );\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        const {\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          scrollUpdateWasRequested,\n          verticalScrollDirection,\n        } = this.state;\n        this._callOnScroll(\n          scrollLeft,\n          scrollTop,\n          horizontalScrollDirection,\n          verticalScrollDirection,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (rowIndex: number, columnIndex: number) => Object;\n    _getItemStyle = (rowIndex: number, columnIndex: number): Object => {\n      const { columnWidth, direction, rowHeight } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && columnWidth,\n        shouldResetStyleCacheOnItemSizeChange && direction,\n        shouldResetStyleCacheOnItemSizeChange && rowHeight\n      );\n\n      const key = `${rowIndex}:${columnIndex}`;\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(key)) {\n        style = itemStyleCache[key];\n      } else {\n        const offset = getColumnOffset(\n          this.props,\n          columnIndex,\n          this._instanceProps\n        );\n        const isRtl = direction === 'rtl';\n        itemStyleCache[key] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offset,\n          right: isRtl ? offset : undefined,\n          top: getRowOffset(this.props, rowIndex, this._instanceProps),\n          height: getRowHeight(this.props, rowIndex, this._instanceProps),\n          width: getColumnWidth(this.props, columnIndex, this._instanceProps),\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getHorizontalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanColumnCount,\n        overscanColumnsCount,\n        overscanCount,\n        rowCount,\n      } = this.props;\n      const { horizontalScrollDirection, isScrolling, scrollLeft } = this.state;\n\n      const overscanCountResolved: number =\n        overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getColumnStartIndexForOffset(\n        this.props,\n        scrollLeft,\n        this._instanceProps\n      );\n      const stopIndex = getColumnStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollLeft,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || horizontalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || horizontalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _getVerticalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanCount,\n        overscanRowCount,\n        overscanRowsCount,\n        rowCount,\n      } = this.props;\n      const { isScrolling, verticalScrollDirection, scrollTop } = this.state;\n\n      const overscanCountResolved: number =\n        overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getRowStartIndexForOffset(\n        this.props,\n        scrollTop,\n        this._instanceProps\n      );\n      const stopIndex = getRowStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollTop,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || verticalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || verticalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScroll = (event: ScrollEvent): void => {\n      const {\n        clientHeight,\n        clientWidth,\n        scrollLeft,\n        scrollTop,\n        scrollHeight,\n        scrollWidth,\n      } = event.currentTarget;\n      this.setState(prevState => {\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n        // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n        let calculatedScrollLeft = scrollLeft;\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              calculatedScrollLeft = -scrollLeft;\n              break;\n            case 'positive-descending':\n              calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        calculatedScrollLeft = Math.max(\n          0,\n          Math.min(calculatedScrollLeft, scrollWidth - clientWidth)\n        );\n        const calculatedScrollTop = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: calculatedScrollTop,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1);\n      });\n    };\n  };\n}\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    innerTagName,\n    outerTagName,\n    overscanColumnsCount,\n    overscanCount,\n    overscanRowsCount,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn(\n          'The overscanCount prop has been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (\n      typeof overscanColumnsCount === 'number' ||\n      typeof overscanRowsCount === 'number'\n    ) {\n      if (\n        devWarningsOverscanRowsColumnsCount &&\n        !devWarningsOverscanRowsColumnsCount.has(instance)\n      ) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn(\n          'The overscanColumnsCount and overscanRowsCount props have been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    if (typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Grids must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    }\n\n    if (typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Grids must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\ntype ItemType = 'column' | 'row';\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype ItemMetadataMap = { [index: number]: ItemMetadata };\ntype InstanceProps = {|\n  columnMetadataMap: ItemMetadataMap,\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  lastMeasuredColumnIndex: number,\n  lastMeasuredRowIndex: number,\n  rowMetadataMap: ItemMetadataMap,\n|};\n\nconst getEstimatedTotalHeight = (\n  { rowCount }: Props<any>,\n  { rowMetadataMap, estimatedRowHeight, lastMeasuredRowIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n\n  if (lastMeasuredRowIndex >= 0) {\n    const itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getEstimatedTotalWidth = (\n  { columnCount }: Props<any>,\n  {\n    columnMetadataMap,\n    estimatedColumnWidth,\n    lastMeasuredColumnIndex,\n  }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n\n  if (lastMeasuredColumnIndex >= 0) {\n    const itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getItemMetadata = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  let itemMetadataMap, itemSize, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = ((props.columnWidth: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = ((props.rowHeight: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = itemSize(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  let itemMetadataMap, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      itemType,\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      itemType,\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(\n      itemType,\n      props,\n      middle,\n      instanceProps\n    ).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(itemType, props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    itemType,\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getOffsetForIndexAndAlignment = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: InstanceProps,\n  scrollbarSize: number\n): number => {\n  const size = itemType === 'column' ? props.width : props.height;\n  const itemMetadata = getItemMetadata(itemType, props, index, instanceProps);\n\n  // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n  const estimatedTotalSize =\n    itemType === 'column'\n      ? getEstimatedTotalWidth(props, instanceProps)\n      : getEstimatedTotalHeight(props, instanceProps);\n\n  const maxOffset = Math.max(\n    0,\n    Math.min(estimatedTotalSize - size, itemMetadata.offset)\n  );\n  const minOffset = Math.max(\n    0,\n    itemMetadata.offset - size + scrollbarSize + itemMetadata.size\n  );\n\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n    case 'end':\n      return minOffset;\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n  }\n};\n\nconst VariableSizeGrid = createGridComponent({\n  getColumnOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('column', props, index, instanceProps).offset,\n\n  getColumnStartIndexForOffset: (\n    props: Props<any>,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('column', props, instanceProps, scrollLeft),\n\n  getColumnStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { columnCount, width } = props;\n\n    const itemMetadata = getItemMetadata(\n      'column',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollLeft + width;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  getColumnWidth: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.columnMetadataMap[index].size,\n\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n\n  getOffsetForColumnAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'column',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getOffsetForRowAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'row',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getRowOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('row', props, index, instanceProps).offset,\n\n  getRowHeight: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.rowMetadataMap[index].size,\n\n  getRowStartIndexForOffset: (\n    props: Props<any>,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('row', props, instanceProps, scrollTop),\n\n  getRowStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { rowCount, height } = props;\n\n    const itemMetadata = getItemMetadata(\n      'row',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollTop + height;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const {\n      estimatedColumnWidth,\n      estimatedRowHeight,\n    } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {},\n    };\n\n    instance.resetAfterColumnIndex = (\n      columnIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ columnIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterRowIndex = (\n      rowIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ rowIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterIndices = ({\n      columnIndex,\n      rowIndex,\n      shouldForceUpdate = true,\n    }: {\n      columnIndex?: number,\n      rowIndex?: number,\n      shouldForceUpdate: boolean,\n    }) => {\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(\n          instanceProps.lastMeasuredColumnIndex,\n          columnIndex - 1\n        );\n      }\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(\n          instanceProps.lastMeasuredRowIndex,\n          rowIndex - 1\n        );\n      }\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      } else if (typeof rowHeight !== 'function') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeGrid;\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n// TODO Deprecate directions \"horizontal\" and \"vertical\"\ntype Direction = 'ltr' | 'rtl' | 'horizontal' | 'vertical';\ntype Layout = 'horizontal' | 'vertical';\n\ntype RenderComponentProps<T> = {|\n  data: T,\n  index: number,\n  isScrolling?: boolean,\n  style: Object,\n|};\ntype RenderComponent<T> = React$ComponentType<$Shape<RenderComponentProps<T>>>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype onItemsRenderedCallback = ({\n  overscanStartIndex: number,\n  overscanStopIndex: number,\n  visibleStartIndex: number,\n  visibleStopIndex: number,\n}) => void;\ntype onScrollCallback = ({\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [index: number]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  direction: Direction,\n  height: number | string,\n  initialScrollOffset?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemCount: number,\n  itemData: T,\n  itemKey?: (index: number, data: T) => any,\n  itemSize: itemSize,\n  layout: Layout,\n  onItemsRendered?: onItemsRenderedCallback,\n  onScroll?: onScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanCount: number,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number | string,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n|};\n\ntype GetItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForIndexAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = (index: number, data: any) => index;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsDirection = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createListComponent({\n  getItemOffset,\n  getEstimatedTotalSize,\n  getItemSize,\n  getOffsetForIndexAndAlignment,\n  getStartIndexForOffset,\n  getStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getItemOffset: GetItemOffset,\n  getEstimatedTotalSize: GetEstimatedTotalSize,\n  getItemSize: GetItemSize,\n  getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment,\n  getStartIndexForOffset: GetStartIndexForOffset,\n  getStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class List<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _outerRef: ?HTMLDivElement;\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      layout: 'vertical',\n      overscanCount: 2,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      scrollDirection: 'forward',\n      scrollOffset:\n        typeof this.props.initialScrollOffset === 'number'\n          ? this.props.initialScrollOffset\n          : 0,\n      scrollUpdateWasRequested: false,\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo(scrollOffset: number): void {\n      scrollOffset = Math.max(0, scrollOffset);\n\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true,\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem(index: number, align: ScrollToAlign = 'auto'): void {\n      const { itemCount } = this.props;\n      const { scrollOffset } = this.state;\n\n      index = Math.max(0, Math.min(index, itemCount - 1));\n\n      this.scrollTo(\n        getOffsetForIndexAndAlignment(\n          this.props,\n          index,\n          align,\n          scrollOffset,\n          this._instanceProps\n        )\n      );\n    }\n\n    componentDidMount() {\n      const { direction, initialScrollOffset, layout } = this.props;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction, layout } = this.props;\n      const { scrollOffset, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                const { clientWidth, scrollWidth } = outerRef;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemCount,\n        itemData,\n        itemKey = defaultItemKey,\n        layout,\n        outerElementType,\n        outerTagName,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      // TODO Deprecate direction \"horizontal\"\n      const isHorizontal =\n        direction === 'horizontal' || layout === 'horizontal';\n\n      const onScroll = isHorizontal\n        ? this._onScrollHorizontal\n        : this._onScrollVertical;\n\n      const [startIndex, stopIndex] = this._getRangeToRender();\n\n      const items = [];\n      if (itemCount > 0) {\n        for (let index = startIndex; index <= stopIndex; index++) {\n          items.push(\n            createElement(children, {\n              data: itemData,\n              key: itemKey(index, itemData),\n              index,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              style: this._getItemStyle(index),\n            })\n          );\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalSize = getEstimatedTotalSize(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: isHorizontal ? '100%' : estimatedTotalSize,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: isHorizontal ? estimatedTotalSize : '100%',\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanStartIndex: number,\n      overscanStopIndex: number,\n      visibleStartIndex: number,\n      visibleStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanStartIndex: number,\n        overscanStopIndex: number,\n        visibleStartIndex: number,\n        visibleStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): onItemsRenderedCallback)({\n          overscanStartIndex,\n          overscanStopIndex,\n          visibleStartIndex,\n          visibleStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollDirection: ScrollDirection,\n      scrollOffset: number,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollDirection: ScrollDirection,\n        scrollOffset: number,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): onScrollCallback)({\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        const { itemCount } = this.props;\n        if (itemCount > 0) {\n          const [\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex,\n          ] = this._getRangeToRender();\n          this._callOnItemsRendered(\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex\n          );\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        const {\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        } = this.state;\n        this._callOnScroll(\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (index: number) => Object;\n    _getItemStyle = (index: number): Object => {\n      const { direction, itemSize, layout } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && itemSize,\n        shouldResetStyleCacheOnItemSizeChange && layout,\n        shouldResetStyleCacheOnItemSizeChange && direction\n      );\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(index)) {\n        style = itemStyleCache[index];\n      } else {\n        const offset = getItemOffset(this.props, index, this._instanceProps);\n        const size = getItemSize(this.props, index, this._instanceProps);\n\n        // TODO Deprecate direction \"horizontal\"\n        const isHorizontal =\n          direction === 'horizontal' || layout === 'horizontal';\n\n        const isRtl = direction === 'rtl';\n        const offsetHorizontal = isHorizontal ? offset : 0;\n        itemStyleCache[index] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offsetHorizontal,\n          right: isRtl ? offsetHorizontal : undefined,\n          top: !isHorizontal ? offset : 0,\n          height: !isHorizontal ? size : '100%',\n          width: isHorizontal ? size : '100%',\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getRangeToRender(): [number, number, number, number] {\n      const { itemCount, overscanCount } = this.props;\n      const { isScrolling, scrollDirection, scrollOffset } = this.state;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getStartIndexForOffset(\n        this.props,\n        scrollOffset,\n        this._instanceProps\n      );\n      const stopIndex = getStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollOffset,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || scrollDirection === 'backward'\n          ? Math.max(1, overscanCount)\n          : 1;\n      const overscanForward =\n        !isScrolling || scrollDirection === 'forward'\n          ? Math.max(1, overscanCount)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScrollHorizontal = (event: ScrollEvent): void => {\n      const { clientWidth, scrollLeft, scrollWidth } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollLeft) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        let scrollOffset = scrollLeft;\n        if (direction === 'rtl') {\n          // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              scrollOffset = -scrollLeft;\n              break;\n            case 'positive-descending':\n              scrollOffset = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        scrollOffset = Math.max(\n          0,\n          Math.min(scrollOffset, scrollWidth - clientWidth)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _onScrollVertical = (event: ScrollEvent): void => {\n      const { clientHeight, scrollHeight, scrollTop } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollTop) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        const scrollOffset = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1, null);\n      });\n    };\n  };\n}\n\n// NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    layout,\n    innerTagName,\n    outerTagName,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn(\n            'The direction prop should be either \"ltr\" (default) or \"rtl\". ' +\n              'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.'\n          );\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"layout\" prop has been specified. ' +\n            'Value should be either \"horizontal\" or \"vertical\". ' +\n            `\"${layout}\" was specified.`\n        );\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Horizontal lists must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Vertical lists must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedItemSize: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype InstanceProps = {|\n  itemMetadataMap: { [index: number]: ItemMetadata },\n  estimatedItemSize: number,\n  lastMeasuredIndex: number,\n|};\n\nconst getItemMetadata = (\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  const { itemSize } = ((props: any): VariableSizeProps);\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = ((itemSize: any): itemSizeGetter)(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const { itemCount } = props;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getEstimatedTotalSize = (\n  { itemCount }: Props<any>,\n  { itemMetadataMap, estimatedItemSize, lastMeasuredIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredItems = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nconst VariableSizeList = createListComponent({\n  getItemOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata(props, index, instanceProps).offset,\n\n  getItemSize: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.itemMetadataMap[index].size,\n\n  getEstimatedTotalSize,\n\n  getOffsetForIndexAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, index, instanceProps);\n\n    // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n    const estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n\n    const maxOffset = Math.max(\n      0,\n      Math.min(estimatedTotalSize - size, itemMetadata.offset)\n    );\n    const minOffset = Math.max(\n      0,\n      itemMetadata.offset - size + itemMetadata.size\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    props: Props<any>,\n    offset: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem(props, instanceProps, offset),\n\n  getStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, itemCount, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, startIndex, instanceProps);\n    const maxOffset = scrollOffset + size;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const { estimatedItemSize } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredIndex: -1,\n    };\n\n    instance.resetAfterIndex = (\n      index: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instanceProps.lastMeasuredIndex = Math.min(\n        instanceProps.lastMeasuredIndex,\n        index - 1\n      );\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeList;\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst FixedSizeGrid = createGridComponent({\n  getColumnOffset: ({ columnWidth }: Props<any>, index: number): number =>\n    index * ((columnWidth: any): number),\n\n  getColumnWidth: ({ columnWidth }: Props<any>, index: number): number =>\n    ((columnWidth: any): number),\n\n  getRowOffset: ({ rowHeight }: Props<any>, index: number): number =>\n    index * ((rowHeight: any): number),\n\n  getRowHeight: ({ rowHeight }: Props<any>, index: number): number =>\n    ((rowHeight: any): number),\n\n  getEstimatedTotalHeight: ({ rowCount, rowHeight }: Props<any>) =>\n    ((rowHeight: any): number) * rowCount,\n\n  getEstimatedTotalWidth: ({ columnCount, columnWidth }: Props<any>) =>\n    ((columnWidth: any): number) * columnCount,\n\n  getOffsetForColumnAndAlignment: (\n    { columnCount, columnWidth, width }: Props<any>,\n    columnIndex: number,\n    align: ScrollToAlign,\n    scrollLeft: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastColumnOffset = Math.max(\n      0,\n      columnCount * ((columnWidth: any): number) - width\n    );\n    const maxOffset = Math.min(\n      lastColumnOffset,\n      columnIndex * ((columnWidth: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      columnIndex * ((columnWidth: any): number) -\n        width +\n        scrollbarSize +\n        ((columnWidth: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getOffsetForRowAndAlignment: (\n    { rowHeight, height, rowCount }: Props<any>,\n    rowIndex: number,\n    align: ScrollToAlign,\n    scrollTop: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastRowOffset = Math.max(\n      0,\n      rowCount * ((rowHeight: any): number) - height\n    );\n    const maxOffset = Math.min(\n      lastRowOffset,\n      rowIndex * ((rowHeight: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      rowIndex * ((rowHeight: any): number) -\n        height +\n        scrollbarSize +\n        ((rowHeight: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getColumnStartIndexForOffset: (\n    { columnWidth, columnCount }: Props<any>,\n    scrollLeft: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        Math.floor(scrollLeft / ((columnWidth: any): number))\n      )\n    ),\n\n  getColumnStopIndexForStartIndex: (\n    { columnWidth, columnCount, width }: Props<any>,\n    startIndex: number,\n    scrollLeft: number\n  ): number => {\n    const left = startIndex * ((columnWidth: any): number);\n    const numVisibleColumns = Math.ceil(\n      (width + scrollLeft - left) / ((columnWidth: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  getRowStartIndexForOffset: (\n    { rowHeight, rowCount }: Props<any>,\n    scrollTop: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(rowCount - 1, Math.floor(scrollTop / ((rowHeight: any): number)))\n    ),\n\n  getRowStopIndexForStartIndex: (\n    { rowHeight, rowCount, height }: Props<any>,\n    startIndex: number,\n    scrollTop: number\n  ): number => {\n    const top = startIndex * ((rowHeight: any): number);\n    const numVisibleRows = Math.ceil(\n      (height + scrollTop - top) / ((rowHeight: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        rowCount - 1,\n        startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      }\n\n      if (typeof rowHeight !== 'number') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeGrid;\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst FixedSizeList = createListComponent({\n  getItemOffset: ({ itemSize }: Props<any>, index: number): number =>\n    index * ((itemSize: any): number),\n\n  getItemSize: ({ itemSize }: Props<any>, index: number): number =>\n    ((itemSize: any): number),\n\n  getEstimatedTotalSize: ({ itemCount, itemSize }: Props<any>) =>\n    ((itemSize: any): number) * itemCount,\n\n  getOffsetForIndexAndAlignment: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const lastItemOffset = Math.max(\n      0,\n      itemCount * ((itemSize: any): number) - size\n    );\n    const maxOffset = Math.min(\n      lastItemOffset,\n      index * ((itemSize: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      index * ((itemSize: any): number) - size + ((itemSize: any): number)\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center': {\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(size / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n          return lastItemOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    { itemCount, itemSize }: Props<any>,\n    offset: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(itemCount - 1, Math.floor(offset / ((itemSize: any): number)))\n    ),\n\n  getStopIndexForStartIndex: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    startIndex: number,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const offset = startIndex * ((itemSize: any): number);\n    const size = (((isHorizontal ? width : height): any): number);\n    const numVisibleItems = Math.ceil(\n      (size + scrollOffset - offset) / ((itemSize: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        itemCount - 1,\n        startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeList;\n","// @flow\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nexport default function shallowDiffers(prev: Object, next: Object): boolean {\n  for (let attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n  for (let attribute in next) {\n    if (prev[attribute] !== next[attribute]) {\n      return true;\n    }\n  }\n  return false;\n}\n","// @flow\n\nimport shallowDiffers from './shallowDiffers';\n\n// Custom comparison function for React.memo().\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\nexport default function areEqual(\n  prevProps: Object,\n  nextProps: Object\n): boolean {\n  const { style: prevStyle, ...prevRest } = prevProps;\n  const { style: nextStyle, ...nextRest } = nextProps;\n\n  return (\n    !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest)\n  );\n}\n","// @flow\n\nimport areEqual from './areEqual';\nimport shallowDiffers from './shallowDiffers';\n\n// Custom shouldComponentUpdate for class components.\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\nexport default function shouldComponentUpdate(\n  nextProps: Object,\n  nextState: Object\n): boolean {\n  return (\n    !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}