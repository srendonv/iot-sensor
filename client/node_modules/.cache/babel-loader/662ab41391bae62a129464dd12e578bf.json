{"ast":null,"code":"import { name, date, random, internet } from \"faker\";\nimport { MongoClient } from \"mongodb\";\n\nconst doSome = function randomIntFromInterval(min, max) {\n  // min and max included \n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport default doSome; // async function findAll(){\n//     const uri = \"mongodb://127.0.0.1:27017\";\n//     const client = new MongoClient(uri, {\n//         useNewUrlParser: true,\n//         // useUnifiedTopology: true,\n//     });\n//     try{\n//         await client.connect();\n//         console.log(\"Connected correctly to server\");\n//         // const database = client.db(\"iot\");\n//         // const movies = database.collection(\"sensor\");\n//         const collection = client.db(\"iot\").collection(\"sensor\");\n//         const docs = await collection.find().toArray();\n//         // await docs.forEach(data => console.log(data.cat));\n//         console.log(docs);\n//         client.close();\n//     }catch(err){\n//         console.log(err.stack);\n//     }\n// }\n// async function seedDB() {\n//     // Connection URL\n//     const uri = \"mongodb://127.0.0.1:27017\";\n//     const client = new MongoClient(uri, {\n//         useNewUrlParser: true,\n//         // useUnifiedTopology: true,\n//     });\n//     try {\n//         await client.connect();\n//         console.log(\"Connected correctly to server\");\n//         const collection = client.db(\"iot\").collection(\"sensor\");\n//         await collection.drop();\n//         // make a bunch of time series data\n//         let timeSeriesData = [];\n//         for (let i = 0; i < 5000; i++) {\n//             const firstName = name.firstName();\n//             const lastName = name.lastName();\n//             let newDay = {\n//                 timestamp_day: date.past(),\n//                 cat: random.word(),\n//                 owner: {\n//                     email: internet.email(firstName, lastName),\n//                     firstName,\n//                     lastName,\n//                 },\n//                 events: [],\n//             };\n//             for (let j = 0; j < randomIntFromInterval(1, 6); j++) {\n//                 let newEvent = {\n//                     timestamp_event: date.past(),\n//                     weight: randomIntFromInterval(14,16),\n//                 }\n//                 newDay.events.push(newEvent);\n//             }\n//             timeSeriesData.push(newDay);\n//         }\n//         await collection.insertMany(timeSeriesData);\n//         console.log(\"Database seeded! :)\");\n//         client.close();\n//     } catch (err) {\n//         console.log(err.stack);\n//     }\n// }","map":{"version":3,"sources":["/Users/santiago/Documents/tulipan1637/iot-sensor/src/models/sensor.js"],"names":["name","date","random","internet","MongoClient","doSome","randomIntFromInterval","min","max","Math","floor"],"mappings":"AACA,SAASA,IAAT,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,WAAT,QAA4B,SAA5B;;AAEA,MAAMC,MAAM,GAAI,SAASC,qBAAT,CAA+BC,GAA/B,EAAoCC,GAApC,EAAyC;AAAE;AACvD,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACP,MAAL,MAAiBM,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACH,CAFD;;AAIA,eAAeF,MAAf,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\nimport { name, date, random, internet } from \"faker\";\nimport { MongoClient } from \"mongodb\";\n\nconst doSome =  function randomIntFromInterval(min, max) { // min and max included \n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default doSome;\n\n// async function findAll(){\n//     const uri = \"mongodb://127.0.0.1:27017\";\n\n//     const client = new MongoClient(uri, {\n//         useNewUrlParser: true,\n//         // useUnifiedTopology: true,\n//     });\n\n//     try{\n//         await client.connect();\n//         console.log(\"Connected correctly to server\");\n\n//         // const database = client.db(\"iot\");\n//         // const movies = database.collection(\"sensor\");\n\n//         const collection = client.db(\"iot\").collection(\"sensor\");\n\n//         const docs = await collection.find().toArray();\n//         // await docs.forEach(data => console.log(data.cat));\n\n//         console.log(docs);\n\n//         client.close();\n\n//     }catch(err){\n//         console.log(err.stack);\n//     }\n\n\n// }\n\n// async function seedDB() {\n//     // Connection URL\n//     const uri = \"mongodb://127.0.0.1:27017\";\n\n//     const client = new MongoClient(uri, {\n//         useNewUrlParser: true,\n//         // useUnifiedTopology: true,\n//     });\n\n//     try {\n//         await client.connect();\n//         console.log(\"Connected correctly to server\");\n\n//         const collection = client.db(\"iot\").collection(\"sensor\");\n\n  \n//         await collection.drop();\n\n//         // make a bunch of time series data\n//         let timeSeriesData = [];\n\n//         for (let i = 0; i < 5000; i++) {\n//             const firstName = name.firstName();\n//             const lastName = name.lastName();\n//             let newDay = {\n//                 timestamp_day: date.past(),\n//                 cat: random.word(),\n//                 owner: {\n//                     email: internet.email(firstName, lastName),\n//                     firstName,\n//                     lastName,\n//                 },\n//                 events: [],\n//             };\n\n//             for (let j = 0; j < randomIntFromInterval(1, 6); j++) {\n//                 let newEvent = {\n//                     timestamp_event: date.past(),\n//                     weight: randomIntFromInterval(14,16),\n//                 }\n//                 newDay.events.push(newEvent);\n//             }\n//             timeSeriesData.push(newDay);\n//         }\n//         await collection.insertMany(timeSeriesData);\n\n//         console.log(\"Database seeded! :)\");\n//         client.close();\n//     } catch (err) {\n//         console.log(err.stack);\n//     }\n// }\n"]},"metadata":{},"sourceType":"module"}