{"ast":null,"code":"var _jsxFileName = \"/Users/santiago/Documents/tulipan1637/iot-sensor/app/src/features/table/TableV2.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Table } from 'react-bootstrap';\nimport { useTable, useBlockLayout, useGlobalFilter, useSortBy } from 'react-table'; // import {GlobalFilter} from '../GlobalFilter';\n\nimport scrollbarWidth from './scrollbarWidth';\nimport { FixedSizeList } from 'react-window';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GlobalFilter(_ref) {\n  _s();\n\n  let {\n    globalFilter\n  } = _ref;\n  const [value, setValue] = useState(globalFilter);\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    value: value || \"\",\n    onChange: e => {\n      setValue(e.target.value); //   onChange(e.target.value);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GlobalFilter, \"9vmPTe1Pigpr+YTh6jOmxgoj2Zs=\");\n\n_c = GlobalFilter;\nexport function TableV2(_ref2) {\n  _s2();\n\n  let {\n    columns,\n    data\n  } = _ref2;\n  const defaultColumn = React.useMemo(() => ({\n    width: 150\n  }), []);\n  const scrollBarSize = React.useMemo(() => scrollbarWidth(), []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    totalColumnsWidth,\n    prepareRow,\n    state: {\n      globalFilter\n    },\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter\n  } = useTable({\n    columns,\n    data,\n    defaultColumn\n  }, useBlockLayout, useGlobalFilter, useSortBy);\n  const RenderRow = React.useCallback(_ref3 => {\n    let {\n      index,\n      style\n    } = _ref3;\n    const row = rows[index];\n    prepareRow(row);\n    return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps({\n        style\n      }),\n      className: \"tr\",\n      children: row.cells.map(cell => {\n        return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n          className: \"td\",\n          children: cell.render('Cell')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this);\n  }, [prepareRow, rows]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Table, { ...getTableProps(),\n      striped: true,\n      bordered: true,\n      hover: true,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"th\", {\n            colSpan: visibleColumns.length,\n            children: /*#__PURE__*/_jsxDEV(GlobalFilter, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n            children: column.render('Header')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: /*#__PURE__*/_jsxDEV(FixedSizeList, {\n          height: 500,\n          itemCount: rows.length,\n          itemSize: 45,\n          width: totalColumnsWidth + scrollBarSize,\n          children: RenderRow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(TableV2, \"lOUGBOwKwu1IFnUjocx/kO8DUbw=\", false, function () {\n  return [useTable];\n});\n\n_c2 = TableV2;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GlobalFilter\");\n$RefreshReg$(_c2, \"TableV2\");","map":{"version":3,"sources":["/Users/santiago/Documents/tulipan1637/iot-sensor/app/src/features/table/TableV2.js"],"names":["React","useState","Table","useTable","useBlockLayout","useGlobalFilter","useSortBy","scrollbarWidth","FixedSizeList","GlobalFilter","globalFilter","value","setValue","e","target","TableV2","columns","data","defaultColumn","useMemo","width","scrollBarSize","getTableProps","getTableBodyProps","headerGroups","rows","totalColumnsWidth","prepareRow","state","visibleColumns","preGlobalFilteredRows","setGlobalFilter","RenderRow","useCallback","index","style","row","getRowProps","cells","map","cell","getCellProps","render","length","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport {Table} from 'react-bootstrap';\nimport {useTable, useBlockLayout, useGlobalFilter, useSortBy} from 'react-table';\n// import {GlobalFilter} from '../GlobalFilter';\nimport scrollbarWidth from './scrollbarWidth';\nimport { FixedSizeList } from 'react-window';\n\nfunction GlobalFilter({globalFilter}){\n  const [value, setValue] = useState(globalFilter);\n\n  return (\n    <input  value={value || \"\"}\n            onChange={e => {\n                setValue(e.target.value);\n    //   onChange(e.target.value);\n    }}\n  />);\n}\n\nexport function TableV2({ columns, data }){\n\n\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      width: 150,\n    }),\n    []\n  )\n\n  const scrollBarSize = React.useMemo(() => scrollbarWidth(), [])\n    \n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    totalColumnsWidth,\n    prepareRow,\n    state: { globalFilter },\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter\n  } = useTable({ columns, data, defaultColumn },useBlockLayout, useGlobalFilter, useSortBy);\n\n\n  const RenderRow = React.useCallback(\n    ({ index, style }) => {\n      const row = rows[index]\n      prepareRow(row)\n      return (\n        <tr\n          {...row.getRowProps({\n            style,\n          })}\n          className=\"tr\"\n        >\n          {row.cells.map(cell => {\n            return (\n              <td {...cell.getCellProps()} className=\"td\">\n                {cell.render('Cell')}\n              </td>\n            )\n          })}\n        </tr>\n      )\n    },\n    [prepareRow, rows]\n  )\n\n      return (\n        <div>\n        <Table {...getTableProps()} striped bordered hover>\n          <thead>\n          <tr>\n          <th\n            colSpan={visibleColumns.length}\n          >\n            <GlobalFilter\n\n            />\n          </th>\n        </tr>\n            {headerGroups.map(headerGroup => (\n              <tr {...headerGroup.getHeaderGroupProps()} >\n                {headerGroup.headers.map(column => (\n                  <th {...column.getHeaderProps()} >\n                    {column.render('Header')}\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n    \n          <tbody {...getTableBodyProps()}>\n            <FixedSizeList\n              height={500}\n              itemCount={rows.length}\n              itemSize={45}\n              width={totalColumnsWidth+scrollBarSize}\n            >\n              {RenderRow}\n            </FixedSizeList>\n          </tbody>\n        </Table>\n        </div>\n      )\n}\n"]},"metadata":{},"sourceType":"module"}