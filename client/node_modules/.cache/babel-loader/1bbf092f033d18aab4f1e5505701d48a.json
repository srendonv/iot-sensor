{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parsePackageVersion = exports.supportsRetryableWrites = exports.enumToString = exports.emitWarningOnce = exports.emitWarning = exports.MONGODB_WARNING_CODE = exports.DEFAULT_PK_FACTORY = exports.HostAddress = exports.BufferPool = exports.deepCopy = exports.isRecord = exports.setDifference = exports.isHello = exports.isSuperset = exports.resolveOptions = exports.hasAtomicOperators = exports.makeInterruptibleAsyncInterval = exports.calculateDurationInMs = exports.now = exports.makeClientMetadata = exports.makeStateMachine = exports.errorStrictEqual = exports.arrayStrictEqual = exports.eachAsyncSeries = exports.eachAsync = exports.collationNotSupported = exports.maxWireVersion = exports.uuidV4 = exports.databaseNamespace = exports.maybePromise = exports.makeCounter = exports.MongoDBNamespace = exports.ns = exports.deprecateOptions = exports.defaultMsgHandler = exports.getTopology = exports.decorateWithExplain = exports.decorateWithReadConcern = exports.decorateWithCollation = exports.isPromiseLike = exports.applyWriteConcern = exports.applyRetryableWrites = exports.executeLegacyOperation = exports.filterOptions = exports.mergeOptions = exports.isObject = exports.parseIndexOptions = exports.normalizeHintField = exports.checkCollectionName = exports.MAX_JS_INT = void 0;\nexports.commandSupportsReadConcern = exports.shuffle = void 0;\n\nconst crypto = require(\"crypto\");\n\nconst os = require(\"os\");\n\nconst url_1 = require(\"url\");\n\nconst bson_1 = require(\"./bson\");\n\nconst constants_1 = require(\"./cmap/wire_protocol/constants\");\n\nconst constants_2 = require(\"./constants\");\n\nconst error_1 = require(\"./error\");\n\nconst promise_provider_1 = require(\"./promise_provider\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst common_1 = require(\"./sdam/common\");\n\nconst write_concern_1 = require(\"./write_concern\");\n\nexports.MAX_JS_INT = Number.MAX_SAFE_INTEGER + 1;\n/**\n * Throws if collectionName is not a valid mongodb collection namespace.\n * @internal\n */\n\nfunction checkCollectionName(collectionName) {\n  if ('string' !== typeof collectionName) {\n    throw new error_1.MongoInvalidArgumentError('Collection name must be a String');\n  }\n\n  if (!collectionName || collectionName.indexOf('..') !== -1) {\n    throw new error_1.MongoInvalidArgumentError('Collection names cannot be empty');\n  }\n\n  if (collectionName.indexOf('$') !== -1 && collectionName.match(/((^\\$cmd)|(oplog\\.\\$main))/) == null) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new error_1.MongoInvalidArgumentError(\"Collection names must not contain '$'\");\n  }\n\n  if (collectionName.match(/^\\.|\\.$/) != null) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new error_1.MongoInvalidArgumentError(\"Collection names must not start or end with '.'\");\n  } // Validate that we are not passing 0x00 in the collection name\n\n\n  if (collectionName.indexOf('\\x00') !== -1) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new error_1.MongoInvalidArgumentError('Collection names cannot contain a null character');\n  }\n}\n\nexports.checkCollectionName = checkCollectionName;\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\n\nfunction normalizeHintField(hint) {\n  let finalHint = undefined;\n\n  if (typeof hint === 'string') {\n    finalHint = hint;\n  } else if (Array.isArray(hint)) {\n    finalHint = {};\n    hint.forEach(param => {\n      finalHint[param] = 1;\n    });\n  } else if (hint != null && typeof hint === 'object') {\n    finalHint = {};\n\n    for (const name in hint) {\n      finalHint[name] = hint[name];\n    }\n  }\n\n  return finalHint;\n}\n\nexports.normalizeHintField = normalizeHintField;\n/**\n * Create an index specifier based on\n * @internal\n */\n\nfunction parseIndexOptions(indexSpec) {\n  const fieldHash = {};\n  const indexes = [];\n  let keys; // Get all the fields accordingly\n\n  if ('string' === typeof indexSpec) {\n    // 'type'\n    indexes.push(indexSpec + '_' + 1);\n    fieldHash[indexSpec] = 1;\n  } else if (Array.isArray(indexSpec)) {\n    indexSpec.forEach(f => {\n      if ('string' === typeof f) {\n        // [{location:'2d'}, 'type']\n        indexes.push(f + '_' + 1);\n        fieldHash[f] = 1;\n      } else if (Array.isArray(f)) {\n        // [['location', '2d'],['type', 1]]\n        indexes.push(f[0] + '_' + (f[1] || 1));\n        fieldHash[f[0]] = f[1] || 1;\n      } else if (isObject(f)) {\n        // [{location:'2d'}, {type:1}]\n        keys = Object.keys(f);\n        keys.forEach(k => {\n          indexes.push(k + '_' + f[k]);\n          fieldHash[k] = f[k];\n        });\n      } else {// undefined (ignore)\n      }\n    });\n  } else if (isObject(indexSpec)) {\n    // {location:'2d', type:1}\n    keys = Object.keys(indexSpec);\n    Object.entries(indexSpec).forEach(_ref => {\n      let [key, value] = _ref;\n      indexes.push(key + '_' + value);\n      fieldHash[key] = value;\n    });\n  }\n\n  return {\n    name: indexes.join('_'),\n    keys: keys,\n    fieldHash: fieldHash\n  };\n}\n\nexports.parseIndexOptions = parseIndexOptions;\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nfunction isObject(arg) {\n  return '[object Object]' === Object.prototype.toString.call(arg);\n}\n\nexports.isObject = isObject;\n/** @internal */\n\nfunction mergeOptions(target, source) {\n  return { ...target,\n    ...source\n  };\n}\n\nexports.mergeOptions = mergeOptions;\n/** @internal */\n\nfunction filterOptions(options, names) {\n  const filterOptions = {};\n\n  for (const name in options) {\n    if (names.includes(name)) {\n      filterOptions[name] = options[name];\n    }\n  } // Filtered options\n\n\n  return filterOptions;\n}\n\nexports.filterOptions = filterOptions;\n/**\n * Executes the given operation with provided arguments.\n *\n * @remarks\n * This method reduces large amounts of duplication in the entire codebase by providing\n * a single point for determining whether callbacks or promises should be used. Additionally\n * it allows for a single point of entry to provide features such as implicit sessions, which\n * are required by the Driver Sessions specification in the event that a ClientSession is\n * not provided\n *\n * @internal\n *\n * @param topology - The topology to execute this operation on\n * @param operation - The operation to execute\n * @param args - Arguments to apply the provided operation\n * @param options - Options that modify the behavior of the method\n */\n\nfunction executeLegacyOperation(topology, operation, args, options) {\n  const Promise = promise_provider_1.PromiseProvider.get();\n\n  if (!Array.isArray(args)) {\n    // TODO(NODE-3483)\n    throw new error_1.MongoRuntimeError('This method requires an array of arguments to apply');\n  }\n\n  options = options !== null && options !== void 0 ? options : {};\n  let callback = args[args.length - 1]; // The driver sessions spec mandates that we implicitly create sessions for operations\n  // that are not explicitly provided with a session.\n\n  let session;\n  let opOptions;\n  let owner;\n\n  if (!options.skipSessions && topology.hasSessionSupport()) {\n    opOptions = args[args.length - 2];\n\n    if (opOptions == null || opOptions.session == null) {\n      owner = Symbol();\n      session = topology.startSession({\n        owner\n      });\n      const optionsIndex = args.length - 2;\n      args[optionsIndex] = Object.assign({}, args[optionsIndex], {\n        session: session\n      });\n    } else if (opOptions.session && opOptions.session.hasEnded) {\n      throw new error_1.MongoExpiredSessionError();\n    }\n  }\n\n  function makeExecuteCallback(resolve, reject) {\n    return function (err, result) {\n      if (session && session.owner === owner && !(options === null || options === void 0 ? void 0 : options.returnsCursor)) {\n        session.endSession(() => {\n          delete opOptions.session;\n          if (err) return reject(err);\n          resolve(result);\n        });\n      } else {\n        if (err) return reject(err);\n        resolve(result);\n      }\n    };\n  } // Execute using callback\n\n\n  if (typeof callback === 'function') {\n    callback = args.pop();\n    const handler = makeExecuteCallback(result => callback(undefined, result), err => callback(err, null));\n    args.push(handler);\n\n    try {\n      return operation(...args);\n    } catch (e) {\n      handler(e);\n      throw e;\n    }\n  } // Return a Promise\n\n\n  if (args[args.length - 1] != null) {\n    // TODO(NODE-3483)\n    throw new error_1.MongoRuntimeError('Final argument to `executeLegacyOperation` must be a callback');\n  }\n\n  return new Promise((resolve, reject) => {\n    const handler = makeExecuteCallback(resolve, reject);\n    args[args.length - 1] = handler;\n\n    try {\n      return operation(...args);\n    } catch (e) {\n      handler(e);\n    }\n  });\n}\n\nexports.executeLegacyOperation = executeLegacyOperation;\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\n\nfunction applyRetryableWrites(target, db) {\n  var _a;\n\n  if (db && ((_a = db.s.options) === null || _a === void 0 ? void 0 : _a.retryWrites)) {\n    target.retryWrites = true;\n  }\n\n  return target;\n}\n\nexports.applyRetryableWrites = applyRetryableWrites;\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\n\nfunction applyWriteConcern(target, sources, options) {\n  options = options !== null && options !== void 0 ? options : {};\n  const db = sources.db;\n  const coll = sources.collection;\n\n  if (options.session && options.session.inTransaction()) {\n    // writeConcern is not allowed within a multi-statement transaction\n    if (target.writeConcern) {\n      delete target.writeConcern;\n    }\n\n    return target;\n  }\n\n  const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n\n  if (writeConcern) {\n    return Object.assign(target, {\n      writeConcern\n    });\n  }\n\n  if (coll && coll.writeConcern) {\n    return Object.assign(target, {\n      writeConcern: Object.assign({}, coll.writeConcern)\n    });\n  }\n\n  if (db && db.writeConcern) {\n    return Object.assign(target, {\n      writeConcern: Object.assign({}, db.writeConcern)\n    });\n  }\n\n  return target;\n}\n\nexports.applyWriteConcern = applyWriteConcern;\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The result type of maybePromise\n * @param maybePromise - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\n\nfunction isPromiseLike(maybePromise) {\n  return !!maybePromise && typeof maybePromise.then === 'function';\n}\n\nexports.isPromiseLike = isPromiseLike;\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\n\nfunction decorateWithCollation(command, target, options) {\n  const capabilities = getTopology(target).capabilities;\n\n  if (options.collation && typeof options.collation === 'object') {\n    if (capabilities && capabilities.commandsTakeCollation) {\n      command.collation = options.collation;\n    } else {\n      throw new error_1.MongoCompatibilityError(`Current topology does not support collation`);\n    }\n  }\n}\n\nexports.decorateWithCollation = decorateWithCollation;\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\n\nfunction decorateWithReadConcern(command, coll, options) {\n  if (options && options.session && options.session.inTransaction()) {\n    return;\n  }\n\n  const readConcern = Object.assign({}, command.readConcern || {});\n\n  if (coll.s.readConcern) {\n    Object.assign(readConcern, coll.s.readConcern);\n  }\n\n  if (Object.keys(readConcern).length > 0) {\n    Object.assign(command, {\n      readConcern: readConcern\n    });\n  }\n}\n\nexports.decorateWithReadConcern = decorateWithReadConcern;\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\n\nfunction decorateWithExplain(command, explain) {\n  if (command.explain) {\n    return command;\n  }\n\n  return {\n    explain: command,\n    verbosity: explain.verbosity\n  };\n}\n\nexports.decorateWithExplain = decorateWithExplain;\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @internal\n */\n\nfunction getTopology(provider) {\n  if (`topology` in provider && provider.topology) {\n    return provider.topology;\n  } else if ('client' in provider.s && provider.s.client.topology) {\n    return provider.s.client.topology;\n  } else if ('db' in provider.s && provider.s.db.s.client.topology) {\n    return provider.s.db.s.client.topology;\n  }\n\n  throw new error_1.MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\n\nexports.getTopology = getTopology;\n/**\n * Default message handler for generating deprecation warnings.\n * @internal\n *\n * @param name - function name\n * @param option - option name\n * @returns warning message\n */\n\nfunction defaultMsgHandler(name, option) {\n  return `${name} option [${option}] is deprecated and will be removed in a later version.`;\n}\n\nexports.defaultMsgHandler = defaultMsgHandler;\n/**\n * Deprecates a given function's options.\n * @internal\n *\n * @param this - the bound class if this is a method\n * @param config - configuration for deprecation\n * @param fn - the target function of deprecation\n * @returns modified function that warns once per deprecated option, and executes original function\n */\n\nfunction deprecateOptions(config, fn) {\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  const msgHandler = config.msgHandler ? config.msgHandler : defaultMsgHandler;\n  const optionsWarned = new Set();\n\n  function deprecated() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    const options = args[config.optionsIndex]; // ensure options is a valid, non-empty object, otherwise short-circuit\n\n    if (!isObject(options) || Object.keys(options).length === 0) {\n      return fn.bind(this)(...args); // call the function, no change\n    } // interrupt the function call with a warning\n\n\n    for (const deprecatedOption of config.deprecatedOptions) {\n      if (deprecatedOption in options && !optionsWarned.has(deprecatedOption)) {\n        optionsWarned.add(deprecatedOption);\n        const msg = msgHandler(config.name, deprecatedOption);\n        emitWarning(msg);\n\n        if (this && 'getLogger' in this) {\n          const logger = this.getLogger();\n\n          if (logger) {\n            logger.warn(msg);\n          }\n        }\n      }\n    }\n\n    return fn.bind(this)(...args);\n  } // These lines copied from https://github.com/nodejs/node/blob/25e5ae41688676a5fd29b2e2e7602168eee4ceb5/lib/internal/util.js#L73-L80\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\n\n\n  Object.setPrototypeOf(deprecated, fn);\n\n  if (fn.prototype) {\n    // Setting this (rather than using Object.setPrototype, as above) ensures\n    // that calling the unwrapped constructor gives an instanceof the wrapped\n    // constructor.\n    deprecated.prototype = fn.prototype;\n  }\n\n  return deprecated;\n}\n\nexports.deprecateOptions = deprecateOptions;\n/** @internal */\n\nfunction ns(ns) {\n  return MongoDBNamespace.fromString(ns);\n}\n\nexports.ns = ns;\n/** @public */\n\nclass MongoDBNamespace {\n  /**\n   * Create a namespace object\n   *\n   * @param db - database name\n   * @param collection - collection name\n   */\n  constructor(db, collection) {\n    this.db = db;\n    this.collection = collection;\n  }\n\n  toString() {\n    return this.collection ? `${this.db}.${this.collection}` : this.db;\n  }\n\n  withCollection(collection) {\n    return new MongoDBNamespace(this.db, collection);\n  }\n\n  static fromString(namespace) {\n    if (!namespace) {\n      // TODO(NODE-3483): Replace with MongoNamespaceError\n      throw new error_1.MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n    }\n\n    const [db, ...collection] = namespace.split('.');\n    return new MongoDBNamespace(db, collection.join('.'));\n  }\n\n}\n\nexports.MongoDBNamespace = MongoDBNamespace;\n/** @internal */\n\nfunction* makeCounter() {\n  let seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let count = seed;\n\n  while (true) {\n    const newCount = count;\n    count += 1;\n    yield newCount;\n  }\n}\n\nexports.makeCounter = makeCounter;\n/**\n * Helper function for either accepting a callback, or returning a promise\n * @internal\n *\n * @param callback - The last function argument in exposed method, controls if a Promise is returned\n * @param wrapper - A function that wraps the callback\n * @returns Returns void if a callback is supplied, else returns a Promise.\n */\n\nfunction maybePromise(callback, wrapper) {\n  const Promise = promise_provider_1.PromiseProvider.get();\n  let result;\n\n  if (typeof callback !== 'function') {\n    result = new Promise((resolve, reject) => {\n      callback = (err, res) => {\n        if (err) return reject(err);\n        resolve(res);\n      };\n    });\n  }\n\n  wrapper((err, res) => {\n    if (err != null) {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        callback(err);\n      } catch (error) {\n        process.nextTick(() => {\n          throw error;\n        });\n      }\n\n      return;\n    } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n\n    callback(err, res);\n  });\n  return result;\n}\n\nexports.maybePromise = maybePromise;\n/** @internal */\n\nfunction databaseNamespace(ns) {\n  return ns.split('.')[0];\n}\n\nexports.databaseNamespace = databaseNamespace;\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\n\nfunction uuidV4() {\n  const result = crypto.randomBytes(16);\n  result[6] = result[6] & 0x0f | 0x40;\n  result[8] = result[8] & 0x3f | 0x80;\n  return result;\n}\n\nexports.uuidV4 = uuidV4;\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\n\nfunction maxWireVersion(topologyOrServer) {\n  if (topologyOrServer) {\n    if (topologyOrServer.loadBalanced) {\n      // Since we do not have a monitor, we assume the load balanced server is always\n      // pointed at the latest mongodb version. There is a risk that for on-prem\n      // deployments that don't upgrade immediately that this could alert to the\n      // application that a feature is avaiable that is actually not.\n      return constants_1.MAX_SUPPORTED_WIRE_VERSION;\n    }\n\n    if (topologyOrServer.hello) {\n      return topologyOrServer.hello.maxWireVersion;\n    }\n\n    if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n      const lastHello = topologyOrServer.lastHello();\n\n      if (lastHello) {\n        return lastHello.maxWireVersion;\n      }\n    }\n\n    if (topologyOrServer.description && 'maxWireVersion' in topologyOrServer.description && topologyOrServer.description.maxWireVersion != null) {\n      return topologyOrServer.description.maxWireVersion;\n    }\n  }\n\n  return 0;\n}\n\nexports.maxWireVersion = maxWireVersion;\n/**\n * Checks that collation is supported by server.\n * @internal\n *\n * @param server - to check against\n * @param cmd - object where collation may be specified\n */\n\nfunction collationNotSupported(server, cmd) {\n  return cmd && cmd.collation && maxWireVersion(server) < 5;\n}\n\nexports.collationNotSupported = collationNotSupported;\n/**\n * Applies the function `eachFn` to each item in `arr`, in parallel.\n * @internal\n *\n * @param arr - An array of items to asynchronously iterate over\n * @param eachFn - A function to call on each item of the array. The callback signature is `(item, callback)`, where the callback indicates iteration is complete.\n * @param callback - The callback called after every item has been iterated\n */\n\nfunction eachAsync(arr, eachFn, callback) {\n  arr = arr || [];\n  let idx = 0;\n  let awaiting = 0;\n\n  for (idx = 0; idx < arr.length; ++idx) {\n    awaiting++;\n    eachFn(arr[idx], eachCallback);\n  }\n\n  if (awaiting === 0) {\n    callback();\n    return;\n  }\n\n  function eachCallback(err) {\n    awaiting--;\n\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    if (idx === arr.length && awaiting <= 0) {\n      callback();\n    }\n  }\n}\n\nexports.eachAsync = eachAsync;\n/** @internal */\n\nfunction eachAsyncSeries(arr, eachFn, callback) {\n  arr = arr || [];\n  let idx = 0;\n  let awaiting = arr.length;\n\n  if (awaiting === 0) {\n    callback();\n    return;\n  }\n\n  function eachCallback(err) {\n    idx++;\n    awaiting--;\n\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    if (idx === arr.length && awaiting <= 0) {\n      callback();\n      return;\n    }\n\n    eachFn(arr[idx], eachCallback);\n  }\n\n  eachFn(arr[idx], eachCallback);\n}\n\nexports.eachAsyncSeries = eachAsyncSeries;\n/** @internal */\n\nfunction arrayStrictEqual(arr, arr2) {\n  if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n    return false;\n  }\n\n  return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\n\nexports.arrayStrictEqual = arrayStrictEqual;\n/** @internal */\n\nfunction errorStrictEqual(lhs, rhs) {\n  if (lhs === rhs) {\n    return true;\n  }\n\n  if (!lhs || !rhs) {\n    return lhs === rhs;\n  }\n\n  if (lhs == null && rhs != null || lhs != null && rhs == null) {\n    return false;\n  }\n\n  if (lhs.constructor.name !== rhs.constructor.name) {\n    return false;\n  }\n\n  if (lhs.message !== rhs.message) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.errorStrictEqual = errorStrictEqual;\n/** @internal */\n\nfunction makeStateMachine(stateTable) {\n  return function stateTransition(target, newState) {\n    const legalStates = stateTable[target.s.state];\n\n    if (legalStates && legalStates.indexOf(newState) < 0) {\n      throw new error_1.MongoRuntimeError(`illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`);\n    }\n\n    target.emit('stateChanged', target.s.state, newState);\n    target.s.state = newState;\n  };\n}\n\nexports.makeStateMachine = makeStateMachine; // eslint-disable-next-line @typescript-eslint/no-var-requires\n\nconst NODE_DRIVER_VERSION = require('../package.json').version;\n\nfunction makeClientMetadata(options) {\n  options = options !== null && options !== void 0 ? options : {};\n  const metadata = {\n    driver: {\n      name: 'nodejs',\n      version: NODE_DRIVER_VERSION\n    },\n    os: {\n      type: os.type(),\n      name: process.platform,\n      architecture: process.arch,\n      version: os.release()\n    },\n    platform: `Node.js ${process.version}, ${os.endianness()} (unified)`\n  }; // support optionally provided wrapping driver info\n\n  if (options.driverInfo) {\n    if (options.driverInfo.name) {\n      metadata.driver.name = `${metadata.driver.name}|${options.driverInfo.name}`;\n    }\n\n    if (options.driverInfo.version) {\n      metadata.version = `${metadata.driver.version}|${options.driverInfo.version}`;\n    }\n\n    if (options.driverInfo.platform) {\n      metadata.platform = `${metadata.platform}|${options.driverInfo.platform}`;\n    }\n  }\n\n  if (options.appName) {\n    // MongoDB requires the appName not exceed a byte length of 128\n    const buffer = Buffer.from(options.appName);\n    metadata.application = {\n      name: buffer.byteLength > 128 ? buffer.slice(0, 128).toString('utf8') : options.appName\n    };\n  }\n\n  return metadata;\n}\n\nexports.makeClientMetadata = makeClientMetadata;\n/** @internal */\n\nfunction now() {\n  const hrtime = process.hrtime();\n  return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\n\nexports.now = now;\n/** @internal */\n\nfunction calculateDurationInMs(started) {\n  if (typeof started !== 'number') {\n    throw new error_1.MongoInvalidArgumentError('Numeric value required to calculate duration');\n  }\n\n  const elapsed = now() - started;\n  return elapsed < 0 ? 0 : elapsed;\n}\n\nexports.calculateDurationInMs = calculateDurationInMs;\n/**\n * Creates an interval timer which is able to be woken up sooner than\n * the interval. The timer will also debounce multiple calls to wake\n * ensuring that the function is only ever called once within a minimum\n * interval window.\n * @internal\n *\n * @param fn - An async function to run on an interval, must accept a `callback` as its only parameter\n */\n\nfunction makeInterruptibleAsyncInterval(fn, options) {\n  let timerId;\n  let lastCallTime;\n  let cannotBeExpedited = false;\n  let stopped = false;\n  options = options !== null && options !== void 0 ? options : {};\n  const interval = options.interval || 1000;\n  const minInterval = options.minInterval || 500;\n  const immediate = typeof options.immediate === 'boolean' ? options.immediate : false;\n  const clock = typeof options.clock === 'function' ? options.clock : now;\n\n  function wake() {\n    const currentTime = clock();\n    const nextScheduledCallTime = lastCallTime + interval;\n    const timeUntilNextCall = nextScheduledCallTime - currentTime; // For the streaming protocol: there is nothing obviously stopping this\n    // interval from being woken up again while we are waiting \"infinitely\"\n    // for `fn` to be called again`. Since the function effectively\n    // never completes, the `timeUntilNextCall` will continue to grow\n    // negatively unbounded, so it will never trigger a reschedule here.\n    // This is possible in virtualized environments like AWS Lambda where our\n    // clock is unreliable. In these cases the timer is \"running\" but never\n    // actually completes, so we want to execute immediately and then attempt\n    // to reschedule.\n\n    if (timeUntilNextCall < 0) {\n      executeAndReschedule();\n      return;\n    } // debounce multiple calls to wake within the `minInterval`\n\n\n    if (cannotBeExpedited) {\n      return;\n    } // reschedule a call as soon as possible, ensuring the call never happens\n    // faster than the `minInterval`\n\n\n    if (timeUntilNextCall > minInterval) {\n      reschedule(minInterval);\n      cannotBeExpedited = true;\n    }\n  }\n\n  function stop() {\n    stopped = true;\n\n    if (timerId) {\n      clearTimeout(timerId);\n      timerId = undefined;\n    }\n\n    lastCallTime = 0;\n    cannotBeExpedited = false;\n  }\n\n  function reschedule(ms) {\n    if (stopped) return;\n\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n\n    timerId = setTimeout(executeAndReschedule, ms || interval);\n  }\n\n  function executeAndReschedule() {\n    cannotBeExpedited = false;\n    lastCallTime = clock();\n    fn(err => {\n      if (err) throw err;\n      reschedule(interval);\n    });\n  }\n\n  if (immediate) {\n    executeAndReschedule();\n  } else {\n    lastCallTime = clock();\n    reschedule(undefined);\n  }\n\n  return {\n    wake,\n    stop\n  };\n}\n\nexports.makeInterruptibleAsyncInterval = makeInterruptibleAsyncInterval;\n/** @internal */\n\nfunction hasAtomicOperators(doc) {\n  if (Array.isArray(doc)) {\n    for (const document of doc) {\n      if (hasAtomicOperators(document)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  const keys = Object.keys(doc);\n  return keys.length > 0 && keys[0][0] === '$';\n}\n\nexports.hasAtomicOperators = hasAtomicOperators;\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n * @internal\n */\n\nfunction resolveOptions(parent, options) {\n  var _a, _b, _c;\n\n  const result = Object.assign({}, options, (0, bson_1.resolveBSONOptions)(options, parent)); // Users cannot pass a readConcern/writeConcern to operations in a transaction\n\n  const session = options === null || options === void 0 ? void 0 : options.session;\n\n  if (!(session === null || session === void 0 ? void 0 : session.inTransaction())) {\n    const readConcern = (_a = read_concern_1.ReadConcern.fromOptions(options)) !== null && _a !== void 0 ? _a : parent === null || parent === void 0 ? void 0 : parent.readConcern;\n\n    if (readConcern) {\n      result.readConcern = readConcern;\n    }\n\n    const writeConcern = (_b = write_concern_1.WriteConcern.fromOptions(options)) !== null && _b !== void 0 ? _b : parent === null || parent === void 0 ? void 0 : parent.writeConcern;\n\n    if (writeConcern) {\n      result.writeConcern = writeConcern;\n    }\n  }\n\n  const readPreference = (_c = read_preference_1.ReadPreference.fromOptions(options)) !== null && _c !== void 0 ? _c : parent === null || parent === void 0 ? void 0 : parent.readPreference;\n\n  if (readPreference) {\n    result.readPreference = readPreference;\n  }\n\n  return result;\n}\n\nexports.resolveOptions = resolveOptions;\n\nfunction isSuperset(set, subset) {\n  set = Array.isArray(set) ? new Set(set) : set;\n  subset = Array.isArray(subset) ? new Set(subset) : subset;\n\n  for (const elem of subset) {\n    if (!set.has(elem)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.isSuperset = isSuperset;\n/**\n * Checks if the document is a Hello request\n * @internal\n */\n\nfunction isHello(doc) {\n  return doc[constants_2.LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\n\nexports.isHello = isHello;\n/** Returns the items that are uniquely in setA */\n\nfunction setDifference(setA, setB) {\n  const difference = new Set(setA);\n\n  for (const elem of setB) {\n    difference.delete(elem);\n  }\n\n  return difference;\n}\n\nexports.setDifference = setDifference;\n\nfunction isRecord(value) {\n  let requiredKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  const toString = Object.prototype.toString;\n  const hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  const isObject = v => toString.call(v) === '[object Object]';\n\n  if (!isObject(value)) {\n    return false;\n  }\n\n  const ctor = value.constructor;\n\n  if (ctor && ctor.prototype) {\n    if (!isObject(ctor.prototype)) {\n      return false;\n    } // Check to see if some method exists from the Object exists\n\n\n    if (!hasOwnProperty.call(ctor.prototype, 'isPrototypeOf')) {\n      return false;\n    }\n  }\n\n  if (requiredKeys) {\n    const keys = Object.keys(value);\n    return isSuperset(keys, requiredKeys);\n  }\n\n  return true;\n}\n\nexports.isRecord = isRecord;\n/**\n * Make a deep copy of an object\n *\n * NOTE: This is not meant to be the perfect implementation of a deep copy,\n * but instead something that is good enough for the purposes of\n * command monitoring.\n */\n\nfunction deepCopy(value) {\n  if (value == null) {\n    return value;\n  } else if (Array.isArray(value)) {\n    return value.map(item => deepCopy(item));\n  } else if (isRecord(value)) {\n    const res = {};\n\n    for (const key in value) {\n      res[key] = deepCopy(value[key]);\n    }\n\n    return res;\n  }\n\n  const ctor = value.constructor;\n\n  if (ctor) {\n    switch (ctor.name.toLowerCase()) {\n      case 'date':\n        return new ctor(Number(value));\n\n      case 'map':\n        return new Map(value);\n\n      case 'set':\n        return new Set(value);\n\n      case 'buffer':\n        return Buffer.from(value);\n    }\n  }\n\n  return value;\n}\n\nexports.deepCopy = deepCopy;\n/** @internal */\n\nconst kBuffers = Symbol('buffers');\n/** @internal */\n\nconst kLength = Symbol('length');\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\n\nclass BufferPool {\n  constructor() {\n    this[kBuffers] = [];\n    this[kLength] = 0;\n  }\n\n  get length() {\n    return this[kLength];\n  }\n  /** Adds a buffer to the internal buffer pool list */\n\n\n  append(buffer) {\n    this[kBuffers].push(buffer);\n    this[kLength] += buffer.length;\n  }\n  /** Returns the requested number of bytes without consuming them */\n\n\n  peek(size) {\n    return this.read(size, false);\n  }\n  /** Reads the requested number of bytes, optionally consuming them */\n\n\n  read(size) {\n    let consume = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (typeof size !== 'number' || size < 0) {\n      throw new error_1.MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n    }\n\n    if (size > this[kLength]) {\n      return Buffer.alloc(0);\n    }\n\n    let result; // read the whole buffer\n\n    if (size === this.length) {\n      result = Buffer.concat(this[kBuffers]);\n\n      if (consume) {\n        this[kBuffers] = [];\n        this[kLength] = 0;\n      }\n    } // size is within first buffer, no need to concat\n    else if (size <= this[kBuffers][0].length) {\n      result = this[kBuffers][0].slice(0, size);\n\n      if (consume) {\n        this[kBuffers][0] = this[kBuffers][0].slice(size);\n        this[kLength] -= size;\n      }\n    } // size is beyond first buffer, need to track and copy\n    else {\n      result = Buffer.allocUnsafe(size);\n      let idx;\n      let offset = 0;\n      let bytesToCopy = size;\n\n      for (idx = 0; idx < this[kBuffers].length; ++idx) {\n        let bytesCopied;\n\n        if (bytesToCopy > this[kBuffers][idx].length) {\n          bytesCopied = this[kBuffers][idx].copy(result, offset, 0);\n          offset += bytesCopied;\n        } else {\n          bytesCopied = this[kBuffers][idx].copy(result, offset, 0, bytesToCopy);\n\n          if (consume) {\n            this[kBuffers][idx] = this[kBuffers][idx].slice(bytesCopied);\n          }\n\n          offset += bytesCopied;\n          break;\n        }\n\n        bytesToCopy -= bytesCopied;\n      } // compact the internal buffer array\n\n\n      if (consume) {\n        this[kBuffers] = this[kBuffers].slice(idx);\n        this[kLength] -= size;\n      }\n    }\n\n    return result;\n  }\n\n}\n\nexports.BufferPool = BufferPool;\n/** @public */\n\nclass HostAddress {\n  constructor(hostString) {\n    const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n\n    const {\n      hostname,\n      port\n    } = new url_1.URL(`mongodb://${escapedHost}`);\n\n    if (hostname.endsWith('.sock')) {\n      // heuristically determine if we're working with a domain socket\n      this.socketPath = decodeURIComponent(hostname);\n    } else if (typeof hostname === 'string') {\n      this.isIPv6 = false;\n      let normalized = decodeURIComponent(hostname).toLowerCase();\n\n      if (normalized.startsWith('[') && normalized.endsWith(']')) {\n        this.isIPv6 = true;\n        normalized = normalized.substring(1, hostname.length - 1);\n      }\n\n      this.host = normalized.toLowerCase();\n\n      if (typeof port === 'number') {\n        this.port = port;\n      } else if (typeof port === 'string' && port !== '') {\n        this.port = Number.parseInt(port, 10);\n      } else {\n        this.port = 27017;\n      }\n\n      if (this.port === 0) {\n        throw new error_1.MongoParseError('Invalid port (zero) with hostname');\n      }\n    } else {\n      throw new error_1.MongoInvalidArgumentError('Either socketPath or host must be defined.');\n    }\n\n    Object.freeze(this);\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n\n  inspect() {\n    return `new HostAddress('${this.toString(true)}')`;\n  }\n  /**\n   * @param ipv6Brackets - optionally request ipv6 bracket notation required for connection strings\n   */\n\n\n  toString() {\n    let ipv6Brackets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (typeof this.host === 'string') {\n      if (this.isIPv6 && ipv6Brackets) {\n        return `[${this.host}]:${this.port}`;\n      }\n\n      return `${this.host}:${this.port}`;\n    }\n\n    return `${this.socketPath}`;\n  }\n\n  static fromString(s) {\n    return new HostAddress(s);\n  }\n\n  static fromHostPort(host, port) {\n    if (host.includes(':')) {\n      host = `[${host}]`; // IPv6 address\n    }\n\n    return HostAddress.fromString(`${host}:${port}`);\n  }\n\n  static fromSrvRecord(_ref2) {\n    let {\n      name,\n      port\n    } = _ref2;\n    return HostAddress.fromHostPort(name, port);\n  }\n\n}\n\nexports.HostAddress = HostAddress;\nexports.DEFAULT_PK_FACTORY = {\n  // We prefer not to rely on ObjectId having a createPk method\n  createPk() {\n    return new bson_1.ObjectId();\n  }\n\n};\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```js\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\n\nexports.MONGODB_WARNING_CODE = 'MONGODB DRIVER';\n/** @internal */\n\nfunction emitWarning(message) {\n  return process.emitWarning(message, {\n    code: exports.MONGODB_WARNING_CODE\n  });\n}\n\nexports.emitWarning = emitWarning;\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\n\nfunction emitWarningOnce(message) {\n  if (!emittedWarnings.has(message)) {\n    emittedWarnings.add(message);\n    return emitWarning(message);\n  }\n}\n\nexports.emitWarningOnce = emitWarningOnce;\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\n\nfunction enumToString(en) {\n  return Object.values(en).join(', ');\n}\n\nexports.enumToString = enumToString;\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\n\nfunction supportsRetryableWrites(server) {\n  return !!server.loadBalanced || server.description.maxWireVersion >= 6 && !!server.description.logicalSessionTimeoutMinutes && server.description.type !== common_1.ServerType.Standalone;\n}\n\nexports.supportsRetryableWrites = supportsRetryableWrites;\n\nfunction parsePackageVersion(_ref3) {\n  let {\n    version\n  } = _ref3;\n  const [major, minor, patch] = version.split('.').map(n => Number.parseInt(n, 10));\n  return {\n    major,\n    minor,\n    patch\n  };\n}\n\nexports.parsePackageVersion = parsePackageVersion;\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\n\nfunction shuffle(sequence) {\n  let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n\n  if (limit > items.length) {\n    throw new error_1.MongoRuntimeError('Limit must be less than the number of items');\n  }\n\n  let remainingItemsToShuffle = items.length;\n  const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n\n  while (remainingItemsToShuffle > lowerBound) {\n    // Pick a remaining element\n    const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n    remainingItemsToShuffle -= 1; // And swap it with the current element\n\n    const swapHold = items[remainingItemsToShuffle];\n    items[remainingItemsToShuffle] = items[randomIndex];\n    items[randomIndex] = swapHold;\n  }\n\n  return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\n\nexports.shuffle = shuffle; // TODO: this should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\n\nfunction commandSupportsReadConcern(command, options) {\n  if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n    return true;\n  }\n\n  if (command.mapReduce && options && options.out && (options.out.inline === 1 || options.out === 'inline')) {\n    return true;\n  }\n\n  return false;\n}\n\nexports.commandSupportsReadConcern = commandSupportsReadConcern;","map":{"version":3,"mappings":"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","names":["exports","Number","MAX_SAFE_INTEGER","checkCollectionName","collectionName","error_1","indexOf","match","normalizeHintField","hint","finalHint","undefined","Array","isArray","forEach","param","name","parseIndexOptions","indexSpec","fieldHash","indexes","keys","push","f","isObject","Object","k","entries","key","value","join","arg","prototype","toString","call","mergeOptions","target","source","filterOptions","options","names","includes","executeLegacyOperation","topology","operation","args","Promise","promise_provider_1","get","callback","length","session","opOptions","owner","skipSessions","hasSessionSupport","Symbol","startSession","optionsIndex","assign","hasEnded","makeExecuteCallback","resolve","reject","err","result","returnsCursor","endSession","pop","handler","e","applyRetryableWrites","db","s","_a","retryWrites","applyWriteConcern","sources","coll","collection","inTransaction","writeConcern","write_concern_1","fromOptions","isPromiseLike","maybePromise","then","decorateWithCollation","command","capabilities","getTopology","collation","commandsTakeCollation","decorateWithReadConcern","readConcern","decorateWithExplain","explain","verbosity","provider","client","defaultMsgHandler","option","deprecateOptions","config","fn","process","noDeprecation","msgHandler","optionsWarned","Set","deprecated","bind","deprecatedOption","deprecatedOptions","has","add","msg","emitWarning","logger","getLogger","warn","setPrototypeOf","ns","MongoDBNamespace","fromString","constructor","withCollection","namespace","split","makeCounter","seed","count","newCount","wrapper","res","error","nextTick","databaseNamespace","uuidV4","crypto","randomBytes","maxWireVersion","topologyOrServer","loadBalanced","constants_1","hello","lastHello","description","collationNotSupported","server","cmd","eachAsync","arr","eachFn","idx","awaiting","eachCallback","eachAsyncSeries","arrayStrictEqual","arr2","every","elt","errorStrictEqual","lhs","rhs","message","makeStateMachine","stateTable","stateTransition","newState","legalStates","state","emit","NODE_DRIVER_VERSION","require","version","makeClientMetadata","metadata","driver","os","type","platform","architecture","arch","release","endianness","driverInfo","appName","buffer","Buffer","from","application","byteLength","slice","now","hrtime","Math","floor","calculateDurationInMs","started","elapsed","makeInterruptibleAsyncInterval","timerId","lastCallTime","cannotBeExpedited","stopped","interval","minInterval","immediate","clock","wake","currentTime","nextScheduledCallTime","timeUntilNextCall","executeAndReschedule","reschedule","stop","clearTimeout","ms","setTimeout","hasAtomicOperators","doc","document","resolveOptions","parent","_b","readPreference","_c","isSuperset","set","subset","elem","isHello","constants_2","setDifference","setA","setB","difference","delete","isRecord","requiredKeys","hasOwnProperty","v","ctor","deepCopy","map","item","toLowerCase","Map","kBuffers","kLength","BufferPool","append","peek","size","read","consume","alloc","concat","allocUnsafe","offset","bytesToCopy","bytesCopied","copy","HostAddress","hostString","escapedHost","hostname","port","url_1","endsWith","socketPath","decodeURIComponent","isIPv6","normalized","startsWith","substring","host","parseInt","freeze","for","inspect","ipv6Brackets","fromHostPort","fromSrvRecord","createPk","bson_1","code","emittedWarnings","emitWarningOnce","enumToString","en","values","supportsRetryableWrites","logicalSessionTimeoutMinutes","common_1","Standalone","parsePackageVersion","major","minor","patch","n","shuffle","sequence","limit","items","remainingItemsToShuffle","lowerBound","randomIndex","random","swapHold","commandSupportsReadConcern","aggregate","distinct","find","geoNear","mapReduce","out","inline"],"sources":["/Users/santiago/node_modules/mongodb/src/utils.ts"],"sourcesContent":["import * as crypto from 'crypto';\nimport type { SrvRecord } from 'dns';\nimport * as os from 'os';\nimport { URL } from 'url';\n\nimport { Document, ObjectId, resolveBSONOptions } from './bson';\nimport type { Connection } from './cmap/connection';\nimport { MAX_SUPPORTED_WIRE_VERSION } from './cmap/wire_protocol/constants';\nimport type { Collection } from './collection';\nimport { LEGACY_HELLO_COMMAND } from './constants';\nimport type { Db } from './db';\nimport {\n  AnyError,\n  MongoCompatibilityError,\n  MongoExpiredSessionError,\n  MongoInvalidArgumentError,\n  MongoNotConnectedError,\n  MongoParseError,\n  MongoRuntimeError\n} from './error';\nimport type { Explain } from './explain';\nimport type { MongoClient } from './mongo_client';\nimport type { CommandOperationOptions, OperationParent } from './operations/command';\nimport type { IndexDirection, IndexSpecification } from './operations/indexes';\nimport type { Hint, OperationOptions } from './operations/operation';\nimport { PromiseProvider } from './promise_provider';\nimport { ReadConcern } from './read_concern';\nimport { ReadPreference } from './read_preference';\nimport { ServerType } from './sdam/common';\nimport type { Server } from './sdam/server';\nimport type { Topology } from './sdam/topology';\nimport type { ClientSession } from './sessions';\nimport { W, WriteConcern, WriteConcernOptions } from './write_concern';\n\n/**\n * MongoDB Driver style callback\n * @public\n */\nexport type Callback<T = any> = (error?: AnyError, result?: T) => void;\n/** @public */\nexport type CallbackWithType<E = AnyError, T0 = any> = (error?: E, result?: T0) => void;\n\nexport const MAX_JS_INT = Number.MAX_SAFE_INTEGER + 1;\n\nexport type AnyOptions = Document;\n\n/**\n * Throws if collectionName is not a valid mongodb collection namespace.\n * @internal\n */\nexport function checkCollectionName(collectionName: string): void {\n  if ('string' !== typeof collectionName) {\n    throw new MongoInvalidArgumentError('Collection name must be a String');\n  }\n\n  if (!collectionName || collectionName.indexOf('..') !== -1) {\n    throw new MongoInvalidArgumentError('Collection names cannot be empty');\n  }\n\n  if (\n    collectionName.indexOf('$') !== -1 &&\n    collectionName.match(/((^\\$cmd)|(oplog\\.\\$main))/) == null\n  ) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new MongoInvalidArgumentError(\"Collection names must not contain '$'\");\n  }\n\n  if (collectionName.match(/^\\.|\\.$/) != null) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new MongoInvalidArgumentError(\"Collection names must not start or end with '.'\");\n  }\n\n  // Validate that we are not passing 0x00 in the collection name\n  if (collectionName.indexOf('\\x00') !== -1) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new MongoInvalidArgumentError('Collection names cannot contain a null character');\n  }\n}\n\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\nexport function normalizeHintField(hint?: Hint): Hint | undefined {\n  let finalHint = undefined;\n\n  if (typeof hint === 'string') {\n    finalHint = hint;\n  } else if (Array.isArray(hint)) {\n    finalHint = {};\n\n    hint.forEach(param => {\n      finalHint[param] = 1;\n    });\n  } else if (hint != null && typeof hint === 'object') {\n    finalHint = {} as Document;\n    for (const name in hint) {\n      finalHint[name] = hint[name];\n    }\n  }\n\n  return finalHint;\n}\n\ninterface IndexOptions {\n  name: string;\n  keys?: string[];\n  fieldHash: Document;\n}\n\n/**\n * Create an index specifier based on\n * @internal\n */\nexport function parseIndexOptions(indexSpec: IndexSpecification): IndexOptions {\n  const fieldHash: { [key: string]: IndexDirection } = {};\n  const indexes = [];\n  let keys;\n\n  // Get all the fields accordingly\n  if ('string' === typeof indexSpec) {\n    // 'type'\n    indexes.push(indexSpec + '_' + 1);\n    fieldHash[indexSpec] = 1;\n  } else if (Array.isArray(indexSpec)) {\n    indexSpec.forEach((f: any) => {\n      if ('string' === typeof f) {\n        // [{location:'2d'}, 'type']\n        indexes.push(f + '_' + 1);\n        fieldHash[f] = 1;\n      } else if (Array.isArray(f)) {\n        // [['location', '2d'],['type', 1]]\n        indexes.push(f[0] + '_' + (f[1] || 1));\n        fieldHash[f[0]] = f[1] || 1;\n      } else if (isObject(f)) {\n        // [{location:'2d'}, {type:1}]\n        keys = Object.keys(f);\n        keys.forEach(k => {\n          indexes.push(k + '_' + (f as AnyOptions)[k]);\n          fieldHash[k] = (f as AnyOptions)[k];\n        });\n      } else {\n        // undefined (ignore)\n      }\n    });\n  } else if (isObject(indexSpec)) {\n    // {location:'2d', type:1}\n    keys = Object.keys(indexSpec);\n    Object.entries(indexSpec).forEach(([key, value]) => {\n      indexes.push(key + '_' + value);\n      fieldHash[key] = value;\n    });\n  }\n\n  return {\n    name: indexes.join('_'),\n    keys: keys,\n    fieldHash: fieldHash\n  };\n}\n\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isObject(arg: unknown): arg is object {\n  return '[object Object]' === Object.prototype.toString.call(arg);\n}\n\n/** @internal */\nexport function mergeOptions<T, S>(target: T, source: S): T & S {\n  return { ...target, ...source };\n}\n\n/** @internal */\nexport function filterOptions(options: AnyOptions, names: string[]): AnyOptions {\n  const filterOptions: AnyOptions = {};\n\n  for (const name in options) {\n    if (names.includes(name)) {\n      filterOptions[name] = options[name];\n    }\n  }\n\n  // Filtered options\n  return filterOptions;\n}\n\n/**\n * Executes the given operation with provided arguments.\n *\n * @remarks\n * This method reduces large amounts of duplication in the entire codebase by providing\n * a single point for determining whether callbacks or promises should be used. Additionally\n * it allows for a single point of entry to provide features such as implicit sessions, which\n * are required by the Driver Sessions specification in the event that a ClientSession is\n * not provided\n *\n * @internal\n *\n * @param topology - The topology to execute this operation on\n * @param operation - The operation to execute\n * @param args - Arguments to apply the provided operation\n * @param options - Options that modify the behavior of the method\n */\nexport function executeLegacyOperation(\n  topology: Topology,\n  operation: (...args: any[]) => void | Promise<Document>,\n  args: any[],\n  options?: AnyOptions\n): void | Promise<any> {\n  const Promise = PromiseProvider.get();\n\n  if (!Array.isArray(args)) {\n    // TODO(NODE-3483)\n    throw new MongoRuntimeError('This method requires an array of arguments to apply');\n  }\n\n  options = options ?? {};\n\n  let callback = args[args.length - 1];\n\n  // The driver sessions spec mandates that we implicitly create sessions for operations\n  // that are not explicitly provided with a session.\n  let session: ClientSession;\n  let opOptions: any;\n  let owner: any;\n  if (!options.skipSessions && topology.hasSessionSupport()) {\n    opOptions = args[args.length - 2];\n    if (opOptions == null || opOptions.session == null) {\n      owner = Symbol();\n      session = topology.startSession({ owner });\n      const optionsIndex = args.length - 2;\n      args[optionsIndex] = Object.assign({}, args[optionsIndex], { session: session });\n    } else if (opOptions.session && opOptions.session.hasEnded) {\n      throw new MongoExpiredSessionError();\n    }\n  }\n\n  function makeExecuteCallback(\n    resolve: (value?: Document) => void,\n    reject: (reason?: AnyError) => void\n  ) {\n    return function (err?: AnyError, result?: any) {\n      if (session && session.owner === owner && !options?.returnsCursor) {\n        session.endSession(() => {\n          delete opOptions.session;\n          if (err) return reject(err);\n          resolve(result);\n        });\n      } else {\n        if (err) return reject(err);\n        resolve(result);\n      }\n    };\n  }\n\n  // Execute using callback\n  if (typeof callback === 'function') {\n    callback = args.pop();\n    const handler = makeExecuteCallback(\n      result => callback(undefined, result),\n      err => callback(err, null)\n    );\n    args.push(handler);\n\n    try {\n      return operation(...args);\n    } catch (e) {\n      handler(e);\n      throw e;\n    }\n  }\n\n  // Return a Promise\n  if (args[args.length - 1] != null) {\n    // TODO(NODE-3483)\n    throw new MongoRuntimeError('Final argument to `executeLegacyOperation` must be a callback');\n  }\n\n  return new Promise<any>((resolve, reject) => {\n    const handler = makeExecuteCallback(resolve, reject);\n    args[args.length - 1] = handler;\n\n    try {\n      return operation(...args);\n    } catch (e) {\n      handler(e);\n    }\n  });\n}\n\ninterface HasRetryableWrites {\n  retryWrites?: boolean;\n}\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\nexport function applyRetryableWrites<T extends HasRetryableWrites>(target: T, db?: Db): T {\n  if (db && db.s.options?.retryWrites) {\n    target.retryWrites = true;\n  }\n\n  return target;\n}\n\ninterface HasWriteConcern {\n  writeConcern?: WriteConcernOptions | WriteConcern | W;\n}\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\nexport function applyWriteConcern<T extends HasWriteConcern>(\n  target: T,\n  sources: { db?: Db; collection?: Collection },\n  options?: OperationOptions & WriteConcernOptions\n): T {\n  options = options ?? {};\n  const db = sources.db;\n  const coll = sources.collection;\n\n  if (options.session && options.session.inTransaction()) {\n    // writeConcern is not allowed within a multi-statement transaction\n    if (target.writeConcern) {\n      delete target.writeConcern;\n    }\n\n    return target;\n  }\n\n  const writeConcern = WriteConcern.fromOptions(options);\n  if (writeConcern) {\n    return Object.assign(target, { writeConcern });\n  }\n\n  if (coll && coll.writeConcern) {\n    return Object.assign(target, { writeConcern: Object.assign({}, coll.writeConcern) });\n  }\n\n  if (db && db.writeConcern) {\n    return Object.assign(target, { writeConcern: Object.assign({}, db.writeConcern) });\n  }\n\n  return target;\n}\n\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The result type of maybePromise\n * @param maybePromise - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\nexport function isPromiseLike<T = any>(\n  maybePromise?: PromiseLike<T> | void\n): maybePromise is Promise<T> {\n  return !!maybePromise && typeof maybePromise.then === 'function';\n}\n\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\nexport function decorateWithCollation(\n  command: Document,\n  target: MongoClient | Db | Collection,\n  options: AnyOptions\n): void {\n  const capabilities = getTopology(target).capabilities;\n  if (options.collation && typeof options.collation === 'object') {\n    if (capabilities && capabilities.commandsTakeCollation) {\n      command.collation = options.collation;\n    } else {\n      throw new MongoCompatibilityError(`Current topology does not support collation`);\n    }\n  }\n}\n\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\nexport function decorateWithReadConcern(\n  command: Document,\n  coll: { s: { readConcern?: ReadConcern } },\n  options?: OperationOptions\n): void {\n  if (options && options.session && options.session.inTransaction()) {\n    return;\n  }\n  const readConcern = Object.assign({}, command.readConcern || {});\n  if (coll.s.readConcern) {\n    Object.assign(readConcern, coll.s.readConcern);\n  }\n\n  if (Object.keys(readConcern).length > 0) {\n    Object.assign(command, { readConcern: readConcern });\n  }\n}\n\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nexport function decorateWithExplain(command: Document, explain: Explain): Document {\n  if (command.explain) {\n    return command;\n  }\n\n  return { explain: command, verbosity: explain.verbosity };\n}\n\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @internal\n */\nexport function getTopology<T>(provider: MongoClient | Db | Collection<T>): Topology {\n  if (`topology` in provider && provider.topology) {\n    return provider.topology;\n  } else if ('client' in provider.s && provider.s.client.topology) {\n    return provider.s.client.topology;\n  } else if ('db' in provider.s && provider.s.db.s.client.topology) {\n    return provider.s.db.s.client.topology;\n  }\n\n  throw new MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\n\n/**\n * Default message handler for generating deprecation warnings.\n * @internal\n *\n * @param name - function name\n * @param option - option name\n * @returns warning message\n */\nexport function defaultMsgHandler(name: string, option: string): string {\n  return `${name} option [${option}] is deprecated and will be removed in a later version.`;\n}\n\nexport interface DeprecateOptionsConfig {\n  /** function name */\n  name: string;\n  /** options to deprecate */\n  deprecatedOptions: string[];\n  /** index of options object in function arguments array */\n  optionsIndex: number;\n  /** optional custom message handler to generate warnings */\n  msgHandler?(name: string, option: string): string;\n}\n\n/**\n * Deprecates a given function's options.\n * @internal\n *\n * @param this - the bound class if this is a method\n * @param config - configuration for deprecation\n * @param fn - the target function of deprecation\n * @returns modified function that warns once per deprecated option, and executes original function\n */\nexport function deprecateOptions(\n  this: unknown,\n  config: DeprecateOptionsConfig,\n  fn: (...args: any[]) => any\n): any {\n  if ((process as any).noDeprecation === true) {\n    return fn;\n  }\n\n  const msgHandler = config.msgHandler ? config.msgHandler : defaultMsgHandler;\n\n  const optionsWarned = new Set();\n  function deprecated(this: any, ...args: any[]) {\n    const options = args[config.optionsIndex] as AnyOptions;\n\n    // ensure options is a valid, non-empty object, otherwise short-circuit\n    if (!isObject(options) || Object.keys(options).length === 0) {\n      return fn.bind(this)(...args); // call the function, no change\n    }\n\n    // interrupt the function call with a warning\n    for (const deprecatedOption of config.deprecatedOptions) {\n      if (deprecatedOption in options && !optionsWarned.has(deprecatedOption)) {\n        optionsWarned.add(deprecatedOption);\n        const msg = msgHandler(config.name, deprecatedOption);\n        emitWarning(msg);\n        if (this && 'getLogger' in this) {\n          const logger = this.getLogger();\n          if (logger) {\n            logger.warn(msg);\n          }\n        }\n      }\n    }\n\n    return fn.bind(this)(...args);\n  }\n\n  // These lines copied from https://github.com/nodejs/node/blob/25e5ae41688676a5fd29b2e2e7602168eee4ceb5/lib/internal/util.js#L73-L80\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\n  Object.setPrototypeOf(deprecated, fn);\n  if (fn.prototype) {\n    // Setting this (rather than using Object.setPrototype, as above) ensures\n    // that calling the unwrapped constructor gives an instanceof the wrapped\n    // constructor.\n    deprecated.prototype = fn.prototype;\n  }\n\n  return deprecated;\n}\n\n/** @internal */\nexport function ns(ns: string): MongoDBNamespace {\n  return MongoDBNamespace.fromString(ns);\n}\n\n/** @public */\nexport class MongoDBNamespace {\n  db: string;\n  collection?: string;\n  /**\n   * Create a namespace object\n   *\n   * @param db - database name\n   * @param collection - collection name\n   */\n  constructor(db: string, collection?: string) {\n    this.db = db;\n    this.collection = collection;\n  }\n\n  toString(): string {\n    return this.collection ? `${this.db}.${this.collection}` : this.db;\n  }\n\n  withCollection(collection: string): MongoDBNamespace {\n    return new MongoDBNamespace(this.db, collection);\n  }\n\n  static fromString(namespace?: string): MongoDBNamespace {\n    if (!namespace) {\n      // TODO(NODE-3483): Replace with MongoNamespaceError\n      throw new MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n    }\n\n    const [db, ...collection] = namespace.split('.');\n    return new MongoDBNamespace(db, collection.join('.'));\n  }\n}\n\n/** @internal */\nexport function* makeCounter(seed = 0): Generator<number> {\n  let count = seed;\n  while (true) {\n    const newCount = count;\n    count += 1;\n    yield newCount;\n  }\n}\n\n/**\n * Helper function for either accepting a callback, or returning a promise\n * @internal\n *\n * @param callback - The last function argument in exposed method, controls if a Promise is returned\n * @param wrapper - A function that wraps the callback\n * @returns Returns void if a callback is supplied, else returns a Promise.\n */\nexport function maybePromise<T>(\n  callback: Callback<T> | undefined,\n  wrapper: (fn: Callback<T>) => void\n): Promise<T> | void {\n  const Promise = PromiseProvider.get();\n  let result: Promise<T> | void;\n  if (typeof callback !== 'function') {\n    result = new Promise<any>((resolve, reject) => {\n      callback = (err, res) => {\n        if (err) return reject(err);\n        resolve(res);\n      };\n    });\n  }\n\n  wrapper((err, res) => {\n    if (err != null) {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        callback!(err);\n      } catch (error) {\n        process.nextTick(() => {\n          throw error;\n        });\n      }\n\n      return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    callback!(err, res);\n  });\n\n  return result;\n}\n\n/** @internal */\nexport function databaseNamespace(ns: string): string {\n  return ns.split('.')[0];\n}\n\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\nexport function uuidV4(): Buffer {\n  const result = crypto.randomBytes(16);\n  result[6] = (result[6] & 0x0f) | 0x40;\n  result[8] = (result[8] & 0x3f) | 0x80;\n  return result;\n}\n\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\nexport function maxWireVersion(topologyOrServer?: Connection | Topology | Server): number {\n  if (topologyOrServer) {\n    if (topologyOrServer.loadBalanced) {\n      // Since we do not have a monitor, we assume the load balanced server is always\n      // pointed at the latest mongodb version. There is a risk that for on-prem\n      // deployments that don't upgrade immediately that this could alert to the\n      // application that a feature is avaiable that is actually not.\n      return MAX_SUPPORTED_WIRE_VERSION;\n    }\n    if (topologyOrServer.hello) {\n      return topologyOrServer.hello.maxWireVersion;\n    }\n\n    if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n      const lastHello = topologyOrServer.lastHello();\n      if (lastHello) {\n        return lastHello.maxWireVersion;\n      }\n    }\n\n    if (\n      topologyOrServer.description &&\n      'maxWireVersion' in topologyOrServer.description &&\n      topologyOrServer.description.maxWireVersion != null\n    ) {\n      return topologyOrServer.description.maxWireVersion;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * Checks that collation is supported by server.\n * @internal\n *\n * @param server - to check against\n * @param cmd - object where collation may be specified\n */\nexport function collationNotSupported(server: Server, cmd: Document): boolean {\n  return cmd && cmd.collation && maxWireVersion(server) < 5;\n}\n\n/**\n * Applies the function `eachFn` to each item in `arr`, in parallel.\n * @internal\n *\n * @param arr - An array of items to asynchronously iterate over\n * @param eachFn - A function to call on each item of the array. The callback signature is `(item, callback)`, where the callback indicates iteration is complete.\n * @param callback - The callback called after every item has been iterated\n */\nexport function eachAsync<T = Document>(\n  arr: T[],\n  eachFn: (item: T, callback: (err?: AnyError) => void) => void,\n  callback: Callback\n): void {\n  arr = arr || [];\n\n  let idx = 0;\n  let awaiting = 0;\n  for (idx = 0; idx < arr.length; ++idx) {\n    awaiting++;\n    eachFn(arr[idx], eachCallback);\n  }\n\n  if (awaiting === 0) {\n    callback();\n    return;\n  }\n\n  function eachCallback(err?: AnyError) {\n    awaiting--;\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    if (idx === arr.length && awaiting <= 0) {\n      callback();\n    }\n  }\n}\n\n/** @internal */\nexport function eachAsyncSeries<T = any>(\n  arr: T[],\n  eachFn: (item: T, callback: (err?: AnyError) => void) => void,\n  callback: Callback\n): void {\n  arr = arr || [];\n\n  let idx = 0;\n  let awaiting = arr.length;\n  if (awaiting === 0) {\n    callback();\n    return;\n  }\n\n  function eachCallback(err?: AnyError) {\n    idx++;\n    awaiting--;\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    if (idx === arr.length && awaiting <= 0) {\n      callback();\n      return;\n    }\n\n    eachFn(arr[idx], eachCallback);\n  }\n\n  eachFn(arr[idx], eachCallback);\n}\n\n/** @internal */\nexport function arrayStrictEqual(arr: unknown[], arr2: unknown[]): boolean {\n  if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n    return false;\n  }\n\n  return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\n\n/** @internal */\nexport function errorStrictEqual(lhs?: AnyError, rhs?: AnyError): boolean {\n  if (lhs === rhs) {\n    return true;\n  }\n\n  if (!lhs || !rhs) {\n    return lhs === rhs;\n  }\n\n  if ((lhs == null && rhs != null) || (lhs != null && rhs == null)) {\n    return false;\n  }\n\n  if (lhs.constructor.name !== rhs.constructor.name) {\n    return false;\n  }\n\n  if (lhs.message !== rhs.message) {\n    return false;\n  }\n\n  return true;\n}\n\ninterface StateTable {\n  [key: string]: string[];\n}\ninterface ObjectWithState {\n  s: { state: string };\n  emit(event: 'stateChanged', state: string, newState: string): void;\n}\ninterface StateTransitionFunction {\n  (target: ObjectWithState, newState: string): void;\n}\n\n/** @public */\nexport type EventEmitterWithState = {\n  /** @internal */\n  stateChanged(previous: string, current: string): void;\n};\n\n/** @internal */\nexport function makeStateMachine(stateTable: StateTable): StateTransitionFunction {\n  return function stateTransition(target, newState) {\n    const legalStates = stateTable[target.s.state];\n    if (legalStates && legalStates.indexOf(newState) < 0) {\n      throw new MongoRuntimeError(\n        `illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`\n      );\n    }\n\n    target.emit('stateChanged', target.s.state, newState);\n    target.s.state = newState;\n  };\n}\n\n/** @public */\nexport interface ClientMetadata {\n  driver: {\n    name: string;\n    version: string;\n  };\n  os: {\n    type: string;\n    name: NodeJS.Platform;\n    architecture: string;\n    version: string;\n  };\n  platform: string;\n  version?: string;\n  application?: {\n    name: string;\n  };\n}\n\n/** @public */\nexport interface ClientMetadataOptions {\n  driverInfo?: {\n    name?: string;\n    version?: string;\n    platform?: string;\n  };\n  appName?: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst NODE_DRIVER_VERSION = require('../package.json').version;\n\nexport function makeClientMetadata(options?: ClientMetadataOptions): ClientMetadata {\n  options = options ?? {};\n\n  const metadata: ClientMetadata = {\n    driver: {\n      name: 'nodejs',\n      version: NODE_DRIVER_VERSION\n    },\n    os: {\n      type: os.type(),\n      name: process.platform,\n      architecture: process.arch,\n      version: os.release()\n    },\n    platform: `Node.js ${process.version}, ${os.endianness()} (unified)`\n  };\n\n  // support optionally provided wrapping driver info\n  if (options.driverInfo) {\n    if (options.driverInfo.name) {\n      metadata.driver.name = `${metadata.driver.name}|${options.driverInfo.name}`;\n    }\n\n    if (options.driverInfo.version) {\n      metadata.version = `${metadata.driver.version}|${options.driverInfo.version}`;\n    }\n\n    if (options.driverInfo.platform) {\n      metadata.platform = `${metadata.platform}|${options.driverInfo.platform}`;\n    }\n  }\n\n  if (options.appName) {\n    // MongoDB requires the appName not exceed a byte length of 128\n    const buffer = Buffer.from(options.appName);\n    metadata.application = {\n      name: buffer.byteLength > 128 ? buffer.slice(0, 128).toString('utf8') : options.appName\n    };\n  }\n\n  return metadata;\n}\n\n/** @internal */\nexport function now(): number {\n  const hrtime = process.hrtime();\n  return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\n\n/** @internal */\nexport function calculateDurationInMs(started: number): number {\n  if (typeof started !== 'number') {\n    throw new MongoInvalidArgumentError('Numeric value required to calculate duration');\n  }\n\n  const elapsed = now() - started;\n  return elapsed < 0 ? 0 : elapsed;\n}\n\nexport interface InterruptibleAsyncIntervalOptions {\n  /** The interval to execute a method on */\n  interval: number;\n  /** A minimum interval that must elapse before the method is called */\n  minInterval: number;\n  /** Whether the method should be called immediately when the interval is started  */\n  immediate: boolean;\n\n  /**\n   * Only used for testing unreliable timer environments\n   * @internal\n   */\n  clock: () => number;\n}\n\n/** @internal */\nexport interface InterruptibleAsyncInterval {\n  wake(): void;\n  stop(): void;\n}\n\n/**\n * Creates an interval timer which is able to be woken up sooner than\n * the interval. The timer will also debounce multiple calls to wake\n * ensuring that the function is only ever called once within a minimum\n * interval window.\n * @internal\n *\n * @param fn - An async function to run on an interval, must accept a `callback` as its only parameter\n */\nexport function makeInterruptibleAsyncInterval(\n  fn: (callback: Callback) => void,\n  options?: Partial<InterruptibleAsyncIntervalOptions>\n): InterruptibleAsyncInterval {\n  let timerId: NodeJS.Timeout | undefined;\n  let lastCallTime: number;\n  let cannotBeExpedited = false;\n  let stopped = false;\n\n  options = options ?? {};\n  const interval = options.interval || 1000;\n  const minInterval = options.minInterval || 500;\n  const immediate = typeof options.immediate === 'boolean' ? options.immediate : false;\n  const clock = typeof options.clock === 'function' ? options.clock : now;\n\n  function wake() {\n    const currentTime = clock();\n    const nextScheduledCallTime = lastCallTime + interval;\n    const timeUntilNextCall = nextScheduledCallTime - currentTime;\n\n    // For the streaming protocol: there is nothing obviously stopping this\n    // interval from being woken up again while we are waiting \"infinitely\"\n    // for `fn` to be called again`. Since the function effectively\n    // never completes, the `timeUntilNextCall` will continue to grow\n    // negatively unbounded, so it will never trigger a reschedule here.\n\n    // This is possible in virtualized environments like AWS Lambda where our\n    // clock is unreliable. In these cases the timer is \"running\" but never\n    // actually completes, so we want to execute immediately and then attempt\n    // to reschedule.\n    if (timeUntilNextCall < 0) {\n      executeAndReschedule();\n      return;\n    }\n\n    // debounce multiple calls to wake within the `minInterval`\n    if (cannotBeExpedited) {\n      return;\n    }\n\n    // reschedule a call as soon as possible, ensuring the call never happens\n    // faster than the `minInterval`\n    if (timeUntilNextCall > minInterval) {\n      reschedule(minInterval);\n      cannotBeExpedited = true;\n    }\n  }\n\n  function stop() {\n    stopped = true;\n    if (timerId) {\n      clearTimeout(timerId);\n      timerId = undefined;\n    }\n\n    lastCallTime = 0;\n    cannotBeExpedited = false;\n  }\n\n  function reschedule(ms?: number) {\n    if (stopped) return;\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n\n    timerId = setTimeout(executeAndReschedule, ms || interval);\n  }\n\n  function executeAndReschedule() {\n    cannotBeExpedited = false;\n    lastCallTime = clock();\n\n    fn(err => {\n      if (err) throw err;\n      reschedule(interval);\n    });\n  }\n\n  if (immediate) {\n    executeAndReschedule();\n  } else {\n    lastCallTime = clock();\n    reschedule(undefined);\n  }\n\n  return { wake, stop };\n}\n\n/** @internal */\nexport function hasAtomicOperators(doc: Document | Document[]): boolean {\n  if (Array.isArray(doc)) {\n    for (const document of doc) {\n      if (hasAtomicOperators(document)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  const keys = Object.keys(doc);\n  return keys.length > 0 && keys[0][0] === '$';\n}\n\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n * @internal\n */\nexport function resolveOptions<T extends CommandOperationOptions>(\n  parent: OperationParent | undefined,\n  options?: T\n): T {\n  const result: T = Object.assign({}, options, resolveBSONOptions(options, parent));\n\n  // Users cannot pass a readConcern/writeConcern to operations in a transaction\n  const session = options?.session;\n  if (!session?.inTransaction()) {\n    const readConcern = ReadConcern.fromOptions(options) ?? parent?.readConcern;\n    if (readConcern) {\n      result.readConcern = readConcern;\n    }\n\n    const writeConcern = WriteConcern.fromOptions(options) ?? parent?.writeConcern;\n    if (writeConcern) {\n      result.writeConcern = writeConcern;\n    }\n  }\n\n  const readPreference = ReadPreference.fromOptions(options) ?? parent?.readPreference;\n  if (readPreference) {\n    result.readPreference = readPreference;\n  }\n\n  return result;\n}\n\nexport function isSuperset(set: Set<any> | any[], subset: Set<any> | any[]): boolean {\n  set = Array.isArray(set) ? new Set(set) : set;\n  subset = Array.isArray(subset) ? new Set(subset) : subset;\n  for (const elem of subset) {\n    if (!set.has(elem)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Checks if the document is a Hello request\n * @internal\n */\nexport function isHello(doc: Document): boolean {\n  return doc[LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\n\n/** Returns the items that are uniquely in setA */\nexport function setDifference<T>(setA: Iterable<T>, setB: Iterable<T>): Set<T> {\n  const difference = new Set<T>(setA);\n  for (const elem of setB) {\n    difference.delete(elem);\n  }\n  return difference;\n}\n\nexport function isRecord<T extends readonly string[]>(\n  value: unknown,\n  requiredKeys: T\n): value is Record<T[number], any>;\nexport function isRecord(value: unknown): value is Record<string, any>;\nexport function isRecord(\n  value: unknown,\n  requiredKeys: string[] | undefined = undefined\n): value is Record<string, any> {\n  const toString = Object.prototype.toString;\n  const hasOwnProperty = Object.prototype.hasOwnProperty;\n  const isObject = (v: unknown) => toString.call(v) === '[object Object]';\n  if (!isObject(value)) {\n    return false;\n  }\n\n  const ctor = (value as any).constructor;\n  if (ctor && ctor.prototype) {\n    if (!isObject(ctor.prototype)) {\n      return false;\n    }\n\n    // Check to see if some method exists from the Object exists\n    if (!hasOwnProperty.call(ctor.prototype, 'isPrototypeOf')) {\n      return false;\n    }\n  }\n\n  if (requiredKeys) {\n    const keys = Object.keys(value as Record<string, any>);\n    return isSuperset(keys, requiredKeys);\n  }\n\n  return true;\n}\n\n/**\n * Make a deep copy of an object\n *\n * NOTE: This is not meant to be the perfect implementation of a deep copy,\n * but instead something that is good enough for the purposes of\n * command monitoring.\n */\nexport function deepCopy<T>(value: T): T {\n  if (value == null) {\n    return value;\n  } else if (Array.isArray(value)) {\n    return value.map(item => deepCopy(item)) as unknown as T;\n  } else if (isRecord(value)) {\n    const res = {} as any;\n    for (const key in value) {\n      res[key] = deepCopy(value[key]);\n    }\n    return res;\n  }\n\n  const ctor = (value as any).constructor;\n  if (ctor) {\n    switch (ctor.name.toLowerCase()) {\n      case 'date':\n        return new ctor(Number(value));\n      case 'map':\n        return new Map(value as any) as unknown as T;\n      case 'set':\n        return new Set(value as any) as unknown as T;\n      case 'buffer':\n        return Buffer.from(value as Buffer) as unknown as T;\n    }\n  }\n\n  return value;\n}\n\n/** @internal */\nconst kBuffers = Symbol('buffers');\n/** @internal */\nconst kLength = Symbol('length');\n\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\nexport class BufferPool {\n  [kBuffers]: Buffer[];\n  [kLength]: number;\n\n  constructor() {\n    this[kBuffers] = [];\n    this[kLength] = 0;\n  }\n\n  get length(): number {\n    return this[kLength];\n  }\n\n  /** Adds a buffer to the internal buffer pool list */\n  append(buffer: Buffer): void {\n    this[kBuffers].push(buffer);\n    this[kLength] += buffer.length;\n  }\n\n  /** Returns the requested number of bytes without consuming them */\n  peek(size: number): Buffer {\n    return this.read(size, false);\n  }\n\n  /** Reads the requested number of bytes, optionally consuming them */\n  read(size: number, consume = true): Buffer {\n    if (typeof size !== 'number' || size < 0) {\n      throw new MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n    }\n\n    if (size > this[kLength]) {\n      return Buffer.alloc(0);\n    }\n\n    let result: Buffer;\n\n    // read the whole buffer\n    if (size === this.length) {\n      result = Buffer.concat(this[kBuffers]);\n\n      if (consume) {\n        this[kBuffers] = [];\n        this[kLength] = 0;\n      }\n    }\n\n    // size is within first buffer, no need to concat\n    else if (size <= this[kBuffers][0].length) {\n      result = this[kBuffers][0].slice(0, size);\n      if (consume) {\n        this[kBuffers][0] = this[kBuffers][0].slice(size);\n        this[kLength] -= size;\n      }\n    }\n\n    // size is beyond first buffer, need to track and copy\n    else {\n      result = Buffer.allocUnsafe(size);\n\n      let idx;\n      let offset = 0;\n      let bytesToCopy = size;\n      for (idx = 0; idx < this[kBuffers].length; ++idx) {\n        let bytesCopied;\n        if (bytesToCopy > this[kBuffers][idx].length) {\n          bytesCopied = this[kBuffers][idx].copy(result, offset, 0);\n          offset += bytesCopied;\n        } else {\n          bytesCopied = this[kBuffers][idx].copy(result, offset, 0, bytesToCopy);\n          if (consume) {\n            this[kBuffers][idx] = this[kBuffers][idx].slice(bytesCopied);\n          }\n          offset += bytesCopied;\n          break;\n        }\n\n        bytesToCopy -= bytesCopied;\n      }\n\n      // compact the internal buffer array\n      if (consume) {\n        this[kBuffers] = this[kBuffers].slice(idx);\n        this[kLength] -= size;\n      }\n    }\n\n    return result;\n  }\n}\n\n/** @public */\nexport class HostAddress {\n  host;\n  port;\n  // Driver only works with unix socket path to connect\n  // SDAM operates only on tcp addresses\n  socketPath;\n  isIPv6;\n\n  constructor(hostString: string) {\n    const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n    const { hostname, port } = new URL(`mongodb://${escapedHost}`);\n\n    if (hostname.endsWith('.sock')) {\n      // heuristically determine if we're working with a domain socket\n      this.socketPath = decodeURIComponent(hostname);\n    } else if (typeof hostname === 'string') {\n      this.isIPv6 = false;\n\n      let normalized = decodeURIComponent(hostname).toLowerCase();\n      if (normalized.startsWith('[') && normalized.endsWith(']')) {\n        this.isIPv6 = true;\n        normalized = normalized.substring(1, hostname.length - 1);\n      }\n\n      this.host = normalized.toLowerCase();\n\n      if (typeof port === 'number') {\n        this.port = port;\n      } else if (typeof port === 'string' && port !== '') {\n        this.port = Number.parseInt(port, 10);\n      } else {\n        this.port = 27017;\n      }\n\n      if (this.port === 0) {\n        throw new MongoParseError('Invalid port (zero) with hostname');\n      }\n    } else {\n      throw new MongoInvalidArgumentError('Either socketPath or host must be defined.');\n    }\n    Object.freeze(this);\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\n    return this.inspect();\n  }\n\n  inspect(): string {\n    return `new HostAddress('${this.toString(true)}')`;\n  }\n\n  /**\n   * @param ipv6Brackets - optionally request ipv6 bracket notation required for connection strings\n   */\n  toString(ipv6Brackets = false): string {\n    if (typeof this.host === 'string') {\n      if (this.isIPv6 && ipv6Brackets) {\n        return `[${this.host}]:${this.port}`;\n      }\n      return `${this.host}:${this.port}`;\n    }\n    return `${this.socketPath}`;\n  }\n\n  static fromString(s: string): HostAddress {\n    return new HostAddress(s);\n  }\n\n  static fromHostPort(host: string, port: number): HostAddress {\n    if (host.includes(':')) {\n      host = `[${host}]`; // IPv6 address\n    }\n    return HostAddress.fromString(`${host}:${port}`);\n  }\n\n  static fromSrvRecord({ name, port }: SrvRecord): HostAddress {\n    return HostAddress.fromHostPort(name, port);\n  }\n}\n\nexport const DEFAULT_PK_FACTORY = {\n  // We prefer not to rely on ObjectId having a createPk method\n  createPk(): ObjectId {\n    return new ObjectId();\n  }\n};\n\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```js\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\nexport const MONGODB_WARNING_CODE = 'MONGODB DRIVER' as const;\n\n/** @internal */\nexport function emitWarning(message: string): void {\n  return process.emitWarning(message, { code: MONGODB_WARNING_CODE } as any);\n}\n\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\nexport function emitWarningOnce(message: string): void {\n  if (!emittedWarnings.has(message)) {\n    emittedWarnings.add(message);\n    return emitWarning(message);\n  }\n}\n\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\nexport function enumToString(en: Record<string, unknown>): string {\n  return Object.values(en).join(', ');\n}\n\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\nexport function supportsRetryableWrites(server: Server): boolean {\n  return (\n    !!server.loadBalanced ||\n    (server.description.maxWireVersion >= 6 &&\n      !!server.description.logicalSessionTimeoutMinutes &&\n      server.description.type !== ServerType.Standalone)\n  );\n}\n\nexport function parsePackageVersion({ version }: { version: string }): {\n  major: number;\n  minor: number;\n  patch: number;\n} {\n  const [major, minor, patch] = version.split('.').map((n: string) => Number.parseInt(n, 10));\n  return { major, minor, patch };\n}\n\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\nexport function shuffle<T>(sequence: Iterable<T>, limit = 0): Array<T> {\n  const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n\n  if (limit > items.length) {\n    throw new MongoRuntimeError('Limit must be less than the number of items');\n  }\n\n  let remainingItemsToShuffle = items.length;\n  const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n  while (remainingItemsToShuffle > lowerBound) {\n    // Pick a remaining element\n    const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n    remainingItemsToShuffle -= 1;\n\n    // And swap it with the current element\n    const swapHold = items[remainingItemsToShuffle];\n    items[remainingItemsToShuffle] = items[randomIndex];\n    items[randomIndex] = swapHold;\n  }\n\n  return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\n\n// TODO: this should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nexport function commandSupportsReadConcern(command: Document, options?: Document): boolean {\n  if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n    return true;\n  }\n\n  if (\n    command.mapReduce &&\n    options &&\n    options.out &&\n    (options.out.inline === 1 || options.out === 'inline')\n  ) {\n    return true;\n  }\n\n  return false;\n}\n"]},"metadata":{},"sourceType":"script"}