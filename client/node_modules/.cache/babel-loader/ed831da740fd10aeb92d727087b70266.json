{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommandOperation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst explain_1 = require(\"../explain\");\n\nconst read_concern_1 = require(\"../read_concern\");\n\nconst server_selection_1 = require(\"../sdam/server_selection\");\n\nconst utils_1 = require(\"../utils\");\n\nconst write_concern_1 = require(\"../write_concern\");\n\nconst operation_1 = require(\"./operation\");\n\nconst SUPPORTS_WRITE_CONCERN_AND_COLLATION = 5;\n/** @internal */\n\nclass CommandOperation extends operation_1.AbstractOperation {\n  constructor(parent, options) {\n    super(options);\n    this.options = options !== null && options !== void 0 ? options : {}; // NOTE: this was explicitly added for the add/remove user operations, it's likely\n    //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n    //       as a parent?\n\n    const dbNameOverride = (options === null || options === void 0 ? void 0 : options.dbName) || (options === null || options === void 0 ? void 0 : options.authdb);\n\n    if (dbNameOverride) {\n      this.ns = new utils_1.MongoDBNamespace(dbNameOverride, '$cmd');\n    } else {\n      this.ns = parent ? parent.s.namespace.withCollection('$cmd') : new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n\n    this.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    this.writeConcern = write_concern_1.WriteConcern.fromOptions(options); // TODO(NODE-2056): make logger another \"inheritable\" property\n\n    if (parent && parent.logger) {\n      this.logger = parent.logger;\n    }\n\n    if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n      this.explain = explain_1.Explain.fromOptions(options);\n    } else if ((options === null || options === void 0 ? void 0 : options.explain) != null) {\n      throw new error_1.MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\n    }\n  }\n\n  get canRetryWrite() {\n    if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n      return this.explain == null;\n    }\n\n    return true;\n  }\n\n  executeCommand(server, session, cmd, callback) {\n    // TODO: consider making this a non-enumerable property\n    this.server = server;\n    const options = { ...this.options,\n      ...this.bsonOptions,\n      readPreference: this.readPreference,\n      session\n    };\n    const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n    const inTransaction = this.session && this.session.inTransaction();\n\n    if (this.readConcern && (0, utils_1.commandSupportsReadConcern)(cmd) && !inTransaction) {\n      Object.assign(cmd, {\n        readConcern: this.readConcern\n      });\n    }\n\n    if (this.trySecondaryWrite && serverWireVersion < server_selection_1.MIN_SECONDARY_WRITE_WIRE_VERSION) {\n      options.omitReadPreference = true;\n    }\n\n    if (options.collation && serverWireVersion < SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      callback(new error_1.MongoCompatibilityError(`Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`));\n      return;\n    }\n\n    if (this.writeConcern && this.hasAspect(operation_1.Aspect.WRITE_OPERATION) && !inTransaction) {\n      Object.assign(cmd, {\n        writeConcern: this.writeConcern\n      });\n    }\n\n    if (serverWireVersion >= SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      if (options.collation && typeof options.collation === 'object' && !this.hasAspect(operation_1.Aspect.SKIP_COLLATION)) {\n        Object.assign(cmd, {\n          collation: options.collation\n        });\n      }\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    if (typeof options.comment === 'string') {\n      cmd.comment = options.comment;\n    }\n\n    if (this.hasAspect(operation_1.Aspect.EXPLAINABLE) && this.explain) {\n      if (serverWireVersion < 6 && cmd.aggregate) {\n        // Prior to 3.6, with aggregate, verbosity is ignored, and we must pass in \"explain: true\"\n        cmd.explain = true;\n      } else {\n        cmd = (0, utils_1.decorateWithExplain)(cmd, this.explain);\n      }\n    }\n\n    server.command(this.ns, cmd, options, callback);\n  }\n\n}\n\nexports.CommandOperation = CommandOperation;","map":{"version":3,"mappings":"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","names":["SUPPORTS_WRITE_CONCERN_AND_COLLATION","CommandOperation","operation_1","constructor","parent","options","dbNameOverride","dbName","authdb","ns","utils_1","s","namespace","withCollection","readConcern","read_concern_1","fromOptions","writeConcern","write_concern_1","logger","hasAspect","EXPLAINABLE","explain","explain_1","error_1","canRetryWrite","executeCommand","server","session","cmd","callback","bsonOptions","readPreference","serverWireVersion","inTransaction","Object","assign","trySecondaryWrite","server_selection_1","omitReadPreference","collation","name","WRITE_OPERATION","SKIP_COLLATION","maxTimeMS","comment","aggregate","command","exports"],"sources":["/Users/santiago/node_modules/mongodb/src/operations/command.ts"],"sourcesContent":["import type { BSONSerializeOptions, Document } from '../bson';\nimport { MongoCompatibilityError, MongoInvalidArgumentError } from '../error';\nimport { Explain, ExplainOptions } from '../explain';\nimport type { Logger } from '../logger';\nimport { ReadConcern } from '../read_concern';\nimport type { ReadPreference } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport { MIN_SECONDARY_WRITE_WIRE_VERSION } from '../sdam/server_selection';\nimport type { ClientSession } from '../sessions';\nimport {\n  Callback,\n  commandSupportsReadConcern,\n  decorateWithExplain,\n  maxWireVersion,\n  MongoDBNamespace\n} from '../utils';\nimport { WriteConcern, WriteConcernOptions } from '../write_concern';\nimport type { ReadConcernLike } from './../read_concern';\nimport { AbstractOperation, Aspect, OperationOptions } from './operation';\n\nconst SUPPORTS_WRITE_CONCERN_AND_COLLATION = 5;\n\n/** @public */\nexport interface CollationOptions {\n  locale: string;\n  caseLevel?: boolean;\n  caseFirst?: string;\n  strength?: number;\n  numericOrdering?: boolean;\n  alternate?: string;\n  maxVariable?: string;\n  backwards?: boolean;\n  normalization?: boolean;\n}\n\n/** @public */\nexport interface CommandOperationOptions\n  extends OperationOptions,\n    WriteConcernOptions,\n    ExplainOptions {\n  /** @deprecated This option does nothing */\n  fullResponse?: boolean;\n  /** Specify a read concern and level for the collection. (only MongoDB 3.2 or higher supported) */\n  readConcern?: ReadConcernLike;\n  /** Collation */\n  collation?: CollationOptions;\n  maxTimeMS?: number;\n  /** A user-provided comment to attach to this command */\n  comment?: string | Document;\n  /** Should retry failed writes */\n  retryWrites?: boolean;\n\n  // Admin command overrides.\n  dbName?: string;\n  authdb?: string;\n  noResponse?: boolean;\n}\n\n/** @internal */\nexport interface OperationParent {\n  s: { namespace: MongoDBNamespace };\n  readConcern?: ReadConcern;\n  writeConcern?: WriteConcern;\n  readPreference?: ReadPreference;\n  logger?: Logger;\n  bsonOptions?: BSONSerializeOptions;\n}\n\n/** @internal */\nexport abstract class CommandOperation<T> extends AbstractOperation<T> {\n  options: CommandOperationOptions;\n  ns: MongoDBNamespace;\n  readConcern?: ReadConcern;\n  writeConcern?: WriteConcern;\n  explain?: Explain;\n  logger?: Logger;\n\n  constructor(parent?: OperationParent, options?: CommandOperationOptions) {\n    super(options);\n    this.options = options ?? {};\n\n    // NOTE: this was explicitly added for the add/remove user operations, it's likely\n    //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n    //       as a parent?\n    const dbNameOverride = options?.dbName || options?.authdb;\n    if (dbNameOverride) {\n      this.ns = new MongoDBNamespace(dbNameOverride, '$cmd');\n    } else {\n      this.ns = parent\n        ? parent.s.namespace.withCollection('$cmd')\n        : new MongoDBNamespace('admin', '$cmd');\n    }\n\n    this.readConcern = ReadConcern.fromOptions(options);\n    this.writeConcern = WriteConcern.fromOptions(options);\n\n    // TODO(NODE-2056): make logger another \"inheritable\" property\n    if (parent && parent.logger) {\n      this.logger = parent.logger;\n    }\n\n    if (this.hasAspect(Aspect.EXPLAINABLE)) {\n      this.explain = Explain.fromOptions(options);\n    } else if (options?.explain != null) {\n      throw new MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\n    }\n  }\n\n  get canRetryWrite(): boolean {\n    if (this.hasAspect(Aspect.EXPLAINABLE)) {\n      return this.explain == null;\n    }\n    return true;\n  }\n\n  abstract execute(server: Server, session: ClientSession, callback: Callback<T>): void;\n\n  executeCommand(server: Server, session: ClientSession, cmd: Document, callback: Callback): void {\n    // TODO: consider making this a non-enumerable property\n    this.server = server;\n\n    const options = {\n      ...this.options,\n      ...this.bsonOptions,\n      readPreference: this.readPreference,\n      session\n    };\n\n    const serverWireVersion = maxWireVersion(server);\n    const inTransaction = this.session && this.session.inTransaction();\n\n    if (this.readConcern && commandSupportsReadConcern(cmd) && !inTransaction) {\n      Object.assign(cmd, { readConcern: this.readConcern });\n    }\n\n    if (this.trySecondaryWrite && serverWireVersion < MIN_SECONDARY_WRITE_WIRE_VERSION) {\n      options.omitReadPreference = true;\n    }\n\n    if (options.collation && serverWireVersion < SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      callback(\n        new MongoCompatibilityError(\n          `Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`\n        )\n      );\n      return;\n    }\n\n    if (this.writeConcern && this.hasAspect(Aspect.WRITE_OPERATION) && !inTransaction) {\n      Object.assign(cmd, { writeConcern: this.writeConcern });\n    }\n\n    if (serverWireVersion >= SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      if (\n        options.collation &&\n        typeof options.collation === 'object' &&\n        !this.hasAspect(Aspect.SKIP_COLLATION)\n      ) {\n        Object.assign(cmd, { collation: options.collation });\n      }\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    if (typeof options.comment === 'string') {\n      cmd.comment = options.comment;\n    }\n\n    if (this.hasAspect(Aspect.EXPLAINABLE) && this.explain) {\n      if (serverWireVersion < 6 && cmd.aggregate) {\n        // Prior to 3.6, with aggregate, verbosity is ignored, and we must pass in \"explain: true\"\n        cmd.explain = true;\n      } else {\n        cmd = decorateWithExplain(cmd, this.explain);\n      }\n    }\n\n    server.command(this.ns, cmd, options, callback);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}