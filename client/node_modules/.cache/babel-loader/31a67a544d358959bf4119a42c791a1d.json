{"ast":null,"code":"var _jsxFileName = \"/Users/santiago/Documents/tulipan1637/iot-sensor/app/src/features/table/Table.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useTable, useBlockLayout } from 'react-table';\nimport scrollbarWidth from './scrollbarWidth';\nimport { FixedSizeList } from 'react-window';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Table(_ref) {\n  _s();\n\n  let {\n    columns,\n    data\n  } = _ref;\n  const defaultColumn = React.useMemo(() => ({\n    width: 150\n  }), []);\n  const scrollBarSize = React.useMemo(() => scrollbarWidth(), []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data,\n    defaultColumn\n  }, useBlockLayout);\n  const RenderRow = React.useCallback(_ref2 => {\n    let {\n      index,\n      style\n    } = _ref2;\n    const row = rows[index];\n    prepareRow(row);\n    return /*#__PURE__*/_jsxDEV(\"div\", { ...row.getRowProps({\n        style\n      }),\n      className: \"tr\",\n      children: row.cells.map(cell => {\n        return /*#__PURE__*/_jsxDEV(\"div\", { ...cell.getCellProps(),\n          className: \"td\",\n          children: cell.render('Cell')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 19\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this);\n  }, [prepareRow, rows]);\n  return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n    style: {\n      border: 'solid 1px blue'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n          style: {\n            borderBottom: 'solid 3px red',\n            background: 'aliceblue',\n            color: 'black',\n            fontWeight: 'bold'\n          },\n          children: column.render('Header')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n      children: /*#__PURE__*/_jsxDEV(FixedSizeList, {\n        height: 400,\n        itemCount: rows.length,\n        itemSize: 35,\n        width: totalColumnsWidth + scrollBarSize,\n        children: RenderRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Table, \"KpRbI7DcQ2TC80RioV/p8xb9WdQ=\", false, function () {\n  return [useTable];\n});\n\n_c = Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["/Users/santiago/Documents/tulipan1637/iot-sensor/app/src/features/table/Table.js"],"names":["React","useTable","useBlockLayout","scrollbarWidth","FixedSizeList","Table","columns","data","defaultColumn","useMemo","width","scrollBarSize","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","RenderRow","useCallback","index","style","row","getRowProps","cells","map","cell","getCellProps","render","border","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","borderBottom","background","color","fontWeight","length","totalColumnsWidth"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,EAAkBC,cAAlB,QAAuC,aAAvC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,aAAT,QAA8B,cAA9B;;AAEA,OAAO,SAASC,KAAT,OAAiC;AAAA;;AAAA,MAAlB;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAkB;AAEtC,QAAMC,aAAa,GAAGR,KAAK,CAACS,OAAN,CACpB,OAAO;AACLC,IAAAA,KAAK,EAAE;AADF,GAAP,CADoB,EAIpB,EAJoB,CAAtB;AAOA,QAAMC,aAAa,GAAGX,KAAK,CAACS,OAAN,CAAc,MAAMN,cAAc,EAAlC,EAAsC,EAAtC,CAAtB;AAEI,QAAM;AACJS,IAAAA,aADI;AAEJC,IAAAA,iBAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,IAJI;AAKJC,IAAAA;AALI,MAMFf,QAAQ,CAAC;AAAEK,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA;AAAjB,GAAD,EAAkCN,cAAlC,CANZ;AAQA,QAAMe,SAAS,GAAGjB,KAAK,CAACkB,WAAN,CAChB,SAAsB;AAAA,QAArB;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAqB;AACpB,UAAMC,GAAG,GAAGN,IAAI,CAACI,KAAD,CAAhB;AACAH,IAAAA,UAAU,CAACK,GAAD,CAAV;AACA,wBACE,oBACMA,GAAG,CAACC,WAAJ,CAAgB;AAClBF,QAAAA;AADkB,OAAhB,CADN;AAIE,MAAA,SAAS,EAAC,IAJZ;AAAA,gBAMGC,GAAG,CAACE,KAAJ,CAAUC,GAAV,CAAcC,IAAI,IAAI;AACrB,4BACE,oBAASA,IAAI,CAACC,YAAL,EAAT;AAA8B,UAAA,SAAS,EAAC,IAAxC;AAAA,oBACGD,IAAI,CAACE,MAAL,CAAY,MAAZ;AADH;AAAA;AAAA;AAAA;AAAA,gBADF;AAKD,OANA;AANH;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD,GApBe,EAqBhB,CAACX,UAAD,EAAaD,IAAb,CArBgB,CAAlB;AA0BA,sBACE,sBAAWH,aAAa,EAAxB;AAA4B,IAAA,KAAK,EAAE;AAAEgB,MAAAA,MAAM,EAAE;AAAV,KAAnC;AAAA,4BACE;AAAA,gBACGd,YAAY,CAACU,GAAb,CAAiBK,WAAW,iBAC3B,mBAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA,kBACGD,WAAW,CAACE,OAAZ,CAAoBP,GAApB,CAAwBQ,MAAM,iBAC7B,mBACMA,MAAM,CAACC,cAAP,EADN;AAEE,UAAA,KAAK,EAAE;AACLC,YAAAA,YAAY,EAAE,eADT;AAELC,YAAAA,UAAU,EAAE,WAFP;AAGLC,YAAAA,KAAK,EAAE,OAHF;AAILC,YAAAA,UAAU,EAAE;AAJP,WAFT;AAAA,oBASGL,MAAM,CAACL,MAAP,CAAc,QAAd;AATH;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAoBE,sBAAWd,iBAAiB,EAA5B;AAAA,6BACA,QAAC,aAAD;AACA,QAAA,MAAM,EAAE,GADR;AAEA,QAAA,SAAS,EAAEE,IAAI,CAACuB,MAFhB;AAGA,QAAA,QAAQ,EAAE,EAHV;AAIA,QAAA,KAAK,EAAEC,iBAAiB,GAAC5B,aAJzB;AAAA,kBAMCM;AAND;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YApBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiCL;;GA9EeZ,K;UAiBNJ,Q;;;KAjBMI,K","sourcesContent":["import React from 'react';\nimport {useTable, useBlockLayout} from 'react-table';\nimport scrollbarWidth from './scrollbarWidth'\nimport { FixedSizeList } from 'react-window'\n\nexport function Table({ columns, data }){\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      width: 150,\n    }),\n    []\n  )\n\n  const scrollBarSize = React.useMemo(() => scrollbarWidth(), [])\n    \n      const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n      } = useTable({ columns, data, defaultColumn },useBlockLayout);\n\n      const RenderRow = React.useCallback(\n        ({ index, style }) => {\n          const row = rows[index]\n          prepareRow(row)\n          return (\n            <div\n              {...row.getRowProps({\n                style,\n              })}\n              className=\"tr\"\n            >\n              {row.cells.map(cell => {\n                return (\n                  <div {...cell.getCellProps()} className=\"td\">\n                    {cell.render('Cell')}\n                  </div>\n                )\n              })}\n            </div>\n          )\n        },\n        [prepareRow, rows]\n      )\n\n\n    \n      return (\n        <table {...getTableProps()} style={{ border: 'solid 1px blue' }}>\n          <thead>\n            {headerGroups.map(headerGroup => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map(column => (\n                  <th\n                    {...column.getHeaderProps()}\n                    style={{\n                      borderBottom: 'solid 3px red',\n                      background: 'aliceblue',\n                      color: 'black',\n                      fontWeight: 'bold',\n                    }}\n                  >\n                    {column.render('Header')}\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()}>\n          <FixedSizeList\n          height={400}\n          itemCount={rows.length}\n          itemSize={35}\n          width={totalColumnsWidth+scrollBarSize}\n        >\n          {RenderRow}\n        </FixedSizeList>\n          </tbody>\n        </table>\n      )\n}"]},"metadata":{},"sourceType":"module"}