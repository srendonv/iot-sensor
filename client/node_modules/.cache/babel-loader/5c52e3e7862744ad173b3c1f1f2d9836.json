{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridFSBucket = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst utils_1 = require(\"../utils\");\n\nconst write_concern_1 = require(\"../write_concern\");\n\nconst download_1 = require(\"./download\");\n\nconst upload_1 = require(\"./upload\");\n\nconst DEFAULT_GRIDFS_BUCKET_OPTIONS = {\n  bucketName: 'fs',\n  chunkSizeBytes: 255 * 1024\n};\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */\n\nclass GridFSBucket extends mongo_types_1.TypedEventEmitter {\n  constructor(db, options) {\n    super();\n    this.setMaxListeners(0);\n    const privateOptions = { ...DEFAULT_GRIDFS_BUCKET_OPTIONS,\n      ...options,\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n    };\n    this.s = {\n      db,\n      options: privateOptions,\n      _chunksCollection: db.collection(privateOptions.bucketName + '.chunks'),\n      _filesCollection: db.collection(privateOptions.bucketName + '.files'),\n      checkedIndexes: false,\n      calledOpenUploadStream: false\n    };\n  }\n  /**\n   * Returns a writable stream (GridFSBucketWriteStream) for writing\n   * buffers to GridFS. The stream's 'id' property contains the resulting\n   * file's id.\n   *\n   * @param filename - The value of the 'filename' key in the files doc\n   * @param options - Optional settings.\n   */\n\n\n  openUploadStream(filename, options) {\n    return new upload_1.GridFSBucketWriteStream(this, filename, options);\n  }\n  /**\n   * Returns a writable stream (GridFSBucketWriteStream) for writing\n   * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n   * file's id.\n   */\n\n\n  openUploadStreamWithId(id, filename, options) {\n    return new upload_1.GridFSBucketWriteStream(this, filename, { ...options,\n      id\n    });\n  }\n  /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */\n\n\n  openDownloadStream(id, options) {\n    return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, {\n      _id: id\n    }, options);\n  }\n\n  delete(id, callback) {\n    return (0, utils_1.executeLegacyOperation)((0, utils_1.getTopology)(this.s.db), _delete, [this, id, callback], {\n      skipSessions: true\n    });\n  }\n  /** Convenience wrapper around find on the files collection */\n\n\n  find(filter, options) {\n    filter !== null && filter !== void 0 ? filter : filter = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.s._filesCollection.find(filter, options);\n  }\n  /**\n   * Returns a readable stream (GridFSBucketReadStream) for streaming the\n   * file with the given name from GridFS. If there are multiple files with\n   * the same name, this will stream the most recent file with the given name\n   * (as determined by the `uploadDate` field). You can set the `revision`\n   * option to change this behavior.\n   */\n\n\n  openDownloadStreamByName(filename, options) {\n    let sort = {\n      uploadDate: -1\n    };\n    let skip = undefined;\n\n    if (options && options.revision != null) {\n      if (options.revision >= 0) {\n        sort = {\n          uploadDate: 1\n        };\n        skip = options.revision;\n      } else {\n        skip = -options.revision - 1;\n      }\n    }\n\n    return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, {\n      filename\n    }, { ...options,\n      sort,\n      skip\n    });\n  }\n\n  rename(id, filename, callback) {\n    return (0, utils_1.executeLegacyOperation)((0, utils_1.getTopology)(this.s.db), _rename, [this, id, filename, callback], {\n      skipSessions: true\n    });\n  }\n\n  drop(callback) {\n    return (0, utils_1.executeLegacyOperation)((0, utils_1.getTopology)(this.s.db), _drop, [this, callback], {\n      skipSessions: true\n    });\n  }\n  /** Get the Db scoped logger. */\n\n\n  getLogger() {\n    return this.s.db.s.logger;\n  }\n\n}\n\nexports.GridFSBucket = GridFSBucket;\n/**\n * When the first call to openUploadStream is made, the upload stream will\n * check to see if it needs to create the proper indexes on the chunks and\n * files collections. This event is fired either when 1) it determines that\n * no index creation is necessary, 2) when it successfully creates the\n * necessary indexes.\n * @event\n */\n\nGridFSBucket.INDEX = 'index';\n\nfunction _delete(bucket, id, callback) {\n  return bucket.s._filesCollection.deleteOne({\n    _id: id\n  }, (error, res) => {\n    if (error) {\n      return callback(error);\n    }\n\n    return bucket.s._chunksCollection.deleteMany({\n      files_id: id\n    }, error => {\n      if (error) {\n        return callback(error);\n      } // Delete orphaned chunks before returning FileNotFound\n\n\n      if (!(res === null || res === void 0 ? void 0 : res.deletedCount)) {\n        // TODO(NODE-3483): Replace with more appropriate error\n        // Consider creating new error MongoGridFSFileNotFoundError\n        return callback(new error_1.MongoRuntimeError(`File not found for id ${id}`));\n      }\n\n      return callback();\n    });\n  });\n}\n\nfunction _rename(bucket, id, filename, callback) {\n  const filter = {\n    _id: id\n  };\n  const update = {\n    $set: {\n      filename\n    }\n  };\n  return bucket.s._filesCollection.updateOne(filter, update, (error, res) => {\n    if (error) {\n      return callback(error);\n    }\n\n    if (!(res === null || res === void 0 ? void 0 : res.matchedCount)) {\n      return callback(new error_1.MongoRuntimeError(`File with id ${id} not found`));\n    }\n\n    return callback();\n  });\n}\n\nfunction _drop(bucket, callback) {\n  return bucket.s._filesCollection.drop(error => {\n    if (error) {\n      return callback(error);\n    }\n\n    return bucket.s._chunksCollection.drop(error => {\n      if (error) {\n        return callback(error);\n      }\n\n      return callback();\n    });\n  });\n}","map":{"version":3,"mappings":"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","names":["DEFAULT_GRIDFS_BUCKET_OPTIONS","bucketName","chunkSizeBytes","GridFSBucket","mongo_types_1","constructor","db","options","setMaxListeners","privateOptions","writeConcern","write_concern_1","fromOptions","s","_chunksCollection","collection","_filesCollection","checkedIndexes","calledOpenUploadStream","openUploadStream","filename","upload_1","openUploadStreamWithId","id","openDownloadStream","download_1","readPreference","_id","delete","callback","_delete","skipSessions","find","filter","openDownloadStreamByName","sort","uploadDate","skip","undefined","revision","rename","_rename","drop","_drop","getLogger","logger","exports","bucket","deleteOne","error","res","deleteMany","files_id","deletedCount","error_1","update","$set","updateOne","matchedCount"],"sources":["/Users/santiago/node_modules/mongodb/src/gridfs/index.ts"],"sourcesContent":["import type { ObjectId } from '../bson';\nimport type { Collection } from '../collection';\nimport type { FindCursor } from '../cursor/find_cursor';\nimport type { Db } from '../db';\nimport { MongoRuntimeError } from '../error';\nimport type { Logger } from '../logger';\nimport { Filter, TypedEventEmitter } from '../mongo_types';\nimport type { ReadPreference } from '../read_preference';\nimport type { Sort } from '../sort';\nimport { Callback, executeLegacyOperation, getTopology } from '../utils';\nimport { WriteConcern, WriteConcernOptions } from '../write_concern';\nimport type { FindOptions } from './../operations/find';\nimport {\n  GridFSBucketReadStream,\n  GridFSBucketReadStreamOptions,\n  GridFSBucketReadStreamOptionsWithRevision,\n  GridFSFile\n} from './download';\nimport { GridFSBucketWriteStream, GridFSBucketWriteStreamOptions, GridFSChunk } from './upload';\n\nconst DEFAULT_GRIDFS_BUCKET_OPTIONS: {\n  bucketName: string;\n  chunkSizeBytes: number;\n} = {\n  bucketName: 'fs',\n  chunkSizeBytes: 255 * 1024\n};\n\n/** @public */\nexport interface GridFSBucketOptions extends WriteConcernOptions {\n  /** The 'files' and 'chunks' collections will be prefixed with the bucket name followed by a dot. */\n  bucketName?: string;\n  /** Number of bytes stored in each chunk. Defaults to 255KB */\n  chunkSizeBytes?: number;\n  /** Read preference to be passed to read operations */\n  readPreference?: ReadPreference;\n}\n\n/** @internal */\nexport interface GridFSBucketPrivate {\n  db: Db;\n  options: {\n    bucketName: string;\n    chunkSizeBytes: number;\n    readPreference?: ReadPreference;\n    writeConcern: WriteConcern | undefined;\n  };\n  _chunksCollection: Collection<GridFSChunk>;\n  _filesCollection: Collection<GridFSFile>;\n  checkedIndexes: boolean;\n  calledOpenUploadStream: boolean;\n}\n\n/** @public */\nexport type GridFSBucketEvents = {\n  index(): void;\n};\n\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */\nexport class GridFSBucket extends TypedEventEmitter<GridFSBucketEvents> {\n  /** @internal */\n  s: GridFSBucketPrivate;\n\n  /**\n   * When the first call to openUploadStream is made, the upload stream will\n   * check to see if it needs to create the proper indexes on the chunks and\n   * files collections. This event is fired either when 1) it determines that\n   * no index creation is necessary, 2) when it successfully creates the\n   * necessary indexes.\n   * @event\n   */\n  static readonly INDEX = 'index' as const;\n\n  constructor(db: Db, options?: GridFSBucketOptions) {\n    super();\n    this.setMaxListeners(0);\n    const privateOptions = {\n      ...DEFAULT_GRIDFS_BUCKET_OPTIONS,\n      ...options,\n      writeConcern: WriteConcern.fromOptions(options)\n    };\n    this.s = {\n      db,\n      options: privateOptions,\n      _chunksCollection: db.collection<GridFSChunk>(privateOptions.bucketName + '.chunks'),\n      _filesCollection: db.collection<GridFSFile>(privateOptions.bucketName + '.files'),\n      checkedIndexes: false,\n      calledOpenUploadStream: false\n    };\n  }\n\n  /**\n   * Returns a writable stream (GridFSBucketWriteStream) for writing\n   * buffers to GridFS. The stream's 'id' property contains the resulting\n   * file's id.\n   *\n   * @param filename - The value of the 'filename' key in the files doc\n   * @param options - Optional settings.\n   */\n\n  openUploadStream(\n    filename: string,\n    options?: GridFSBucketWriteStreamOptions\n  ): GridFSBucketWriteStream {\n    return new GridFSBucketWriteStream(this, filename, options);\n  }\n\n  /**\n   * Returns a writable stream (GridFSBucketWriteStream) for writing\n   * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n   * file's id.\n   */\n  openUploadStreamWithId(\n    id: ObjectId,\n    filename: string,\n    options?: GridFSBucketWriteStreamOptions\n  ): GridFSBucketWriteStream {\n    return new GridFSBucketWriteStream(this, filename, { ...options, id });\n  }\n\n  /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */\n  openDownloadStream(\n    id: ObjectId,\n    options?: GridFSBucketReadStreamOptions\n  ): GridFSBucketReadStream {\n    return new GridFSBucketReadStream(\n      this.s._chunksCollection,\n      this.s._filesCollection,\n      this.s.options.readPreference,\n      { _id: id },\n      options\n    );\n  }\n\n  /**\n   * Deletes a file with the given id\n   *\n   * @param id - The id of the file doc\n   */\n  delete(id: ObjectId): Promise<undefined>;\n  delete(id: ObjectId, callback: Callback<void>): void;\n  delete(id: ObjectId, callback?: Callback<void>): Promise<undefined> | void {\n    return executeLegacyOperation(getTopology(this.s.db), _delete, [this, id, callback], {\n      skipSessions: true\n    });\n  }\n\n  /** Convenience wrapper around find on the files collection */\n  find(filter?: Filter<GridFSFile>, options?: FindOptions): FindCursor<GridFSFile> {\n    filter ??= {};\n    options = options ?? {};\n    return this.s._filesCollection.find(filter, options);\n  }\n\n  /**\n   * Returns a readable stream (GridFSBucketReadStream) for streaming the\n   * file with the given name from GridFS. If there are multiple files with\n   * the same name, this will stream the most recent file with the given name\n   * (as determined by the `uploadDate` field). You can set the `revision`\n   * option to change this behavior.\n   */\n  openDownloadStreamByName(\n    filename: string,\n    options?: GridFSBucketReadStreamOptionsWithRevision\n  ): GridFSBucketReadStream {\n    let sort: Sort = { uploadDate: -1 };\n    let skip = undefined;\n    if (options && options.revision != null) {\n      if (options.revision >= 0) {\n        sort = { uploadDate: 1 };\n        skip = options.revision;\n      } else {\n        skip = -options.revision - 1;\n      }\n    }\n    return new GridFSBucketReadStream(\n      this.s._chunksCollection,\n      this.s._filesCollection,\n      this.s.options.readPreference,\n      { filename },\n      { ...options, sort, skip }\n    );\n  }\n\n  /**\n   * Renames the file with the given _id to the given string\n   *\n   * @param id - the id of the file to rename\n   * @param filename - new name for the file\n   */\n  rename(id: ObjectId, filename: string): Promise<void>;\n  rename(id: ObjectId, filename: string, callback: Callback<void>): void;\n  rename(id: ObjectId, filename: string, callback?: Callback<void>): Promise<void> | void {\n    return executeLegacyOperation(getTopology(this.s.db), _rename, [this, id, filename, callback], {\n      skipSessions: true\n    });\n  }\n\n  /** Removes this bucket's files collection, followed by its chunks collection. */\n  drop(): Promise<void>;\n  drop(callback: Callback<void>): void;\n  drop(callback?: Callback<void>): Promise<void> | void {\n    return executeLegacyOperation(getTopology(this.s.db), _drop, [this, callback], {\n      skipSessions: true\n    });\n  }\n\n  /** Get the Db scoped logger. */\n  getLogger(): Logger {\n    return this.s.db.s.logger;\n  }\n}\n\nfunction _delete(bucket: GridFSBucket, id: ObjectId, callback: Callback<void>): void {\n  return bucket.s._filesCollection.deleteOne({ _id: id }, (error, res) => {\n    if (error) {\n      return callback(error);\n    }\n\n    return bucket.s._chunksCollection.deleteMany({ files_id: id }, error => {\n      if (error) {\n        return callback(error);\n      }\n\n      // Delete orphaned chunks before returning FileNotFound\n      if (!res?.deletedCount) {\n        // TODO(NODE-3483): Replace with more appropriate error\n        // Consider creating new error MongoGridFSFileNotFoundError\n        return callback(new MongoRuntimeError(`File not found for id ${id}`));\n      }\n\n      return callback();\n    });\n  });\n}\n\nfunction _rename(\n  bucket: GridFSBucket,\n  id: ObjectId,\n  filename: string,\n  callback: Callback<void>\n): void {\n  const filter = { _id: id };\n  const update = { $set: { filename } };\n  return bucket.s._filesCollection.updateOne(filter, update, (error?, res?) => {\n    if (error) {\n      return callback(error);\n    }\n\n    if (!res?.matchedCount) {\n      return callback(new MongoRuntimeError(`File with id ${id} not found`));\n    }\n\n    return callback();\n  });\n}\n\nfunction _drop(bucket: GridFSBucket, callback: Callback<void>): void {\n  return bucket.s._filesCollection.drop((error?: Error) => {\n    if (error) {\n      return callback(error);\n    }\n    return bucket.s._chunksCollection.drop((error?: Error) => {\n      if (error) {\n        return callback(error);\n      }\n\n      return callback();\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"script"}